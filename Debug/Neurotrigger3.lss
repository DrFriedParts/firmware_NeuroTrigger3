
Neurotrigger3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c2a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00001c2a  00001cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  00802012  00802012  00001cf0  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00001cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000b7c  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000275  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001a0  00000000  00000000  00002ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000045ee  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d93  00000000  00000000  00007276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001459  00000000  00000000  00008009  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000884  00000000  00000000  00009464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e63  00000000  00000000  00009ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001533  00000000  00000000  0000ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  0000c07e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_2>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_58>
      ec:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_59>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_68>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	10 e2       	ldi	r17, 0x20	; 32
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	ea e2       	ldi	r30, 0x2A	; 42
     18c:	fc e1       	ldi	r31, 0x1C	; 28
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 31       	cpi	r26, 0x12	; 18
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a2 e1       	ldi	r26, 0x12	; 18
     19e:	b0 e2       	ldi	r27, 0x20	; 32
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	aa 32       	cpi	r26, 0x2A	; 42
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 4c 02 	call	0x498	; 0x498 <main>
     1ae:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <ac_output>:
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
	ac_output(ENABLE); //AC output to pin PA7;
}

void ac_output(uint8_t config){
	switch(config){
     1b6:	89 32       	cpi	r24, 0x29	; 41
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <ac_output+0xc>
	case DISABLE:
		ACA.CTRLA = 0x00; //NO AC output to pin PA7;
     1ba:	e0 e8       	ldi	r30, 0x80	; 128
     1bc:	f3 e0       	ldi	r31, 0x03	; 3
     1be:	14 82       	std	Z+4, r1	; 0x04
		break;
     1c0:	08 95       	ret
	case ENABLE:
	default:
		ACA.CTRLA = 0x01; //AC output to pin PA7;	
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e0 e8       	ldi	r30, 0x80	; 128
     1c6:	f3 e0       	ldi	r31, 0x03	; 3
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	08 95       	ret

000001cc <init_ac>:

//Handles the Analog Comparator

void init_ac(){
	//hysterysis options: 0mV, 20mV, 50mV
	ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1cc:	e0 e8       	ldi	r30, 0x80	; 128
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	80 83       	st	Z, r24
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	82 83       	std	Z+2, r24	; 0x02
	ac_output(ENABLE); //AC output to pin PA7;
     1d8:	8a e2       	ldi	r24, 0x2A	; 42
     1da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
}
     1de:	08 95       	ret

000001e0 <ac_hysteresis>:
//#############################################################
//## ACs
//#############################################################

void ac_hysteresis(uint8_t amount){
	switch(amount){
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <ac_hysteresis+0x10>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	41 f4       	brne	.+16     	; 0x1f8 <ac_hysteresis+0x18>
	case LARGE:
		ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	80 93 80 03 	sts	0x0380, r24
		break;
     1ee:	08 95       	ret
	case SMALL:
		ACA.AC0CTRL = B8(00001011); //enable AC0; 20mV hysterysis; no interrupts; high-speed mode
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	80 93 80 03 	sts	0x0380, r24
		break;
     1f6:	08 95       	ret
	case NONE:
	default:
		ACA.AC0CTRL = B8(00001001); //enable AC0; no hysterysis; no interrupts; high-speed mode		
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	80 93 80 03 	sts	0x0380, r24
     1fe:	08 95       	ret

00000200 <ac_polarity>:

//Sets output polarity (e.g. active high or active low output)
void ac_polarity(uint8_t polarity){
	//reverse the comparator inputs to reverse the output polarity
	//pin I/O functions are overridden by the AC unit so I/O inversion is ineffective
	if (polarity == IDLE_HIGH){
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	29 f4       	brne	.+10     	; 0x20e <ac_polarity+0xe>
		ACA.AC0MUXCTRL = B8(00101000); //Pos. input = PA5; Neg. Input = PA0; 
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	e0 e8       	ldi	r30, 0x80	; 128
     208:	f3 e0       	ldi	r31, 0x03	; 3
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	08 95       	ret
	}
	else {
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	08 95       	ret

00000218 <service_ac>:
	}
}

void service_ac(){	
}
     218:	08 95       	ret

0000021a <init_adc>:
#include "adc.h"

//Handles the ADC

void init_adc(){
	ADCA.REFCTRL = B8(00010000); //Use AVCC/1.6 = 2.063V as reference (highest allowed)
     21a:	e0 e0       	ldi	r30, 0x00	; 0
     21c:	f2 e0       	ldi	r31, 0x02	; 2
     21e:	80 e1       	ldi	r24, 0x10	; 16
     220:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = B8(00000000); //12bit-right adjusted; One-shot conversion
     222:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 83       	st	Z, r25
	ADCA.CH0.MUXCTRL = B8(00010000); //CH0 converts from PA2
     228:	81 a3       	lds	r24, 0x51
	ADCA.CH1.MUXCTRL = B8(00011000); //CH1 converts from PA3
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	81 a7       	lds	r24, 0x71
}
     22e:	08 95       	ret

00000230 <adc_ch0>:
//#############################################################

//Performs a single 12-bit conversion on ADC CH0
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch0(){
	ADCA.CH0.CTRL = B8(10000001); //Single ended input mode; No gain
     230:	81 e8       	ldi	r24, 0x81	; 129
     232:	e0 e0       	ldi	r30, 0x00	; 0
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	80 a3       	lds	r24, 0x50
	while(ADCA.CH0.INTFLAGS == 0x00); //wait for conversion to complete
     238:	83 a1       	lds	r24, 0x43
     23a:	88 23       	and	r24, r24
     23c:	e9 f3       	breq	.-6      	; 0x238 <adc_ch0+0x8>
	ADCA.CH0.INTFLAGS = 0x01; //clear the conversion complete flag
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	83 a3       	lds	r24, 0x53
	return ADCA.CH0.RES;
     246:	84 a1       	lds	r24, 0x44
     248:	95 a1       	lds	r25, 0x45
}
     24a:	08 95       	ret

0000024c <adc_ch1>:

//Performs a single 12-bit conversion on ADC CH1
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch1(){
	ADCA.CH1.CTRL = B8(10000001); //Single ended input mode; No gain
     24c:	81 e8       	ldi	r24, 0x81	; 129
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	80 a7       	lds	r24, 0x70
	while(ADCA.CH1.INTFLAGS == 0x00); //wait for conversion to complete
     254:	83 a5       	lds	r24, 0x63
     256:	88 23       	and	r24, r24
     258:	e9 f3       	breq	.-6      	; 0x254 <adc_ch1+0x8>
	ADCA.CH1.INTFLAGS = 0x01; //clear the conversion complete flag
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	83 a7       	lds	r24, 0x73
	return ADCA.CH1.RES;
     262:	84 a5       	lds	r24, 0x64
     264:	95 a5       	lds	r25, 0x65
}
     266:	08 95       	ret

00000268 <adc_ch0_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     27a:	10 92 19 20 	sts	0x2019, r1
     27e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	9f ef       	ldi	r25, 0xFF	; 255
     286:	80 93 1b 20 	sts	0x201B, r24
     28a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     28e:	01 15       	cp	r16, r1
     290:	11 05       	cpc	r17, r1
     292:	49 f1       	breq	.+82     	; 0x2e6 <adc_ch0_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     298:	cc 24       	eor	r12, r12
     29a:	dd 24       	eor	r13, r13
     29c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch0();
     29e:	0e 94 18 01 	call	0x230	; 0x230 <adc_ch0>
		sum += intermediate; //for averaging
     2a2:	ac 01       	movw	r20, r24
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	c4 0e       	add	r12, r20
     2aa:	d5 1e       	adc	r13, r21
     2ac:	e6 1e       	adc	r14, r22
     2ae:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     2b0:	20 91 1b 20 	lds	r18, 0x201B
     2b4:	30 91 1c 20 	lds	r19, 0x201C
     2b8:	82 17       	cp	r24, r18
     2ba:	93 07       	cpc	r25, r19
     2bc:	20 f4       	brcc	.+8      	; 0x2c6 <adc_ch0_stats+0x5e>
     2be:	80 93 1b 20 	sts	0x201B, r24
     2c2:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     2c6:	20 91 19 20 	lds	r18, 0x2019
     2ca:	30 91 1a 20 	lds	r19, 0x201A
     2ce:	28 17       	cp	r18, r24
     2d0:	39 07       	cpc	r19, r25
     2d2:	20 f4       	brcc	.+8      	; 0x2dc <adc_ch0_stats+0x74>
     2d4:	80 93 19 20 	sts	0x2019, r24
     2d8:	90 93 1a 20 	sts	0x201A, r25
		i++;
     2dc:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     2de:	c0 17       	cp	r28, r16
     2e0:	d1 07       	cpc	r29, r17
     2e2:	e9 f6       	brne	.-70     	; 0x29e <adc_ch0_stats+0x36>
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <adc_ch0_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     2e6:	cc 24       	eor	r12, r12
     2e8:	dd 24       	eor	r13, r13
     2ea:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     2ec:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     2f0:	98 01       	movw	r18, r16
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__udivmodsi4>
     2fe:	20 93 17 20 	sts	0x2017, r18
     302:	30 93 18 20 	sts	0x2018, r19
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <adc_ch1_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     32a:	10 92 19 20 	sts	0x2019, r1
     32e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	80 93 1b 20 	sts	0x201B, r24
     33a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     33e:	01 15       	cp	r16, r1
     340:	11 05       	cpc	r17, r1
     342:	49 f1       	breq	.+82     	; 0x396 <adc_ch1_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     348:	cc 24       	eor	r12, r12
     34a:	dd 24       	eor	r13, r13
     34c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch1();
     34e:	0e 94 26 01 	call	0x24c	; 0x24c <adc_ch1>
		sum += intermediate; //for averaging
     352:	ac 01       	movw	r20, r24
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	c4 0e       	add	r12, r20
     35a:	d5 1e       	adc	r13, r21
     35c:	e6 1e       	adc	r14, r22
     35e:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     360:	20 91 1b 20 	lds	r18, 0x201B
     364:	30 91 1c 20 	lds	r19, 0x201C
     368:	82 17       	cp	r24, r18
     36a:	93 07       	cpc	r25, r19
     36c:	20 f4       	brcc	.+8      	; 0x376 <adc_ch1_stats+0x5e>
     36e:	80 93 1b 20 	sts	0x201B, r24
     372:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     376:	20 91 19 20 	lds	r18, 0x2019
     37a:	30 91 1a 20 	lds	r19, 0x201A
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	20 f4       	brcc	.+8      	; 0x38c <adc_ch1_stats+0x74>
     384:	80 93 19 20 	sts	0x2019, r24
     388:	90 93 1a 20 	sts	0x201A, r25
		i++;
     38c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     38e:	c0 17       	cp	r28, r16
     390:	d1 07       	cpc	r29, r17
     392:	e9 f6       	brne	.-70     	; 0x34e <adc_ch1_stats+0x36>
     394:	03 c0       	rjmp	.+6      	; 0x39c <adc_ch1_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     396:	cc 24       	eor	r12, r12
     398:	dd 24       	eor	r13, r13
     39a:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     39c:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     3a0:	98 01       	movw	r18, r16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__udivmodsi4>
     3ae:	20 93 17 20 	sts	0x2017, r18
     3b2:	30 93 18 20 	sts	0x2018, r19
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <service_adc>:

void service_adc(){	
}
     3c8:	08 95       	ret

000003ca <init_dac>:
#include "ui.h"

//Handles the DAC for PORTB

void init_dac(){
	DACB.CTRLA = B8(00001101); //enable DAC and both output pins
     3ca:	e0 e2       	ldi	r30, 0x20	; 32
     3cc:	f3 e0       	ldi	r31, 0x03	; 3
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	80 83       	st	Z, r24
	DACB.CTRLB = B8(01000000); //enable sample-and-hold to allow for independent output operation
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = B8(00001000); //use AVCC as the reference
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	82 83       	std	Z+2, r24	; 0x02
}
     3da:	08 95       	ret

000003dc <dac_output0>:

void dac_output0(uint8_t config){
	switch(config){
     3dc:	89 32       	cpi	r24, 0x29	; 41
     3de:	31 f4       	brne	.+12     	; 0x3ec <dac_output0+0x10>
	case DISABLE:
		DACB.CTRLA = DACB.CTRLA & B8(11111011); //NO DAC output to pin PB2
     3e0:	e0 e2       	ldi	r30, 0x20	; 32
     3e2:	f3 e0       	ldi	r31, 0x03	; 3
     3e4:	80 81       	ld	r24, Z
     3e6:	8b 7f       	andi	r24, 0xFB	; 251
     3e8:	80 83       	st	Z, r24
		break;
     3ea:	08 95       	ret
	case ENABLE:
	default:
		DACB.CTRLA = DACB.CTRLA | B8(00000100); //DAC output to pin PB2
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f3 e0       	ldi	r31, 0x03	; 3
     3f0:	80 81       	ld	r24, Z
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 83       	st	Z, r24
     3f6:	08 95       	ret

000003f8 <dac_out0>:
//## DACs
//#############################################################

//DAC's are 12 bit valued -- numbers outside this range will overflow silently
uint16_t dac_out0(uint16_t value){
	DACB.CH0DATA = value; 
     3f8:	e0 e2       	ldi	r30, 0x20	; 32
     3fa:	f3 e0       	ldi	r31, 0x03	; 3
     3fc:	80 8f       	std	Z+24, r24	; 0x18
     3fe:	91 8f       	std	Z+25, r25	; 0x19
	return DACB.CH0DATA;
     400:	80 8d       	ldd	r24, Z+24	; 0x18
     402:	91 8d       	ldd	r25, Z+25	; 0x19
}	
     404:	08 95       	ret

00000406 <dac_out1>:
uint16_t dac_out1(uint16_t value){
	DACB.CH1DATA = value;
     406:	e0 e2       	ldi	r30, 0x20	; 32
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	82 8f       	std	Z+26, r24	; 0x1a
     40c:	93 8f       	std	Z+27, r25	; 0x1b
	return DACB.CH1DATA;
     40e:	82 8d       	ldd	r24, Z+26	; 0x1a
     410:	93 8d       	ldd	r25, Z+27	; 0x1b
}	
     412:	08 95       	ret

00000414 <dac_read0>:

uint16_t dac_read0() {return DACB.CH0DATA;}
     414:	e0 e2       	ldi	r30, 0x20	; 32
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	80 8d       	ldd	r24, Z+24	; 0x18
     41a:	91 8d       	ldd	r25, Z+25	; 0x19
     41c:	08 95       	ret

0000041e <dac_read1>:
uint16_t dac_read1() {return DACB.CH1DATA;}
     41e:	e0 e2       	ldi	r30, 0x20	; 32
     420:	f3 e0       	ldi	r31, 0x03	; 3
     422:	82 8d       	ldd	r24, Z+26	; 0x1a
     424:	93 8d       	ldd	r25, Z+27	; 0x1b
     426:	08 95       	ret

00000428 <service_dac>:

void service_dac(){	
}
     428:	08 95       	ret

0000042a <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_block((void*)&dac_background, (void*)&nv_dac_background, 2); //multiple size by 2 since uint16_t = 2 bytes
     42a:	8f e1       	ldi	r24, 0x1F	; 31
     42c:	90 e2       	ldi	r25, 0x20	; 32
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	42 e0       	ldi	r20, 0x02	; 2
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__eewr_block_x16a4>
	eeprom_write_block((void*)&dac_threshold, (void*)&nv_dac_threshold, 2); //multiple size by 2 since uint16_t = 2 bytes
     43a:	8d e1       	ldi	r24, 0x1D	; 29
     43c:	90 e2       	ldi	r25, 0x20	; 32
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	42 e0       	ldi	r20, 0x02	; 2
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__eewr_block_x16a4>
}
     44a:	08 95       	ret

0000044c <eeprom_restore>:

void eeprom_restore(){
	eeprom_read_block((void*)&dac_background, (void*)&nv_dac_background, 2);
     44c:	8f e1       	ldi	r24, 0x1F	; 31
     44e:	90 e2       	ldi	r25, 0x20	; 32
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	42 e0       	ldi	r20, 0x02	; 2
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__eerd_block_x16a4>
	eeprom_read_block((void*)&dac_threshold, (void*)&nv_dac_threshold, 2);
     45c:	8d e1       	ldi	r24, 0x1D	; 29
     45e:	90 e2       	ldi	r25, 0x20	; 32
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	42 e0       	ldi	r20, 0x02	; 2
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__eerd_block_x16a4>
	dac_out0(dac_background);
     46c:	80 91 1f 20 	lds	r24, 0x201F
     470:	90 91 20 20 	lds	r25, 0x2020
     474:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
	dac_out1(dac_threshold);
     478:	80 91 1d 20 	lds	r24, 0x201D
     47c:	90 91 1e 20 	lds	r25, 0x201E
     480:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
}
     484:	08 95       	ret

00000486 <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
     486:	0e 94 26 02 	call	0x44c	; 0x44c <eeprom_restore>
}
     48a:	08 95       	ret

0000048c <eeprom_read>:
	dac_out1(dac_threshold);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_dac_background);
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__eerd_byte_x16a4>
}
     494:	08 95       	ret

00000496 <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
     496:	08 95       	ret

00000498 <main>:
	uint16_t blah16;
	int8_t updown;
	uint16_t push_counter = 0;

	//[LED's, Button, & Switches]
		init_ui(); //init LED's first so that they are available for debugging
     498:	0e 94 b7 0c 	call	0x196e	; 0x196e <init_ui>

	//[CPU CLOCK]
		//Boot up and configure oscillator
			OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
     49c:	e0 e5       	ldi	r30, 0x50	; 80
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	82 e2       	ldi	r24, 0x22	; 34
     4a2:	82 83       	std	Z+2, r24	; 0x02
			OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     4a4:	8b e0       	ldi	r24, 0x0B	; 11
     4a6:	80 83       	st	Z, r24
		//Wait for stability
			led_on(LED_LEFT);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <led_on>
			//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
			while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
     4ae:	e0 e5       	ldi	r30, 0x50	; 80
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
     4b4:	8b 30       	cpi	r24, 0x0B	; 11
     4b6:	e9 f7       	brne	.-6      	; 0x4b2 <main+0x1a>
			led_off(LED_LEFT);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>
		//Configure 
			OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     4be:	e0 e5       	ldi	r30, 0x50	; 80
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	86 83       	std	Z+6, r24	; 0x06
			DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 60 00 	sts	0x0060, r24
		//Switch system clock over to stable RC oscillator
			//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
			//----REQUIRES CONFIGURATION PROTECTION REGISTER 
			CCP = CCP_IOREG_gc; //disable change protection for IO register
     4cc:	98 ed       	ldi	r25, 0xD8	; 216
     4ce:	94 bf       	out	0x34, r25	; 52
			CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     4d0:	80 93 40 00 	sts	0x0040, r24
			OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     4d4:	8a e0       	ldi	r24, 0x0A	; 10
     4d6:	80 83       	st	Z, r24
		//Now running live at 32MHz		

	//[UARTs]
		init_uart(&uctrl, BAUD_115200);
     4d8:	80 ea       	ldi	r24, 0xA0	; 160
     4da:	9a e0       	ldi	r25, 0x0A	; 10
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	0e 94 d1 05 	call	0xba2	; 0xba2 <init_uart>
		init_uart_buffer(&uctrl);
     4e2:	80 ea       	ldi	r24, 0xA0	; 160
     4e4:	9a e0       	ldi	r25, 0x0A	; 10
     4e6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <init_uart_buffer>
		init_uart(&udata, BAUD_115200);
     4ea:	80 eb       	ldi	r24, 0xB0	; 176
     4ec:	99 e0       	ldi	r25, 0x09	; 9
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	0e 94 d1 05 	call	0xba2	; 0xba2 <init_uart>

	//[ADC]
		init_adc();
     4f4:	0e 94 0d 01 	call	0x21a	; 0x21a <init_adc>

	//[DAC]
		//dac0 is background level
		//dac1 is threshold level
		init_dac();
     4f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_dac>

	//[AC]
		init_ac();
     4fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>

	//[PWM] 
		init_pwm(); // and serial trigger
     500:	0e 94 14 03 	call	0x628	; 0x628 <init_pwm>

	//[EEPROM]
		init_eeprom();
     504:	0e 94 43 02 	call	0x486	; 0x486 <init_eeprom>

	//[Realtime Loop Timer]
		//Use PortC's T/C0
		TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
     508:	e0 e0       	ldi	r30, 0x00	; 0
     50a:	f8 e0       	ldi	r31, 0x08	; 8
     50c:	87 e0       	ldi	r24, 0x07	; 7
     50e:	80 83       	st	Z, r24
		//TCC0.PER = 31; //992uS per timer period
		TCC0.PER = 61;
     510:	8d e3       	ldi	r24, 0x3D	; 61
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	86 a3       	lds	r24, 0x56
     516:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
		PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
     518:	87 e8       	ldi	r24, 0x87	; 135
     51a:	e0 ea       	ldi	r30, 0xA0	; 160
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	82 83       	std	Z+2, r24	; 0x02
		sei(); //ENABLE INTERRUPTS AND GO LIVE!
     520:	78 94       	sei

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
		led_off(LED_LEFT);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>
		led_off(LED_MID);
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>

		while(1){
			led_dim(LED_LEFT, blah);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <led_dim>
			
			blah += updown;			
     536:	12 e0       	ldi	r17, 0x02	; 2

int main(void){
	uint8_t blah;
	uint16_t blah16;
	int8_t updown;
	uint16_t push_counter = 0;
     538:	cc 24       	eor	r12, r12
     53a:	dd 24       	eor	r13, r13
		sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
     53c:	01 e0       	ldi	r16, 0x01	; 1
			
			if (STATE_Button == BUTTON_PUSHED){
				if (pwm_mode() == false){
					//DIODE mode
					if (++push_counter >= EEPROM_HOLD_TO_SAVE_TIME){
						STATE_Autolevel = AUTOLEVEL_DIODE;
     53e:	ff 24       	eor	r15, r15
     540:	f3 94       	inc	r15
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	d8 e0       	ldi	r29, 0x08	; 8
     546:	01 c0       	rjmp	.+2      	; 0x54a <main+0xb2>
		while(1){
			led_dim(LED_LEFT, blah);
			
			blah += updown;			
			if ((blah == 255) || (blah == 0)) {
				updown = -1 * updown;
     548:	01 95       	neg	r16
			}
			
			blah16++;
			
			service_pwm();
     54a:	0e 94 23 05 	call	0xa46	; 0xa46 <service_pwm>
			service_switches();
     54e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <service_switches>
			service_leds();
     552:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <service_leds>
			service_button();
     556:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <service_button>
			service_uart_buffer();
     55a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <service_uart_buffer>
			service_eeprom();
     55e:	0e 94 4b 02 	call	0x496	; 0x496 <service_eeprom>
			
			if (STATE_Button == BUTTON_PUSHED){
     562:	80 91 15 20 	lds	r24, 0x2015
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	a9 f4       	brne	.+42     	; 0x594 <main+0xfc>
				if (pwm_mode() == false){
     56a:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_mode>
     56e:	88 23       	and	r24, r24
     570:	99 f4       	brne	.+38     	; 0x598 <main+0x100>
					//DIODE mode
					if (++push_counter >= EEPROM_HOLD_TO_SAVE_TIME){
     572:	08 94       	sec
     574:	c1 1c       	adc	r12, r1
     576:	d1 1c       	adc	r13, r1
     578:	88 ee       	ldi	r24, 0xE8	; 232
     57a:	c8 16       	cp	r12, r24
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	d8 06       	cpc	r13, r24
     580:	58 f0       	brcs	.+22     	; 0x598 <main+0x100>
						STATE_Autolevel = AUTOLEVEL_DIODE;
     582:	f0 92 12 20 	sts	0x2012, r15
						led_on(LED_LEFT);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <led_on>
						led_on(LED_MID);						
     58c:	8f 2d       	mov	r24, r15
     58e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <led_on>
     592:	02 c0       	rjmp	.+4      	; 0x598 <main+0x100>
					//AUDIO mode
					//--deprecated, no longer supported.
				}					
			}
			else{
				push_counter = 0;
     594:	cc 24       	eor	r12, r12
     596:	dd 24       	eor	r13, r13

			//PERFORM AUTO-LEVELING!
				//adc is 503uV resolution
				//dac is 806uV resolution
				//ergo ADC -> DAC values must be adjusted by: (x*0.625 = x*5/8)
			switch(STATE_Autolevel){
     598:	80 91 12 20 	lds	r24, 0x2012
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	a9 f5       	brne	.+106    	; 0x60a <main+0x172>
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	94 e0       	ldi	r25, 0x04	; 4
     5a4:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
				//Set background level
					dac_background = (adc_avg*5)/8 + 170; //background (x*0.625 = x*5/8)
     5a8:	80 91 17 20 	lds	r24, 0x2017
     5ac:	90 91 18 20 	lds	r25, 0x2018
     5b0:	9c 01       	movw	r18, r24
     5b2:	22 0f       	add	r18, r18
     5b4:	33 1f       	adc	r19, r19
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	96 95       	lsr	r25
     5c0:	87 95       	ror	r24
     5c2:	96 95       	lsr	r25
     5c4:	87 95       	ror	r24
     5c6:	96 95       	lsr	r25
     5c8:	87 95       	ror	r24
     5ca:	9c 01       	movw	r18, r24
     5cc:	26 55       	subi	r18, 0x56	; 86
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	20 93 1f 20 	sts	0x201F, r18
     5d4:	30 93 20 20 	sts	0x2020, r19
					dac_threshold = dac_background + 200;
     5d8:	8e 58       	subi	r24, 0x8E	; 142
     5da:	9e 4f       	sbci	r25, 0xFE	; 254
     5dc:	80 93 1d 20 	sts	0x201D, r24
     5e0:	90 93 1e 20 	sts	0x201E, r25
					dac_out0(dac_background); 
     5e4:	c9 01       	movw	r24, r18
     5e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
					dac_out1(dac_threshold);
     5ea:	80 91 1d 20 	lds	r24, 0x201D
     5ee:	90 91 1e 20 	lds	r25, 0x201E
     5f2:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
				//Write to permanent memory
					eeprom_save();
     5f6:	0e 94 15 02 	call	0x42a	; 0x42a <eeprom_save>
				//We're done!
					led_off(LED_LEFT);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>
					led_off(LED_MID);
     600:	8f 2d       	mov	r24, r15
     602:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>
					STATE_Autolevel = AUTOLEVEL_IDLE;
     606:	10 92 12 20 	sts	0x2012, r1
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     60a:	8c 85       	ldd	r24, Y+12	; 0x0c
     60c:	80 ff       	sbrs	r24, 0
     60e:	fd cf       	rjmp	.-6      	; 0x60a <main+0x172>
			TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     610:	fc 86       	std	Y+12, r15	; 0x0c
		updown = 1;
		led_off(LED_LEFT);
		led_off(LED_MID);

		while(1){
			led_dim(LED_LEFT, blah);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	61 2f       	mov	r22, r17
     616:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <led_dim>
			
			blah += updown;			
     61a:	10 0f       	add	r17, r16
			if ((blah == 255) || (blah == 0)) {
     61c:	81 2f       	mov	r24, r17
     61e:	81 50       	subi	r24, 0x01	; 1
     620:	8e 3f       	cpi	r24, 0xFE	; 254
     622:	08 f0       	brcs	.+2      	; 0x626 <main+0x18e>
     624:	91 cf       	rjmp	.-222    	; 0x548 <main+0xb0>
     626:	91 cf       	rjmp	.-222    	; 0x54a <main+0xb2>

00000628 <init_pwm>:

//Initialize the PWM module
void init_pwm(){
	//no init needed for pwm functions. We initialize when the mode is activated.
	//but triggering does
	trigger_target = TRIGGER_TARGET;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e2       	ldi	r25, 0x20	; 32
     62c:	80 93 26 22 	sts	0x2226, r24
     630:	90 93 27 22 	sts	0x2227, r25
}
     634:	08 95       	ret

00000636 <pwm_enable>:

void pwm_enable(){
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = B8(00000101); //Timer Clock source is 32MHz/64; ~130ms Range @ 2uS resolution
     63a:	e0 e0       	ldi	r30, 0x00	; 0
     63c:	fa e0       	ldi	r31, 0x0A	; 10
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	80 83       	st	Z, r24
		TCE0.CTRLB = 0x00; //Turn off output pins (for both input capture and waveform generation)
     642:	11 82       	std	Z+1, r1	; 0x01
		TCE0.CTRLC = 0x00; //Only for the compare output unit
     644:	12 82       	std	Z+2, r1	; 0x02
		TCE0.CTRLD = B8(00000000); //Disable Event Unit
     646:	13 82       	std	Z+3, r1	; 0x03
		TCE0.CTRLE = 0x00; //Leave the counter in 16 (rather than 8) bit mode
     648:	14 82       	std	Z+4, r1	; 0x04

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; value set by calibration routine;
		dac_output0(ENABLE);
     64a:	8a e2       	ldi	r24, 0x2A	; 42
     64c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
		dac_out1(2000); //about mid scale
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	97 e0       	ldi	r25, 0x07	; 7
     654:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
		
	//ANALOG COMPARATOR
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5 (DAC1); 
     658:	c0 e8       	ldi	r28, 0x80	; 128
     65a:	d3 e0       	ldi	r29, 0x03	; 3
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	8a 83       	std	Y+2, r24	; 0x02
		//ACA.CTRLB = 20; //VCC Scaler = VCC/2 = 1.65V
		ac_output(DISABLE); //Turn off PA7 output pin (we'll use it directly to control the external peripheral)
     660:	89 e2       	ldi	r24, 0x29	; 41
     662:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
		ACA.AC0CTRL = B8(00111101); //enable AC0; 50mV hysterysis; high priority interrupt on edge toggle; high-speed mode
     666:	8d e3       	ldi	r24, 0x3D	; 61
     668:	88 83       	st	Y, r24
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     66a:	e0 e0       	ldi	r30, 0x00	; 0
     66c:	f6 e0       	ldi	r31, 0x06	; 6
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRSET = B8(10000000); //Set PA7 as output (should be anyway)
     672:	81 83       	std	Z+1, r24	; 0x01

	//BUTTON
		STATE_Autolevel = AUTOLEVEL_IDLE;
     674:	10 92 12 20 	sts	0x2012, r1
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <pwm_disable>:

void pwm_disable(){
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = 0x00; //Disable Timer
     67e:	10 92 00 0a 	sts	0x0A00, r1

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; Enable to allow DAC operation
		dac_output0(DISABLE);
     682:	89 e2       	ldi	r24, 0x29	; 41
     684:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>

	//ANALOG COMPARATOR
		init_ac();
     688:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>
}
     68c:	08 95       	ret

0000068e <pwm_mode>:

//Returns 'true' if the user configuration switch is set to Audio/PWM mode
boolean pwm_mode(){
	return sw_on(SW1);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <sw_on>
}
     694:	08 95       	ret

00000696 <pwm_polarity>:
		pwm_decode(width);
	}
}

void pwm_polarity(uint8_t polarity){
	STATE_Pwm_Polarity = polarity;
     696:	80 93 10 20 	sts	0x2010, r24
}
     69a:	08 95       	ret

0000069c <pwm_timer_reset>:
//#############################################################
//## TIMER CAPTURE FUNCTIONS
//#############################################################
void pwm_timer_reset(void){
	//Reset the timer effective immediately!
	TCE0.CNTL = 0x00;
     69c:	e0 e0       	ldi	r30, 0x00	; 0
     69e:	fa e0       	ldi	r31, 0x0A	; 10
     6a0:	10 a2       	lds	r17, 0x90
	TCE0.CNTH = 0x00;	
     6a2:	11 a2       	lds	r17, 0x91
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	84 87       	std	Z+12, r24	; 0x0c
}
     6a8:	08 95       	ret

000006aa <edge_start>:
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     6aa:	0e 94 4e 03 	call	0x69c	; 0x69c <pwm_timer_reset>
}
     6ae:	08 95       	ret

000006b0 <between>:
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     6b0:	9c 01       	movw	r18, r24
	if ((var > low) && (var < high)) return true;
     6b2:	68 17       	cp	r22, r24
     6b4:	79 07       	cpc	r23, r25
     6b6:	30 f4       	brcc	.+12     	; 0x6c4 <between+0x14>
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	24 17       	cp	r18, r20
     6bc:	35 07       	cpc	r19, r21
     6be:	18 f0       	brcs	.+6      	; 0x6c6 <between+0x16>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
	if ((var > low) && (var < high)) return true;
	else return false;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
}
     6c6:	08 95       	ret

000006c8 <pwm_out_high>:
		pwm_state('D');
	}
}

void pwm_out_high(void){
	STATE_Pwm = PWM_OUTPUT_HIGH; //A = Turn On Constantly
     6c8:	8f e4       	ldi	r24, 0x4F	; 79
     6ca:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     6ce:	80 e2       	ldi	r24, 0x20	; 32
     6d0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('<');
     6d4:	8c e3       	ldi	r24, 0x3C	; 60
     6d6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('-');
     6da:	8d e2       	ldi	r24, 0x2D	; 45
     6dc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('O');
     6e0:	8f e4       	ldi	r24, 0x4F	; 79
     6e2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('N');
     6e6:	8e e4       	ldi	r24, 0x4E	; 78
     6e8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
}
     6ec:	08 95       	ret

000006ee <pwm_out_low>:
void pwm_out_low(void){
	STATE_Pwm = PWM_OUTPUT_LOW; //B = Turn Off Constantly
     6ee:	8e e4       	ldi	r24, 0x4E	; 78
     6f0:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     6f4:	80 e2       	ldi	r24, 0x20	; 32
     6f6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('<');
     6fa:	8c e3       	ldi	r24, 0x3C	; 60
     6fc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('-');
     700:	8d e2       	ldi	r24, 0x2D	; 45
     702:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('O');
     706:	8f e4       	ldi	r24, 0x4F	; 79
     708:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('F');
     70c:	86 e4       	ldi	r24, 0x46	; 70
     70e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('F');
     712:	86 e4       	ldi	r24, 0x46	; 70
     714:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
}
     718:	08 95       	ret

0000071a <pwm_pulse>:

//Code to initiate an output pulse. Output pulses are only initiated if there is not a current pulse in progress
void pwm_pulse(void){	
	if (STATE_Pwm != PWM_OUTPUT_PULSE){
     71a:	80 91 11 20 	lds	r24, 0x2011
     71e:	80 35       	cpi	r24, 0x50	; 80
     720:	31 f0       	breq	.+12     	; 0x72e <pwm_pulse+0x14>
		STATE_Pwm = PWM_OUTPUT_PULSE; //Update state
     722:	80 e5       	ldi	r24, 0x50	; 80
     724:	80 93 11 20 	sts	0x2011, r24
		STATE_Pwm_Counter = PWM_PULSE_DURATION; //Load the counter
     728:	84 e1       	ldi	r24, 0x14	; 20
     72a:	80 93 13 20 	sts	0x2013, r24
	}	
	uart_enqueue(' ');
     72e:	80 e2       	ldi	r24, 0x20	; 32
     730:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('<');
     734:	8c e3       	ldi	r24, 0x3C	; 60
     736:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('-');
     73a:	8d e2       	ldi	r24, 0x2D	; 45
     73c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('P');
     740:	80 e5       	ldi	r24, 0x50	; 80
     742:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('U');
     746:	85 e5       	ldi	r24, 0x55	; 85
     748:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('L');
     74c:	8c e4       	ldi	r24, 0x4C	; 76
     74e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('S');
     752:	83 e5       	ldi	r24, 0x53	; 83
     754:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('E');
     758:	85 e4       	ldi	r24, 0x45	; 69
     75a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
}
     75e:	08 95       	ret

00000760 <pwm_reserved>:

void pwm_reserved(void){
	uart_enqueue(' ');
     760:	80 e2       	ldi	r24, 0x20	; 32
     762:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('<');
     766:	8c e3       	ldi	r24, 0x3C	; 60
     768:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('-');
     76c:	8d e2       	ldi	r24, 0x2D	; 45
     76e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('W');
     772:	87 e5       	ldi	r24, 0x57	; 87
     774:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('T');
     778:	84 e5       	ldi	r24, 0x54	; 84
     77a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('F');
     77e:	86 e4       	ldi	r24, 0x46	; 70
     780:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enqueue('!');
     784:	81 e2       	ldi	r24, 0x21	; 33
     786:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
}
     78a:	08 95       	ret

0000078c <pwm_change_state>:

void pwm_change_state(uint8_t new_state){
	STATE_Pwm_Decode = new_state;
     78c:	80 93 0f 20 	sts	0x200F, r24
	STATE_Pwm_Timeout = TIMEOUT;		
     790:	82 e3       	ldi	r24, 0x32	; 50
     792:	80 93 0e 20 	sts	0x200E, r24
}
     796:	08 95       	ret

00000798 <pwm_state>:

//State machine to decode more advanced command format
void pwm_state(uint8_t next_code){
	switch (STATE_Pwm_Decode){
     798:	90 91 0f 20 	lds	r25, 0x200F
     79c:	95 38       	cpi	r25, 0x85	; 133
     79e:	09 f4       	brne	.+2      	; 0x7a2 <pwm_state+0xa>
     7a0:	42 c0       	rjmp	.+132    	; 0x826 <pwm_state+0x8e>
     7a2:	96 38       	cpi	r25, 0x86	; 134
     7a4:	40 f4       	brcc	.+16     	; 0x7b6 <pwm_state+0x1e>
     7a6:	93 38       	cpi	r25, 0x83	; 131
     7a8:	d1 f0       	breq	.+52     	; 0x7de <pwm_state+0x46>
     7aa:	94 38       	cpi	r25, 0x84	; 132
     7ac:	58 f5       	brcc	.+86     	; 0x804 <pwm_state+0x6c>
     7ae:	92 38       	cpi	r25, 0x82	; 130
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <pwm_state+0x1c>
     7b2:	5a c0       	rjmp	.+180    	; 0x868 <pwm_state+0xd0>
     7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <pwm_state+0x38>
     7b6:	97 38       	cpi	r25, 0x87	; 135
     7b8:	09 f4       	brne	.+2      	; 0x7bc <pwm_state+0x24>
     7ba:	4a c0       	rjmp	.+148    	; 0x850 <pwm_state+0xb8>
     7bc:	97 38       	cpi	r25, 0x87	; 135
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <pwm_state+0x2a>
     7c0:	43 c0       	rjmp	.+134    	; 0x848 <pwm_state+0xb0>
     7c2:	98 38       	cpi	r25, 0x88	; 136
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <pwm_state+0x30>
     7c6:	48 c0       	rjmp	.+144    	; 0x858 <pwm_state+0xc0>
     7c8:	99 38       	cpi	r25, 0x89	; 137
     7ca:	09 f0       	breq	.+2      	; 0x7ce <pwm_state+0x36>
     7cc:	4d c0       	rjmp	.+154    	; 0x868 <pwm_state+0xd0>
     7ce:	48 c0       	rjmp	.+144    	; 0x860 <pwm_state+0xc8>
		case LOOK_FOR_START:
			if (next_code == 'A') pwm_change_state(SAW_A);
     7d0:	81 34       	cpi	r24, 0x41	; 65
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <pwm_state+0x3e>
     7d4:	4c c0       	rjmp	.+152    	; 0x86e <pwm_state+0xd6>
     7d6:	83 e8       	ldi	r24, 0x83	; 131
     7d8:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     7dc:	08 95       	ret
			break;
		case SAW_A:
			switch (next_code){
     7de:	82 34       	cpi	r24, 0x42	; 66
     7e0:	29 f0       	breq	.+10     	; 0x7ec <pwm_state+0x54>
     7e2:	83 34       	cpi	r24, 0x43	; 67
     7e4:	39 f0       	breq	.+14     	; 0x7f4 <pwm_state+0x5c>
     7e6:	81 34       	cpi	r24, 0x41	; 65
     7e8:	49 f4       	brne	.+18     	; 0x7fc <pwm_state+0x64>
     7ea:	08 95       	ret
				case 'A':
				break;
				case 'B':
				pwm_change_state(SAW_AB); break;
     7ec:	84 e8       	ldi	r24, 0x84	; 132
     7ee:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     7f2:	08 95       	ret
				case 'C':
				pwm_change_state(SAW_AC); break;
     7f4:	85 e8       	ldi	r24, 0x85	; 133
     7f6:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     7fa:	08 95       	ret
				default:
				pwm_change_state(LOOK_FOR_START);
     7fc:	82 e8       	ldi	r24, 0x82	; 130
     7fe:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     802:	08 95       	ret
			}		
			break;	
		case SAW_AB:
			switch (next_code){
     804:	82 34       	cpi	r24, 0x42	; 66
     806:	19 f0       	breq	.+6      	; 0x80e <pwm_state+0x76>
     808:	83 34       	cpi	r24, 0x43	; 67
     80a:	49 f4       	brne	.+18     	; 0x81e <pwm_state+0x86>
     80c:	04 c0       	rjmp	.+8      	; 0x816 <pwm_state+0x7e>
				case 'B':
					pwm_change_state(SAW_ABB); break;
     80e:	86 e8       	ldi	r24, 0x86	; 134
     810:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     814:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ABC); break;
     816:	87 e8       	ldi	r24, 0x87	; 135
     818:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     81c:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     81e:	82 e8       	ldi	r24, 0x82	; 130
     820:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     824:	08 95       	ret
			}
			break;
		case SAW_AC:
			switch (next_code){
     826:	82 34       	cpi	r24, 0x42	; 66
     828:	19 f0       	breq	.+6      	; 0x830 <pwm_state+0x98>
     82a:	83 34       	cpi	r24, 0x43	; 67
     82c:	49 f4       	brne	.+18     	; 0x840 <pwm_state+0xa8>
     82e:	04 c0       	rjmp	.+8      	; 0x838 <pwm_state+0xa0>
				case 'B':
					pwm_change_state(SAW_ACB); break;
     830:	88 e8       	ldi	r24, 0x88	; 136
     832:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     836:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ACC); break;
     838:	89 e8       	ldi	r24, 0x89	; 137
     83a:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     83e:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     840:	82 e8       	ldi	r24, 0x82	; 130
     842:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_change_state>
     846:	08 95       	ret
			}
			break;
		case SAW_ABB:
			if (STATE_Pwm_Decode == 'D') pwm_out_high();
			STATE_Pwm_Decode = LOOK_FOR_START;				
     848:	82 e8       	ldi	r24, 0x82	; 130
     84a:	80 93 0f 20 	sts	0x200F, r24
			break;
     84e:	08 95       	ret
		case SAW_ABC:
			if (STATE_Pwm_Decode == 'D') pwm_out_low();
			STATE_Pwm_Decode = LOOK_FOR_START;
     850:	82 e8       	ldi	r24, 0x82	; 130
     852:	80 93 0f 20 	sts	0x200F, r24
			break;		
     856:	08 95       	ret
		case SAW_ACB:
			if (STATE_Pwm_Decode == 'D') pwm_pulse();
			STATE_Pwm_Decode = LOOK_FOR_START;
     858:	82 e8       	ldi	r24, 0x82	; 130
     85a:	80 93 0f 20 	sts	0x200F, r24
			break;
     85e:	08 95       	ret
		case SAW_ACC:
			if (STATE_Pwm_Decode == 'D') pwm_reserved();
			STATE_Pwm_Decode = LOOK_FOR_START;
     860:	82 e8       	ldi	r24, 0x82	; 130
     862:	80 93 0f 20 	sts	0x200F, r24
			break;
     866:	08 95       	ret
		default:
			STATE_Pwm_Decode = LOOK_FOR_START;
     868:	82 e8       	ldi	r24, 0x82	; 130
     86a:	80 93 0f 20 	sts	0x200F, r24
     86e:	08 95       	ret

00000870 <pwm_decode>:
//Converts Pulse Width's into State Machine Changes
	//0x2000 = As.wav
	//0x4000 = Bs.wav
	//0x7000 = Cs.wav
	//0x9000 = Ds.wav
void pwm_decode(uint16_t width){
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
	
	uart_send_byte(&udata,'-');
     876:	80 eb       	ldi	r24, 0xB0	; 176
     878:	99 e0       	ldi	r25, 0x09	; 9
     87a:	6d e2       	ldi	r22, 0x2D	; 45
     87c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	uart_send_byte(&udata,'-');
     880:	80 eb       	ldi	r24, 0xB0	; 176
     882:	99 e0       	ldi	r25, 0x09	; 9
     884:	6d e2       	ldi	r22, 0x2D	; 45
     886:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	uart_send_byte(&udata,'-');
     88a:	80 eb       	ldi	r24, 0xB0	; 176
     88c:	99 e0       	ldi	r25, 0x09	; 9
     88e:	6d e2       	ldi	r22, 0x2D	; 45
     890:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	uart_send_HEX16(&udata, width);
     894:	80 eb       	ldi	r24, 0xB0	; 176
     896:	99 e0       	ldi	r25, 0x09	; 9
     898:	be 01       	movw	r22, r28
     89a:	0e 94 33 08 	call	0x1066	; 0x1066 <uart_send_HEX16>
	uart_send_byte(&udata,'-');
     89e:	80 eb       	ldi	r24, 0xB0	; 176
     8a0:	99 e0       	ldi	r25, 0x09	; 9
     8a2:	6d e2       	ldi	r22, 0x2D	; 45
     8a4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	uart_send_byte(&udata, 13);
     8a8:	80 eb       	ldi	r24, 0xB0	; 176
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	6d e0       	ldi	r22, 0x0D	; 13
     8ae:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	
	if (between(width,0x1000,0x2000) == true){
     8b2:	ce 01       	movw	r24, r28
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e1       	ldi	r23, 0x10	; 16
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e2       	ldi	r21, 0x20	; 32
     8bc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <between>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	19 f4       	brne	.+6      	; 0x8ca <pwm_decode+0x5a>
		//Found A code!
		pwm_state('A');		
     8c4:	81 e4       	ldi	r24, 0x41	; 65
     8c6:	0e 94 cc 03 	call	0x798	; 0x798 <pwm_state>
	}
	if (between(width,0x2000,0x3000) == true){
     8ca:	ce 01       	movw	r24, r28
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e2       	ldi	r23, 0x20	; 32
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e3       	ldi	r21, 0x30	; 48
     8d4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <between>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	19 f4       	brne	.+6      	; 0x8e2 <pwm_decode+0x72>
		//Found B code!
		pwm_state('B');
     8dc:	82 e4       	ldi	r24, 0x42	; 66
     8de:	0e 94 cc 03 	call	0x798	; 0x798 <pwm_state>
	}
	if (between(width,0x4000,0x5000) == true){
     8e2:	ce 01       	movw	r24, r28
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e4       	ldi	r23, 0x40	; 64
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e5       	ldi	r21, 0x50	; 80
     8ec:	0e 94 58 03 	call	0x6b0	; 0x6b0 <between>
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	19 f4       	brne	.+6      	; 0x8fa <pwm_decode+0x8a>
		//Found C code!
		pwm_state('C');
     8f4:	83 e4       	ldi	r24, 0x43	; 67
     8f6:	0e 94 cc 03 	call	0x798	; 0x798 <pwm_state>
	}
	if (between(width,0x7000,0x8000) == true){
     8fa:	ce 01       	movw	r24, r28
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e7       	ldi	r23, 0x70	; 112
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e8       	ldi	r21, 0x80	; 128
     904:	0e 94 58 03 	call	0x6b0	; 0x6b0 <between>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	19 f4       	brne	.+6      	; 0x912 <pwm_decode+0xa2>
		//Found D code!
		pwm_state('D');
     90c:	84 e4       	ldi	r24, 0x44	; 68
     90e:	0e 94 cc 03 	call	0x798	; 0x798 <pwm_state>
	}
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <edge_stop>:

void inline edge_start(){
	pwm_timer_reset();
}

void inline edge_stop(){
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
	uint16_t width;
	width = TCE0.CNT;
     91c:	e0 e0       	ldi	r30, 0x00	; 0
     91e:	fa e0       	ldi	r31, 0x0A	; 10
     920:	c0 a1       	lds	r28, 0x40
     922:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     924:	84 85       	ldd	r24, Z+12	; 0x0c
     926:	80 fd       	sbrc	r24, 0
     928:	12 c0       	rjmp	.+36     	; 0x94e <edge_stop+0x36>
		uart_enqueue(13);
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue(10);
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     936:	8d e2       	ldi	r24, 0x2D	; 45
     938:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     93c:	8d e2       	ldi	r24, 0x2D	; 45
     93e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enq_HEX16(width);
     942:	ce 01       	movw	r24, r28
     944:	0e 94 cd 09 	call	0x139a	; 0x139a <uart_enq_HEX16>
		pwm_decode(width);
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 38 04 	call	0x870	; 0x870 <pwm_decode>
	}
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <__vector_68>:
boolean pwm_mode(){
	return sw_on(SW1);
}

//ANALOG COMPARATOR (AC0) OUTPUT TOGGLE INTERRUPT
SIGNAL(ACA_AC0_vect){
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
     97a:	e0 e8       	ldi	r30, 0x80	; 128
     97c:	f3 e0       	ldi	r31, 0x03	; 3
     97e:	87 81       	ldd	r24, Z+7	; 0x07
     980:	84 ff       	sbrs	r24, 4
     982:	28 c0       	rjmp	.+80     	; 0x9d4 <__vector_68+0x80>
		led_on(LED_MID);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <led_on>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
     98a:	80 91 10 20 	lds	r24, 0x2010
     98e:	87 35       	cpi	r24, 0x57	; 87
     990:	11 f4       	brne	.+4      	; 0x996 <__vector_68+0x42>
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     992:	0e 94 4e 03 	call	0x69c	; 0x69c <pwm_timer_reset>
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
		led_on(LED_MID);
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
     996:	80 91 10 20 	lds	r24, 0x2010
     99a:	88 35       	cpi	r24, 0x58	; 88
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__vector_68+0x4c>
     99e:	40 c0       	rjmp	.+128    	; 0xa20 <__vector_68+0xcc>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     9a0:	e0 e0       	ldi	r30, 0x00	; 0
     9a2:	fa e0       	ldi	r31, 0x0A	; 10
     9a4:	c0 a1       	lds	r28, 0x40
     9a6:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     9a8:	84 85       	ldd	r24, Z+12	; 0x0c
     9aa:	80 fd       	sbrc	r24, 0
     9ac:	39 c0       	rjmp	.+114    	; 0xa20 <__vector_68+0xcc>
		uart_enqueue(13);
     9ae:	8d e0       	ldi	r24, 0x0D	; 13
     9b0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue(10);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     9ba:	8d e2       	ldi	r24, 0x2D	; 45
     9bc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enq_HEX16(width);
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 cd 09 	call	0x139a	; 0x139a <uart_enq_HEX16>
		pwm_decode(width);
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 38 04 	call	0x870	; 0x870 <pwm_decode>
     9d2:	26 c0       	rjmp	.+76     	; 0xa20 <__vector_68+0xcc>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
	}
	else {
		led_off(LED_MID);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <led_off>
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
     9da:	80 91 10 20 	lds	r24, 0x2010
     9de:	87 35       	cpi	r24, 0x57	; 87
     9e0:	c9 f4       	brne	.+50     	; 0xa14 <__vector_68+0xc0>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     9e2:	e0 e0       	ldi	r30, 0x00	; 0
     9e4:	fa e0       	ldi	r31, 0x0A	; 10
     9e6:	c0 a1       	lds	r28, 0x40
     9e8:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     9ea:	84 85       	ldd	r24, Z+12	; 0x0c
     9ec:	80 fd       	sbrc	r24, 0
     9ee:	12 c0       	rjmp	.+36     	; 0xa14 <__vector_68+0xc0>
		uart_enqueue(13);
     9f0:	8d e0       	ldi	r24, 0x0D	; 13
     9f2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue(10);
     9f6:	8a e0       	ldi	r24, 0x0A	; 10
     9f8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     9fc:	8d e2       	ldi	r24, 0x2D	; 45
     9fe:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('-');
     a02:	8d e2       	ldi	r24, 0x2D	; 45
     a04:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enq_HEX16(width);
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 cd 09 	call	0x139a	; 0x139a <uart_enq_HEX16>
		pwm_decode(width);
     a0e:	ce 01       	movw	r24, r28
     a10:	0e 94 38 04 	call	0x870	; 0x870 <pwm_decode>
	}
	else {
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
     a14:	80 91 10 20 	lds	r24, 0x2010
     a18:	88 35       	cpi	r24, 0x58	; 88
     a1a:	11 f4       	brne	.+4      	; 0xa20 <__vector_68+0xcc>
	}
}

void inline edge_start(){
	pwm_timer_reset();
     a1c:	0e 94 4e 03 	call	0x69c	; 0x69c <pwm_timer_reset>
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	bf 91       	pop	r27
     a2a:	af 91       	pop	r26
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	7f 91       	pop	r23
     a32:	6f 91       	pop	r22
     a34:	5f 91       	pop	r21
     a36:	4f 91       	pop	r20
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <service_pwm>:
//Mainline Loop PWM Service Routine -- use to manage output pulse
//...and trigger states
//---must run only once per 2ms looptime
void service_pwm(void){
	//Process Decoding Timeout
	if (STATE_Pwm_Timeout > 0) STATE_Pwm_Timeout--;
     a46:	80 91 0e 20 	lds	r24, 0x200E
     a4a:	88 23       	and	r24, r24
     a4c:	29 f0       	breq	.+10     	; 0xa58 <service_pwm+0x12>
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	80 93 0e 20 	sts	0x200E, r24
	if (STATE_Pwm_Timeout == 0) STATE_Pwm_Decode = LOOK_FOR_START;
     a54:	88 23       	and	r24, r24
     a56:	19 f4       	brne	.+6      	; 0xa5e <service_pwm+0x18>
     a58:	82 e8       	ldi	r24, 0x82	; 130
     a5a:	80 93 0f 20 	sts	0x200F, r24
	
	//Process component pulse durations
	switch(STATE_Pwm){
     a5e:	80 91 11 20 	lds	r24, 0x2011
     a62:	8f 34       	cpi	r24, 0x4F	; 79
     a64:	19 f0       	breq	.+6      	; 0xa6c <service_pwm+0x26>
     a66:	80 35       	cpi	r24, 0x50	; 80
     a68:	d1 f4       	brne	.+52     	; 0xa9e <service_pwm+0x58>
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <service_pwm+0x30>
	case PWM_OUTPUT_HIGH:
		PORTA.OUTSET = B8(10000000); //PA7 output high
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f6 e0       	ldi	r31, 0x06	; 6
     a72:	85 83       	std	Z+5, r24	; 0x05
		break;
     a74:	08 95       	ret
	case PWM_OUTPUT_PULSE:
		if (STATE_Pwm_Counter == 0)	{
     a76:	80 91 13 20 	lds	r24, 0x2013
     a7a:	88 23       	and	r24, r24
     a7c:	41 f4       	brne	.+16     	; 0xa8e <service_pwm+0x48>
			//Done with pulse!
			PORTA.OUTCLR = B8(10000000); //PA7 output low
     a7e:	80 e8       	ldi	r24, 0x80	; 128
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f6 e0       	ldi	r31, 0x06	; 6
     a84:	86 83       	std	Z+6, r24	; 0x06
			STATE_Pwm = PWM_OUTPUT_LOW;	//Update State (Done with pulse)
     a86:	8e e4       	ldi	r24, 0x4E	; 78
     a88:	80 93 11 20 	sts	0x2011, r24
     a8c:	08 95       	ret
		}
		else {
			STATE_Pwm_Counter--; //Decrement Counter
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	80 93 13 20 	sts	0x2013, r24
			PORTA.OUTSET = B8(10000000); //PA7 output high
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f6 e0       	ldi	r31, 0x06	; 6
     a9a:	85 83       	std	Z+5, r24	; 0x05
     a9c:	08 95       	ret
		}
		break;
	case PWM_OUTPUT_LOW:
	default:
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	e0 e0       	ldi	r30, 0x00	; 0
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	86 83       	std	Z+6, r24	; 0x06
     aa6:	08 95       	ret

00000aa8 <pwm_hunt_target>:
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
	uint8_t how_many = uart_icount();
     ac4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <uart_icount>
	uint8_t current_index = uart_itail;
     ac8:	d0 90 21 20 	lds	r13, 0x2021
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
     acc:	8d 30       	cpi	r24, 0x0D	; 13
     ace:	08 f4       	brcc	.+2      	; 0xad2 <pwm_hunt_target+0x2a>
     ad0:	59 c0       	rjmp	.+178    	; 0xb84 <pwm_hunt_target+0xdc>
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f3 ef       	ldi	r31, 0xF3	; 243
     ad8:	6f 2e       	mov	r6, r31
     ada:	ff ef       	ldi	r31, 0xFF	; 255
     adc:	7f 2e       	mov	r7, r31
     ade:	f0 2d       	mov	r31, r0
     ae0:	68 0e       	add	r6, r24
     ae2:	79 1e       	adc	r7, r25
     ae4:	77 20       	and	r7, r7
     ae6:	0c f4       	brge	.+2      	; 0xaea <pwm_hunt_target+0x42>
     ae8:	4d c0       	rjmp	.+154    	; 0xb84 <pwm_hunt_target+0xdc>
     aea:	cc 24       	eor	r12, r12
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     aec:	0f 2e       	mov	r0, r31
     aee:	fc e1       	ldi	r31, 0x1C	; 28
     af0:	8f 2e       	mov	r8, r31
     af2:	f1 e2       	ldi	r31, 0x21	; 33
     af4:	9f 2e       	mov	r9, r31
     af6:	f0 2d       	mov	r31, r0
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     af8:	b8 2c       	mov	r11, r8
     afa:	a9 2c       	mov	r10, r9
     afc:	84 01       	movw	r16, r8
     afe:	03 5f       	subi	r16, 0xF3	; 243
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     b02:	0f 2e       	mov	r0, r31
     b04:	f2 e2       	ldi	r31, 0x22	; 34
     b06:	ef 2e       	mov	r14, r31
     b08:	f0 e2       	ldi	r31, 0x20	; 32
     b0a:	ff 2e       	mov	r15, r31
     b0c:	f0 2d       	mov	r31, r0
inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     b0e:	89 ef       	ldi	r24, 0xF9	; 249
     b10:	8d 15       	cp	r24, r13
     b12:	08 f4       	brcc	.+2      	; 0xb16 <pwm_hunt_target+0x6e>
     b14:	dd 24       	eor	r13, r13
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b16:	2d 2d       	mov	r18, r13
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	2a 5f       	subi	r18, 0xFA	; 250
     b1c:	30 40       	sbci	r19, 0x00	; 0
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     b1e:	d4 01       	movw	r26, r8
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b20:	cb 2d       	mov	r28, r11
     b22:	da 2d       	mov	r29, r10
     b24:	c9 01       	movw	r24, r18
     b26:	86 50       	subi	r24, 0x06	; 6
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
     b2a:	8a 3f       	cpi	r24, 0xFA	; 250
     b2c:	91 05       	cpc	r25, r1
     b2e:	34 f0       	brlt	.+12     	; 0xb3c <pwm_hunt_target+0x94>
     b30:	f7 01       	movw	r30, r14
     b32:	e2 0f       	add	r30, r18
     b34:	f3 1f       	adc	r31, r19
     b36:	80 81       	ld	r24, Z
     b38:	8c 93       	st	X, r24
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <pwm_hunt_target+0x9e>
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     b3c:	8e 0d       	add	r24, r14
     b3e:	9f 1d       	adc	r25, r15
     b40:	fc 01       	movw	r30, r24
     b42:	80 81       	ld	r24, Z
     b44:	8c 93       	st	X, r24
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	11 96       	adiw	r26, 0x01	; 1
//#############################################################
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
     b4c:	a0 17       	cp	r26, r16
     b4e:	b1 07       	cpc	r27, r17
     b50:	49 f7       	brne	.-46     	; 0xb24 <pwm_hunt_target+0x7c>
     b52:	e0 91 26 22 	lds	r30, 0x2226
     b56:	f0 91 27 22 	lds	r31, 0x2227
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
	}	
}

inline uint8_t array_compare(uint8_t* arr1, uint8_t* arr2){
	uint8_t equal = true;
     b5a:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
     b5c:	91 91       	ld	r25, Z+
     b5e:	89 91       	ld	r24, Y+
     b60:	98 13       	cpse	r25, r24
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	c0 17       	cp	r28, r16
     b66:	d1 07       	cpc	r29, r17
     b68:	c9 f7       	brne	.-14     	; 0xb5c <pwm_hunt_target+0xb4>
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
		build_dut(current_index);
		if (array_compare(trigger_target, trigger_compare) == true){
     b6a:	21 30       	cpi	r18, 0x01	; 1
     b6c:	21 f4       	brne	.+8      	; 0xb76 <pwm_hunt_target+0xce>
			pwm_pulse(); //fire off the solenoid
     b6e:	0e 94 8d 03 	call	0x71a	; 0x71a <pwm_pulse>
			init_uart_ibuffer(); //flush buffer to prevent retriggering
     b72:	0e 94 55 0c 	call	0x18aa	; 0x18aa <init_uart_ibuffer>
		}
		current_index++;
     b76:	d3 94       	inc	r13

inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     b78:	c3 94       	inc	r12
     b7a:	8c 2d       	mov	r24, r12
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	68 16       	cp	r6, r24
     b80:	79 06       	cpc	r7, r25
     b82:	2c f6       	brge	.-118    	; 0xb0e <pwm_hunt_target+0x66>
			pwm_pulse(); //fire off the solenoid
			init_uart_ibuffer(); //flush buffer to prevent retriggering
		}
		current_index++;
	}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	9f 90       	pop	r9
     b9a:	8f 90       	pop	r8
     b9c:	7f 90       	pop	r7
     b9e:	6f 90       	pop	r6
     ba0:	08 95       	ret

00000ba2 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
     ba2:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	e0 3a       	cpi	r30, 0xA0	; 160
     ba8:	f8 07       	cpc	r31, r24
     baa:	51 f4       	brne	.+20     	; 0xbc0 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b6 e0       	ldi	r27, 0x06	; 6
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	8c 93       	st	X, r24
     bb6:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
     bb8:	15 96       	adiw	r26, 0x05	; 5
     bba:	8c 93       	st	X, r24
     bbc:	15 97       	sbiw	r26, 0x05	; 5
     bbe:	37 c0       	rjmp	.+110    	; 0xc2e <init_uart+0x8c>
		}
		else if (&(*which) == &USARTC1) {
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	e0 3b       	cpi	r30, 0xB0	; 176
     bc4:	f8 07       	cpc	r31, r24
     bc6:	51 f4       	brne	.+20     	; 0xbdc <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b6 e0       	ldi	r27, 0x06	; 6
     bcc:	80 e8       	ldi	r24, 0x80	; 128
     bce:	11 96       	adiw	r26, 0x01	; 1
     bd0:	8c 93       	st	X, r24
     bd2:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
     bd4:	15 96       	adiw	r26, 0x05	; 5
     bd6:	8c 93       	st	X, r24
     bd8:	15 97       	sbiw	r26, 0x05	; 5
     bda:	29 c0       	rjmp	.+82     	; 0xc2e <init_uart+0x8c>
		}
		else if (&(*which) == &USARTD0) {
     bdc:	89 e0       	ldi	r24, 0x09	; 9
     bde:	e0 3a       	cpi	r30, 0xA0	; 160
     be0:	f8 07       	cpc	r31, r24
     be2:	51 f4       	brne	.+20     	; 0xbf8 <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
     be4:	a0 e6       	ldi	r26, 0x60	; 96
     be6:	b6 e0       	ldi	r27, 0x06	; 6
     be8:	88 e0       	ldi	r24, 0x08	; 8
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	8c 93       	st	X, r24
     bee:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
     bf0:	15 96       	adiw	r26, 0x05	; 5
     bf2:	8c 93       	st	X, r24
     bf4:	15 97       	sbiw	r26, 0x05	; 5
     bf6:	1b c0       	rjmp	.+54     	; 0xc2e <init_uart+0x8c>
		}	
		else if (&(*which) == &USARTD1) {
     bf8:	89 e0       	ldi	r24, 0x09	; 9
     bfa:	e0 3b       	cpi	r30, 0xB0	; 176
     bfc:	f8 07       	cpc	r31, r24
     bfe:	51 f4       	brne	.+20     	; 0xc14 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
     c00:	a0 e6       	ldi	r26, 0x60	; 96
     c02:	b6 e0       	ldi	r27, 0x06	; 6
     c04:	80 e8       	ldi	r24, 0x80	; 128
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	8c 93       	st	X, r24
     c0a:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	8c 93       	st	X, r24
     c10:	15 97       	sbiw	r26, 0x05	; 5
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <init_uart+0x8c>
		}
		else if (&(*which) == &USARTE0) {
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	e0 3a       	cpi	r30, 0xA0	; 160
     c18:	f8 07       	cpc	r31, r24
     c1a:	49 f4       	brne	.+18     	; 0xc2e <init_uart+0x8c>
			PORTE.DIRSET = B8(00001000); //TX pin as output
     c1c:	a0 e8       	ldi	r26, 0x80	; 128
     c1e:	b6 e0       	ldi	r27, 0x06	; 6
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	8c 93       	st	X, r24
     c26:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
     c28:	15 96       	adiw	r26, 0x05	; 5
     c2a:	8c 93       	st	X, r24
     c2c:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
     c2e:	61 30       	cpi	r22, 0x01	; 1
     c30:	39 f0       	breq	.+14     	; 0xc40 <init_uart+0x9e>
     c32:	62 30       	cpi	r22, 0x02	; 2
     c34:	51 f4       	brne	.+20     	; 0xc4a <init_uart+0xa8>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
     c36:	8c ea       	ldi	r24, 0xAC	; 172
     c38:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
     c3a:	85 ec       	ldi	r24, 0xC5	; 197
     c3c:	86 83       	std	Z+6, r24	; 0x06
			break;
     c3e:	09 c0       	rjmp	.+18     	; 0xc52 <init_uart+0xb0>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
     c40:	88 ea       	ldi	r24, 0xA8	; 168
     c42:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
     c44:	8e e6       	ldi	r24, 0x6E	; 110
     c46:	86 83       	std	Z+6, r24	; 0x06
			break;
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <init_uart+0xb0>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA4;
     c4a:	84 ea       	ldi	r24, 0xA4	; 164
     c4c:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x17;		
     c4e:	87 e1       	ldi	r24, 0x17	; 23
     c50:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
     c52:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
     c54:	88 e1       	ldi	r24, 0x18	; 24
     c56:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	85 83       	std	Z+5, r24	; 0x05
	//
}
     c5c:	08 95       	ret

00000c5e <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
     c5e:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	85 ff       	sbrs	r24, 5
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <uart_send_byte+0x2>
	which->DATA = dataB;	
     c66:	60 83       	st	Z, r22
}
     c68:	08 95       	ret

00000c6a <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
     c7c:	e6 2f       	mov	r30, r22
     c7e:	f7 2f       	mov	r31, r23
     c80:	ef 01       	movw	r28, r30
     c82:	09 90       	ld	r0, Y+
     c84:	00 20       	and	r0, r0
     c86:	e9 f7       	brne	.-6      	; 0xc82 <uart_send_string+0x18>
     c88:	21 97       	sbiw	r28, 0x01	; 1
     c8a:	ce 1b       	sub	r28, r30
     c8c:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
     c8e:	79 f0       	breq	.+30     	; 0xcae <uart_send_string+0x44>
     c90:	e6 2e       	mov	r14, r22
     c92:	f7 2e       	mov	r15, r23
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	f7 01       	movw	r30, r14
     c9a:	61 91       	ld	r22, Z+
     c9c:	7f 01       	movw	r14, r30
     c9e:	c6 01       	movw	r24, r12
     ca0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
     ca4:	0f 5f       	subi	r16, 0xFF	; 255
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	0c 17       	cp	r16, r28
     caa:	1d 07       	cpc	r17, r29
     cac:	a9 f7       	brne	.-22     	; 0xc98 <uart_send_string+0x2e>
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
	switch(lowb){
     cc6:	67 30       	cpi	r22, 0x07	; 7
     cc8:	09 f4       	brne	.+2      	; 0xccc <uart_send_BIN4+0xc>
     cca:	9d c0       	rjmp	.+314    	; 0xe06 <uart_send_BIN4+0x146>
     ccc:	68 30       	cpi	r22, 0x08	; 8
     cce:	90 f4       	brcc	.+36     	; 0xcf4 <uart_send_BIN4+0x34>
     cd0:	63 30       	cpi	r22, 0x03	; 3
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <uart_send_BIN4+0x16>
     cd4:	58 c0       	rjmp	.+176    	; 0xd86 <uart_send_BIN4+0xc6>
     cd6:	64 30       	cpi	r22, 0x04	; 4
     cd8:	30 f4       	brcc	.+12     	; 0xce6 <uart_send_BIN4+0x26>
     cda:	61 30       	cpi	r22, 0x01	; 1
     cdc:	a1 f1       	breq	.+104    	; 0xd46 <uart_send_BIN4+0x86>
     cde:	62 30       	cpi	r22, 0x02	; 2
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <uart_send_BIN4+0x24>
     ce2:	41 c0       	rjmp	.+130    	; 0xd66 <uart_send_BIN4+0xa6>
     ce4:	20 c0       	rjmp	.+64     	; 0xd26 <uart_send_BIN4+0x66>
     ce6:	65 30       	cpi	r22, 0x05	; 5
     ce8:	09 f4       	brne	.+2      	; 0xcec <uart_send_BIN4+0x2c>
     cea:	6d c0       	rjmp	.+218    	; 0xdc6 <uart_send_BIN4+0x106>
     cec:	66 30       	cpi	r22, 0x06	; 6
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <uart_send_BIN4+0x32>
     cf0:	7a c0       	rjmp	.+244    	; 0xde6 <uart_send_BIN4+0x126>
     cf2:	59 c0       	rjmp	.+178    	; 0xda6 <uart_send_BIN4+0xe6>
     cf4:	6b 30       	cpi	r22, 0x0B	; 11
     cf6:	09 f4       	brne	.+2      	; 0xcfa <uart_send_BIN4+0x3a>
     cf8:	c6 c0       	rjmp	.+396    	; 0xe86 <uart_send_BIN4+0x1c6>
     cfa:	6c 30       	cpi	r22, 0x0C	; 12
     cfc:	38 f4       	brcc	.+14     	; 0xd0c <uart_send_BIN4+0x4c>
     cfe:	69 30       	cpi	r22, 0x09	; 9
     d00:	09 f4       	brne	.+2      	; 0xd04 <uart_send_BIN4+0x44>
     d02:	a1 c0       	rjmp	.+322    	; 0xe46 <uart_send_BIN4+0x186>
     d04:	6a 30       	cpi	r22, 0x0A	; 10
     d06:	08 f0       	brcs	.+2      	; 0xd0a <uart_send_BIN4+0x4a>
     d08:	ae c0       	rjmp	.+348    	; 0xe66 <uart_send_BIN4+0x1a6>
     d0a:	8d c0       	rjmp	.+282    	; 0xe26 <uart_send_BIN4+0x166>
     d0c:	6d 30       	cpi	r22, 0x0D	; 13
     d0e:	09 f4       	brne	.+2      	; 0xd12 <uart_send_BIN4+0x52>
     d10:	da c0       	rjmp	.+436    	; 0xec6 <uart_send_BIN4+0x206>
     d12:	6d 30       	cpi	r22, 0x0D	; 13
     d14:	08 f4       	brcc	.+2      	; 0xd18 <uart_send_BIN4+0x58>
     d16:	c7 c0       	rjmp	.+398    	; 0xea6 <uart_send_BIN4+0x1e6>
     d18:	6e 30       	cpi	r22, 0x0E	; 14
     d1a:	09 f4       	brne	.+2      	; 0xd1e <uart_send_BIN4+0x5e>
     d1c:	e4 c0       	rjmp	.+456    	; 0xee6 <uart_send_BIN4+0x226>
     d1e:	6f 30       	cpi	r22, 0x0F	; 15
     d20:	09 f0       	breq	.+2      	; 0xd24 <uart_send_BIN4+0x64>
     d22:	00 c1       	rjmp	.+512    	; 0xf24 <uart_send_BIN4+0x264>
     d24:	f0 c0       	rjmp	.+480    	; 0xf06 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
     d26:	60 e3       	ldi	r22, 0x30	; 48
     d28:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d2c:	ce 01       	movw	r24, r28
     d2e:	60 e3       	ldi	r22, 0x30	; 48
     d30:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d34:	ce 01       	movw	r24, r28
     d36:	60 e3       	ldi	r22, 0x30	; 48
     d38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d3c:	ce 01       	movw	r24, r28
     d3e:	60 e3       	ldi	r22, 0x30	; 48
     d40:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     d44:	ef c0       	rjmp	.+478    	; 0xf24 <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
     d46:	60 e3       	ldi	r22, 0x30	; 48
     d48:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d4c:	ce 01       	movw	r24, r28
     d4e:	60 e3       	ldi	r22, 0x30	; 48
     d50:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d54:	ce 01       	movw	r24, r28
     d56:	60 e3       	ldi	r22, 0x30	; 48
     d58:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     d5c:	ce 01       	movw	r24, r28
     d5e:	61 e3       	ldi	r22, 0x31	; 49
     d60:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     d64:	df c0       	rjmp	.+446    	; 0xf24 <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
     d66:	60 e3       	ldi	r22, 0x30	; 48
     d68:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d6c:	ce 01       	movw	r24, r28
     d6e:	60 e3       	ldi	r22, 0x30	; 48
     d70:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     d74:	ce 01       	movw	r24, r28
     d76:	61 e3       	ldi	r22, 0x31	; 49
     d78:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d7c:	ce 01       	movw	r24, r28
     d7e:	60 e3       	ldi	r22, 0x30	; 48
     d80:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     d84:	cf c0       	rjmp	.+414    	; 0xf24 <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
     d86:	60 e3       	ldi	r22, 0x30	; 48
     d88:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     d8c:	ce 01       	movw	r24, r28
     d8e:	60 e3       	ldi	r22, 0x30	; 48
     d90:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     d94:	ce 01       	movw	r24, r28
     d96:	61 e3       	ldi	r22, 0x31	; 49
     d98:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     d9c:	ce 01       	movw	r24, r28
     d9e:	61 e3       	ldi	r22, 0x31	; 49
     da0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     da4:	bf c0       	rjmp	.+382    	; 0xf24 <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
     da6:	60 e3       	ldi	r22, 0x30	; 48
     da8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     dac:	ce 01       	movw	r24, r28
     dae:	61 e3       	ldi	r22, 0x31	; 49
     db0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     db4:	ce 01       	movw	r24, r28
     db6:	60 e3       	ldi	r22, 0x30	; 48
     db8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     dbc:	ce 01       	movw	r24, r28
     dbe:	60 e3       	ldi	r22, 0x30	; 48
     dc0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     dc4:	af c0       	rjmp	.+350    	; 0xf24 <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
     dc6:	60 e3       	ldi	r22, 0x30	; 48
     dc8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     dcc:	ce 01       	movw	r24, r28
     dce:	61 e3       	ldi	r22, 0x31	; 49
     dd0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     dd4:	ce 01       	movw	r24, r28
     dd6:	60 e3       	ldi	r22, 0x30	; 48
     dd8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     ddc:	ce 01       	movw	r24, r28
     dde:	61 e3       	ldi	r22, 0x31	; 49
     de0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     de4:	9f c0       	rjmp	.+318    	; 0xf24 <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
     de6:	60 e3       	ldi	r22, 0x30	; 48
     de8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     dec:	ce 01       	movw	r24, r28
     dee:	61 e3       	ldi	r22, 0x31	; 49
     df0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     df4:	ce 01       	movw	r24, r28
     df6:	61 e3       	ldi	r22, 0x31	; 49
     df8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     dfc:	ce 01       	movw	r24, r28
     dfe:	60 e3       	ldi	r22, 0x30	; 48
     e00:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     e04:	8f c0       	rjmp	.+286    	; 0xf24 <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
     e06:	60 e3       	ldi	r22, 0x30	; 48
     e08:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e0c:	ce 01       	movw	r24, r28
     e0e:	61 e3       	ldi	r22, 0x31	; 49
     e10:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e14:	ce 01       	movw	r24, r28
     e16:	61 e3       	ldi	r22, 0x31	; 49
     e18:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e1c:	ce 01       	movw	r24, r28
     e1e:	61 e3       	ldi	r22, 0x31	; 49
     e20:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     e24:	7f c0       	rjmp	.+254    	; 0xf24 <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
     e26:	61 e3       	ldi	r22, 0x31	; 49
     e28:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e2c:	ce 01       	movw	r24, r28
     e2e:	60 e3       	ldi	r22, 0x30	; 48
     e30:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e34:	ce 01       	movw	r24, r28
     e36:	60 e3       	ldi	r22, 0x30	; 48
     e38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e3c:	ce 01       	movw	r24, r28
     e3e:	60 e3       	ldi	r22, 0x30	; 48
     e40:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     e44:	6f c0       	rjmp	.+222    	; 0xf24 <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
     e46:	61 e3       	ldi	r22, 0x31	; 49
     e48:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e4c:	ce 01       	movw	r24, r28
     e4e:	60 e3       	ldi	r22, 0x30	; 48
     e50:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e54:	ce 01       	movw	r24, r28
     e56:	60 e3       	ldi	r22, 0x30	; 48
     e58:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e5c:	ce 01       	movw	r24, r28
     e5e:	61 e3       	ldi	r22, 0x31	; 49
     e60:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     e64:	5f c0       	rjmp	.+190    	; 0xf24 <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
     e66:	61 e3       	ldi	r22, 0x31	; 49
     e68:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e6c:	ce 01       	movw	r24, r28
     e6e:	60 e3       	ldi	r22, 0x30	; 48
     e70:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e74:	ce 01       	movw	r24, r28
     e76:	61 e3       	ldi	r22, 0x31	; 49
     e78:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e7c:	ce 01       	movw	r24, r28
     e7e:	60 e3       	ldi	r22, 0x30	; 48
     e80:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     e84:	4f c0       	rjmp	.+158    	; 0xf24 <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
     e86:	61 e3       	ldi	r22, 0x31	; 49
     e88:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     e8c:	ce 01       	movw	r24, r28
     e8e:	60 e3       	ldi	r22, 0x30	; 48
     e90:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e94:	ce 01       	movw	r24, r28
     e96:	61 e3       	ldi	r22, 0x31	; 49
     e98:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     e9c:	ce 01       	movw	r24, r28
     e9e:	61 e3       	ldi	r22, 0x31	; 49
     ea0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
     ea6:	61 e3       	ldi	r22, 0x31	; 49
     ea8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     eac:	ce 01       	movw	r24, r28
     eae:	61 e3       	ldi	r22, 0x31	; 49
     eb0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     eb4:	ce 01       	movw	r24, r28
     eb6:	60 e3       	ldi	r22, 0x30	; 48
     eb8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     ebc:	ce 01       	movw	r24, r28
     ebe:	60 e3       	ldi	r22, 0x30	; 48
     ec0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     ec4:	2f c0       	rjmp	.+94     	; 0xf24 <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
     ec6:	61 e3       	ldi	r22, 0x31	; 49
     ec8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     ecc:	ce 01       	movw	r24, r28
     ece:	61 e3       	ldi	r22, 0x31	; 49
     ed0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     ed4:	ce 01       	movw	r24, r28
     ed6:	60 e3       	ldi	r22, 0x30	; 48
     ed8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     edc:	ce 01       	movw	r24, r28
     ede:	61 e3       	ldi	r22, 0x31	; 49
     ee0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     ee4:	1f c0       	rjmp	.+62     	; 0xf24 <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
     ee6:	61 e3       	ldi	r22, 0x31	; 49
     ee8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     eec:	ce 01       	movw	r24, r28
     eee:	61 e3       	ldi	r22, 0x31	; 49
     ef0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     ef4:	ce 01       	movw	r24, r28
     ef6:	61 e3       	ldi	r22, 0x31	; 49
     ef8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'0');
     efc:	ce 01       	movw	r24, r28
     efe:	60 e3       	ldi	r22, 0x30	; 48
     f00:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
     f06:	61 e3       	ldi	r22, 0x31	; 49
     f08:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     f0c:	ce 01       	movw	r24, r28
     f0e:	61 e3       	ldi	r22, 0x31	; 49
     f10:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     f14:	ce 01       	movw	r24, r28
     f16:	61 e3       	ldi	r22, 0x31	; 49
     f18:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		uart_send_byte(which,'1');
     f1c:	ce 01       	movw	r24, r28
     f1e:	61 e3       	ldi	r22, 0x31	; 49
     f20:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
	}	
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	ec 01       	movw	r28, r24
     f32:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
     f34:	62 e6       	ldi	r22, 0x62	; 98
     f36:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
     f3a:	61 2f       	mov	r22, r17
     f3c:	62 95       	swap	r22
     f3e:	6f 70       	andi	r22, 0x0F	; 15
     f40:	ce 01       	movw	r24, r28
     f42:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
     f46:	61 2f       	mov	r22, r17
     f48:	6f 70       	andi	r22, 0x0F	; 15
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uart_send_BIN4>
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	08 95       	ret

00000f58 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
     f58:	67 30       	cpi	r22, 0x07	; 7
     f5a:	09 f4       	brne	.+2      	; 0xf5e <uart_send_HEX4+0x6>
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <uart_send_HEX4+0x84>
     f5e:	68 30       	cpi	r22, 0x08	; 8
     f60:	70 f4       	brcc	.+28     	; 0xf7e <uart_send_HEX4+0x26>
     f62:	63 30       	cpi	r22, 0x03	; 3
     f64:	59 f1       	breq	.+86     	; 0xfbc <uart_send_HEX4+0x64>
     f66:	64 30       	cpi	r22, 0x04	; 4
     f68:	28 f4       	brcc	.+10     	; 0xf74 <uart_send_HEX4+0x1c>
     f6a:	61 30       	cpi	r22, 0x01	; 1
     f6c:	f9 f0       	breq	.+62     	; 0xfac <uart_send_HEX4+0x54>
     f6e:	62 30       	cpi	r22, 0x02	; 2
     f70:	08 f5       	brcc	.+66     	; 0xfb4 <uart_send_HEX4+0x5c>
     f72:	18 c0       	rjmp	.+48     	; 0xfa4 <uart_send_HEX4+0x4c>
     f74:	65 30       	cpi	r22, 0x05	; 5
     f76:	51 f1       	breq	.+84     	; 0xfcc <uart_send_HEX4+0x74>
     f78:	66 30       	cpi	r22, 0x06	; 6
     f7a:	60 f5       	brcc	.+88     	; 0xfd4 <uart_send_HEX4+0x7c>
     f7c:	23 c0       	rjmp	.+70     	; 0xfc4 <uart_send_HEX4+0x6c>
     f7e:	6b 30       	cpi	r22, 0x0B	; 11
     f80:	e9 f1       	breq	.+122    	; 0xffc <uart_send_HEX4+0xa4>
     f82:	6c 30       	cpi	r22, 0x0C	; 12
     f84:	28 f4       	brcc	.+10     	; 0xf90 <uart_send_HEX4+0x38>
     f86:	69 30       	cpi	r22, 0x09	; 9
     f88:	89 f1       	breq	.+98     	; 0xfec <uart_send_HEX4+0x94>
     f8a:	6a 30       	cpi	r22, 0x0A	; 10
     f8c:	98 f5       	brcc	.+102    	; 0xff4 <uart_send_HEX4+0x9c>
     f8e:	2a c0       	rjmp	.+84     	; 0xfe4 <uart_send_HEX4+0x8c>
     f90:	6d 30       	cpi	r22, 0x0D	; 13
     f92:	e1 f1       	breq	.+120    	; 0x100c <uart_send_HEX4+0xb4>
     f94:	6d 30       	cpi	r22, 0x0D	; 13
     f96:	b0 f1       	brcs	.+108    	; 0x1004 <uart_send_HEX4+0xac>
     f98:	6e 30       	cpi	r22, 0x0E	; 14
     f9a:	e1 f1       	breq	.+120    	; 0x1014 <uart_send_HEX4+0xbc>
     f9c:	6f 30       	cpi	r22, 0x0F	; 15
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <uart_send_HEX4+0x4a>
     fa0:	40 c0       	rjmp	.+128    	; 0x1022 <uart_send_HEX4+0xca>
     fa2:	3c c0       	rjmp	.+120    	; 0x101c <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
     fa4:	60 e3       	ldi	r22, 0x30	; 48
     fa6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     faa:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
     fac:	61 e3       	ldi	r22, 0x31	; 49
     fae:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fb2:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
     fb4:	62 e3       	ldi	r22, 0x32	; 50
     fb6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fba:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
     fbc:	63 e3       	ldi	r22, 0x33	; 51
     fbe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fc2:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
     fc4:	64 e3       	ldi	r22, 0x34	; 52
     fc6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fca:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
     fcc:	65 e3       	ldi	r22, 0x35	; 53
     fce:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fd2:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
     fd4:	66 e3       	ldi	r22, 0x36	; 54
     fd6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fda:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
     fdc:	67 e3       	ldi	r22, 0x37	; 55
     fde:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fe2:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
     fe4:	68 e3       	ldi	r22, 0x38	; 56
     fe6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     fea:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
     fec:	69 e3       	ldi	r22, 0x39	; 57
     fee:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     ff2:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
     ff4:	61 e4       	ldi	r22, 0x41	; 65
     ff6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
     ffa:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
     ffc:	62 e4       	ldi	r22, 0x42	; 66
     ffe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
    1002:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    1004:	63 e4       	ldi	r22, 0x43	; 67
    1006:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
    100a:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    100c:	64 e4       	ldi	r22, 0x44	; 68
    100e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
    1012:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    1014:	65 e4       	ldi	r22, 0x45	; 69
    1016:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
		break;
    101a:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    101c:	66 e4       	ldi	r22, 0x46	; 70
    101e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <uart_send_byte>
    1022:	08 95       	ret

00001024 <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    102e:	62 95       	swap	r22
    1030:	6f 70       	andi	r22, 0x0F	; 15
    1032:	0e 94 ac 07 	call	0xf58	; 0xf58 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    1036:	61 2f       	mov	r22, r17
    1038:	6f 70       	andi	r22, 0x0F	; 15
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 ac 07 	call	0xf58	; 0xf58 <uart_send_HEX4>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	08 95       	ret

00001048 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    1052:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    1056:	ce 01       	movw	r24, r28
    1058:	61 2f       	mov	r22, r17
    105a:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX8>
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	08 95       	ret

00001066 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	ec 01       	movw	r28, r24
    106e:	16 2f       	mov	r17, r22
    1070:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    1072:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    1076:	ce 01       	movw	r24, r28
    1078:	61 2f       	mov	r22, r17
    107a:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX8>
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	08 95       	ret

00001086 <uart_enq_BIN4>:
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(uint8_t lowb){
	switch(lowb){
    1086:	87 30       	cpi	r24, 0x07	; 7
    1088:	09 f4       	brne	.+2      	; 0x108c <uart_enq_BIN4+0x6>
    108a:	87 c0       	rjmp	.+270    	; 0x119a <uart_enq_BIN4+0x114>
    108c:	88 30       	cpi	r24, 0x08	; 8
    108e:	88 f4       	brcc	.+34     	; 0x10b2 <uart_enq_BIN4+0x2c>
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	09 f4       	brne	.+2      	; 0x1096 <uart_enq_BIN4+0x10>
    1094:	4e c0       	rjmp	.+156    	; 0x1132 <uart_enq_BIN4+0xac>
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	28 f4       	brcc	.+10     	; 0x10a4 <uart_enq_BIN4+0x1e>
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	81 f1       	breq	.+96     	; 0x10fe <uart_enq_BIN4+0x78>
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	d8 f5       	brcc	.+118    	; 0x1118 <uart_enq_BIN4+0x92>
    10a2:	20 c0       	rjmp	.+64     	; 0x10e4 <uart_enq_BIN4+0x5e>
    10a4:	85 30       	cpi	r24, 0x05	; 5
    10a6:	09 f4       	brne	.+2      	; 0x10aa <uart_enq_BIN4+0x24>
    10a8:	5e c0       	rjmp	.+188    	; 0x1166 <uart_enq_BIN4+0xe0>
    10aa:	86 30       	cpi	r24, 0x06	; 6
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <uart_enq_BIN4+0x2a>
    10ae:	68 c0       	rjmp	.+208    	; 0x1180 <uart_enq_BIN4+0xfa>
    10b0:	4d c0       	rjmp	.+154    	; 0x114c <uart_enq_BIN4+0xc6>
    10b2:	8b 30       	cpi	r24, 0x0B	; 11
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <uart_enq_BIN4+0x32>
    10b6:	a5 c0       	rjmp	.+330    	; 0x1202 <uart_enq_BIN4+0x17c>
    10b8:	8c 30       	cpi	r24, 0x0C	; 12
    10ba:	38 f4       	brcc	.+14     	; 0x10ca <uart_enq_BIN4+0x44>
    10bc:	89 30       	cpi	r24, 0x09	; 9
    10be:	09 f4       	brne	.+2      	; 0x10c2 <uart_enq_BIN4+0x3c>
    10c0:	86 c0       	rjmp	.+268    	; 0x11ce <uart_enq_BIN4+0x148>
    10c2:	8a 30       	cpi	r24, 0x0A	; 10
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <uart_enq_BIN4+0x42>
    10c6:	90 c0       	rjmp	.+288    	; 0x11e8 <uart_enq_BIN4+0x162>
    10c8:	75 c0       	rjmp	.+234    	; 0x11b4 <uart_enq_BIN4+0x12e>
    10ca:	8d 30       	cpi	r24, 0x0D	; 13
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <uart_enq_BIN4+0x4a>
    10ce:	b3 c0       	rjmp	.+358    	; 0x1236 <uart_enq_BIN4+0x1b0>
    10d0:	8d 30       	cpi	r24, 0x0D	; 13
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <uart_enq_BIN4+0x50>
    10d4:	a3 c0       	rjmp	.+326    	; 0x121c <uart_enq_BIN4+0x196>
    10d6:	8e 30       	cpi	r24, 0x0E	; 14
    10d8:	09 f4       	brne	.+2      	; 0x10dc <uart_enq_BIN4+0x56>
    10da:	ba c0       	rjmp	.+372    	; 0x1250 <uart_enq_BIN4+0x1ca>
    10dc:	8f 30       	cpi	r24, 0x0F	; 15
    10de:	09 f0       	breq	.+2      	; 0x10e2 <uart_enq_BIN4+0x5c>
    10e0:	d0 c0       	rjmp	.+416    	; 0x1282 <uart_enq_BIN4+0x1fc>
    10e2:	c3 c0       	rjmp	.+390    	; 0x126a <uart_enq_BIN4+0x1e4>
	case(0):
		uart_enqueue('0');
    10e4:	80 e3       	ldi	r24, 0x30	; 48
    10e6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    10ea:	80 e3       	ldi	r24, 0x30	; 48
    10ec:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    10f0:	80 e3       	ldi	r24, 0x30	; 48
    10f2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    10fc:	08 95       	ret
	case(1):
		uart_enqueue('0');
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1104:	80 e3       	ldi	r24, 0x30	; 48
    1106:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    110a:	80 e3       	ldi	r24, 0x30	; 48
    110c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1110:	81 e3       	ldi	r24, 0x31	; 49
    1112:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1116:	08 95       	ret
	case(2):
		uart_enqueue('0');
    1118:	80 e3       	ldi	r24, 0x30	; 48
    111a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    111e:	80 e3       	ldi	r24, 0x30	; 48
    1120:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1124:	81 e3       	ldi	r24, 0x31	; 49
    1126:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    112a:	80 e3       	ldi	r24, 0x30	; 48
    112c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1130:	08 95       	ret
	case(3):
		uart_enqueue('0');
    1132:	80 e3       	ldi	r24, 0x30	; 48
    1134:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1138:	80 e3       	ldi	r24, 0x30	; 48
    113a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    113e:	81 e3       	ldi	r24, 0x31	; 49
    1140:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1144:	81 e3       	ldi	r24, 0x31	; 49
    1146:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    114a:	08 95       	ret
	case(4):
		uart_enqueue('0');
    114c:	80 e3       	ldi	r24, 0x30	; 48
    114e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1152:	81 e3       	ldi	r24, 0x31	; 49
    1154:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1158:	80 e3       	ldi	r24, 0x30	; 48
    115a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1164:	08 95       	ret
	case(5):
		uart_enqueue('0');
    1166:	80 e3       	ldi	r24, 0x30	; 48
    1168:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    116c:	81 e3       	ldi	r24, 0x31	; 49
    116e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1172:	80 e3       	ldi	r24, 0x30	; 48
    1174:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1178:	81 e3       	ldi	r24, 0x31	; 49
    117a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    117e:	08 95       	ret
	case(6):
		uart_enqueue('0');
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1186:	81 e3       	ldi	r24, 0x31	; 49
    1188:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    118c:	81 e3       	ldi	r24, 0x31	; 49
    118e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1198:	08 95       	ret
	case(7):
		uart_enqueue('0');
    119a:	80 e3       	ldi	r24, 0x30	; 48
    119c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    11a0:	81 e3       	ldi	r24, 0x31	; 49
    11a2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    11a6:	81 e3       	ldi	r24, 0x31	; 49
    11a8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    11ac:	81 e3       	ldi	r24, 0x31	; 49
    11ae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    11b2:	08 95       	ret
	case(8):
		uart_enqueue('1');
    11b4:	81 e3       	ldi	r24, 0x31	; 49
    11b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11c0:	80 e3       	ldi	r24, 0x30	; 48
    11c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    11cc:	08 95       	ret
	case(9):
		uart_enqueue('1');
    11ce:	81 e3       	ldi	r24, 0x31	; 49
    11d0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11d4:	80 e3       	ldi	r24, 0x30	; 48
    11d6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    11e0:	81 e3       	ldi	r24, 0x31	; 49
    11e2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    11e6:	08 95       	ret
	case(10):
		uart_enqueue('1');
    11e8:	81 e3       	ldi	r24, 0x31	; 49
    11ea:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11ee:	80 e3       	ldi	r24, 0x30	; 48
    11f0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    11f4:	81 e3       	ldi	r24, 0x31	; 49
    11f6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1200:	08 95       	ret
	case(11):
		uart_enqueue('1');
    1202:	81 e3       	ldi	r24, 0x31	; 49
    1204:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    120e:	81 e3       	ldi	r24, 0x31	; 49
    1210:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    121a:	08 95       	ret
	case(12):
		uart_enqueue('1');
    121c:	81 e3       	ldi	r24, 0x31	; 49
    121e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1222:	81 e3       	ldi	r24, 0x31	; 49
    1224:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1228:	80 e3       	ldi	r24, 0x30	; 48
    122a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    122e:	80 e3       	ldi	r24, 0x30	; 48
    1230:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1234:	08 95       	ret
	case(13):
		uart_enqueue('1');
    1236:	81 e3       	ldi	r24, 0x31	; 49
    1238:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    123c:	81 e3       	ldi	r24, 0x31	; 49
    123e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1248:	81 e3       	ldi	r24, 0x31	; 49
    124a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    124e:	08 95       	ret
	case(14):
		uart_enqueue('1');
    1250:	81 e3       	ldi	r24, 0x31	; 49
    1252:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1256:	81 e3       	ldi	r24, 0x31	; 49
    1258:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    125c:	81 e3       	ldi	r24, 0x31	; 49
    125e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('0');
    1262:	80 e3       	ldi	r24, 0x30	; 48
    1264:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1268:	08 95       	ret
	case(15):
		uart_enqueue('1');
    126a:	81 e3       	ldi	r24, 0x31	; 49
    126c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1270:	81 e3       	ldi	r24, 0x31	; 49
    1272:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    1276:	81 e3       	ldi	r24, 0x31	; 49
    1278:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		uart_enqueue('1');
    127c:	81 e3       	ldi	r24, 0x31	; 49
    127e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
    1282:	08 95       	ret

00001284 <uart_enq_BIN8>:
		break;
	}	
}

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(uint8_t lowb){
    1284:	cf 93       	push	r28
    1286:	c8 2f       	mov	r28, r24
	uart_enqueue('b');
    1288:	82 e6       	ldi	r24, 0x62	; 98
    128a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
	uart_enq_BIN4(lowb>>4);
    128e:	8c 2f       	mov	r24, r28
    1290:	82 95       	swap	r24
    1292:	8f 70       	andi	r24, 0x0F	; 15
    1294:	0e 94 43 08 	call	0x1086	; 0x1086 <uart_enq_BIN4>
	uart_enq_BIN4(lowb & 0x0F);
    1298:	8c 2f       	mov	r24, r28
    129a:	8f 70       	andi	r24, 0x0F	; 15
    129c:	0e 94 43 08 	call	0x1086	; 0x1086 <uart_enq_BIN4>
}
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <uart_enq_HEX4>:
	

void uart_enq_HEX4(uint8_t lowb){
	switch(lowb){
    12a4:	87 30       	cpi	r24, 0x07	; 7
    12a6:	09 f4       	brne	.+2      	; 0x12aa <uart_enq_HEX4+0x6>
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <uart_enq_HEX4+0x84>
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	70 f4       	brcc	.+28     	; 0x12ca <uart_enq_HEX4+0x26>
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	59 f1       	breq	.+86     	; 0x1308 <uart_enq_HEX4+0x64>
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	28 f4       	brcc	.+10     	; 0x12c0 <uart_enq_HEX4+0x1c>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	f9 f0       	breq	.+62     	; 0x12f8 <uart_enq_HEX4+0x54>
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	08 f5       	brcc	.+66     	; 0x1300 <uart_enq_HEX4+0x5c>
    12be:	18 c0       	rjmp	.+48     	; 0x12f0 <uart_enq_HEX4+0x4c>
    12c0:	85 30       	cpi	r24, 0x05	; 5
    12c2:	51 f1       	breq	.+84     	; 0x1318 <uart_enq_HEX4+0x74>
    12c4:	86 30       	cpi	r24, 0x06	; 6
    12c6:	60 f5       	brcc	.+88     	; 0x1320 <uart_enq_HEX4+0x7c>
    12c8:	23 c0       	rjmp	.+70     	; 0x1310 <uart_enq_HEX4+0x6c>
    12ca:	8b 30       	cpi	r24, 0x0B	; 11
    12cc:	e9 f1       	breq	.+122    	; 0x1348 <uart_enq_HEX4+0xa4>
    12ce:	8c 30       	cpi	r24, 0x0C	; 12
    12d0:	28 f4       	brcc	.+10     	; 0x12dc <uart_enq_HEX4+0x38>
    12d2:	89 30       	cpi	r24, 0x09	; 9
    12d4:	89 f1       	breq	.+98     	; 0x1338 <uart_enq_HEX4+0x94>
    12d6:	8a 30       	cpi	r24, 0x0A	; 10
    12d8:	98 f5       	brcc	.+102    	; 0x1340 <uart_enq_HEX4+0x9c>
    12da:	2a c0       	rjmp	.+84     	; 0x1330 <uart_enq_HEX4+0x8c>
    12dc:	8d 30       	cpi	r24, 0x0D	; 13
    12de:	e1 f1       	breq	.+120    	; 0x1358 <uart_enq_HEX4+0xb4>
    12e0:	8d 30       	cpi	r24, 0x0D	; 13
    12e2:	b0 f1       	brcs	.+108    	; 0x1350 <uart_enq_HEX4+0xac>
    12e4:	8e 30       	cpi	r24, 0x0E	; 14
    12e6:	e1 f1       	breq	.+120    	; 0x1360 <uart_enq_HEX4+0xbc>
    12e8:	8f 30       	cpi	r24, 0x0F	; 15
    12ea:	09 f0       	breq	.+2      	; 0x12ee <uart_enq_HEX4+0x4a>
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <uart_enq_HEX4+0xca>
    12ee:	3c c0       	rjmp	.+120    	; 0x1368 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue( '0');
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    12f6:	08 95       	ret
	case(1):
		uart_enqueue( '1');
    12f8:	81 e3       	ldi	r24, 0x31	; 49
    12fa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    12fe:	08 95       	ret
	case(2):
		uart_enqueue( '2');
    1300:	82 e3       	ldi	r24, 0x32	; 50
    1302:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1306:	08 95       	ret
	case(3):
		uart_enqueue( '3');
    1308:	83 e3       	ldi	r24, 0x33	; 51
    130a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    130e:	08 95       	ret
	case(4):
		uart_enqueue( '4');
    1310:	84 e3       	ldi	r24, 0x34	; 52
    1312:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1316:	08 95       	ret
	case(5):
		uart_enqueue( '5');
    1318:	85 e3       	ldi	r24, 0x35	; 53
    131a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    131e:	08 95       	ret
	case(6):
		uart_enqueue( '6');
    1320:	86 e3       	ldi	r24, 0x36	; 54
    1322:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1326:	08 95       	ret
	case(7):
		uart_enqueue( '7');
    1328:	87 e3       	ldi	r24, 0x37	; 55
    132a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    132e:	08 95       	ret
	case(8):
		uart_enqueue( '8');
    1330:	88 e3       	ldi	r24, 0x38	; 56
    1332:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1336:	08 95       	ret
	case(9):
		uart_enqueue( '9');
    1338:	89 e3       	ldi	r24, 0x39	; 57
    133a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    133e:	08 95       	ret
	case(10):
		uart_enqueue( 'A');
    1340:	81 e4       	ldi	r24, 0x41	; 65
    1342:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1346:	08 95       	ret
	case(11):
		uart_enqueue( 'B');
    1348:	82 e4       	ldi	r24, 0x42	; 66
    134a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    134e:	08 95       	ret
	case(12):
		uart_enqueue( 'C');
    1350:	83 e4       	ldi	r24, 0x43	; 67
    1352:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1356:	08 95       	ret
	case(13):
		uart_enqueue( 'D');
    1358:	84 e4       	ldi	r24, 0x44	; 68
    135a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    135e:	08 95       	ret
	case(14):
		uart_enqueue( 'E');
    1360:	85 e4       	ldi	r24, 0x45	; 69
    1362:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
		break;
    1366:	08 95       	ret
	case(15):
		uart_enqueue( 'F');
    1368:	86 e4       	ldi	r24, 0x46	; 70
    136a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_enqueue>
    136e:	08 95       	ret

00001370 <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(uint8_t lowb){
    1370:	cf 93       	push	r28
    1372:	c8 2f       	mov	r28, r24
	uart_enq_HEX4(lowb>>4);
    1374:	82 95       	swap	r24
    1376:	8f 70       	andi	r24, 0x0F	; 15
    1378:	0e 94 52 09 	call	0x12a4	; 0x12a4 <uart_enq_HEX4>
	uart_enq_HEX4(lowb & 0x0F);
    137c:	8c 2f       	mov	r24, r28
    137e:	8f 70       	andi	r24, 0x0F	; 15
    1380:	0e 94 52 09 	call	0x12a4	; 0x12a4 <uart_enq_HEX4>
}
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <uart_enq_HEX16b>:

void uart_enq_HEX16b(uint8_t highb, uint8_t lowb){
    1388:	cf 93       	push	r28
    138a:	c6 2f       	mov	r28, r22
	uart_enq_HEX8(highb);
    138c:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_enq_HEX8>
	uart_enq_HEX8(lowb);
    1390:	8c 2f       	mov	r24, r28
    1392:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_enq_HEX8>
}
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <uart_enq_HEX16>:

void uart_enq_HEX16(uint16_t highb){
    139a:	cf 93       	push	r28
    139c:	c8 2f       	mov	r28, r24
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(blah);
    139e:	89 2f       	mov	r24, r25
    13a0:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(blah);
    13a4:	8c 2f       	mov	r24, r28
    13a6:	0e 94 b8 09 	call	0x1370	; 0x1370 <uart_enq_HEX8>
}
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <__vector_58>:
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    13c8:	e0 91 28 22 	lds	r30, 0x2228
    13cc:	f0 91 29 22 	lds	r31, 0x2229
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    13d0:	82 e2       	ldi	r24, 0x22	; 34
    13d2:	90 e2       	ldi	r25, 0x20	; 32
    13d4:	12 c0       	rjmp	.+36     	; 0x13fa <__vector_58+0x4c>
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    13d6:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    13d8:	30 91 24 22 	lds	r19, 0x2224
    13dc:	dc 01       	movw	r26, r24
    13de:	a3 0f       	add	r26, r19
    13e0:	b1 1d       	adc	r27, r1
    13e2:	2c 93       	st	X, r18
	uart_ihead++;
    13e4:	20 91 24 22 	lds	r18, 0x2224
    13e8:	2f 5f       	subi	r18, 0xFF	; 255
    13ea:	20 93 24 22 	sts	0x2224, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    13ee:	20 91 24 22 	lds	r18, 0x2224
    13f2:	2a 3f       	cpi	r18, 0xFA	; 250
    13f4:	10 f0       	brcs	.+4      	; 0x13fa <__vector_58+0x4c>
		uart_ihead = 0;
    13f6:	10 92 24 22 	sts	0x2224, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    13fa:	21 81       	ldd	r18, Z+1	; 0x01
    13fc:	22 23       	and	r18, r18
    13fe:	a4 f4       	brge	.+40     	; 0x1428 <__vector_58+0x7a>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    1400:	30 91 24 22 	lds	r19, 0x2224
    1404:	20 91 21 20 	lds	r18, 0x2021
    1408:	32 17       	cp	r19, r18
    140a:	30 f0       	brcs	.+12     	; 0x1418 <__vector_58+0x6a>
		return (uart_ihead - uart_itail);
    140c:	20 91 24 22 	lds	r18, 0x2224
    1410:	30 91 21 20 	lds	r19, 0x2021
    1414:	23 1b       	sub	r18, r19
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <__vector_58+0x76>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1418:	20 91 24 22 	lds	r18, 0x2224
    141c:	30 91 21 20 	lds	r19, 0x2021
    1420:	26 50       	subi	r18, 0x06	; 6
    1422:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1424:	2a 3f       	cpi	r18, 0xFA	; 250
    1426:	b8 f2       	brcs	.-82     	; 0x13d6 <__vector_58+0x28>
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
	uart_receive();
}
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	3f 91       	pop	r19
    1436:	2f 91       	pop	r18
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <uart_rxbuffer_enable>:
		uart_txbuffer_enable();		
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1442:	e0 91 28 22 	lds	r30, 0x2228
    1446:	f0 91 29 22 	lds	r31, 0x2229
    144a:	83 81       	ldd	r24, Z+3	; 0x03
    144c:	80 63       	ori	r24, 0x30	; 48
    144e:	83 83       	std	Z+3, r24	; 0x03
}
    1450:	08 95       	ret

00001452 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    1452:	e0 91 28 22 	lds	r30, 0x2228
    1456:	f0 91 29 22 	lds	r31, 0x2229
    145a:	83 81       	ldd	r24, Z+3	; 0x03
    145c:	8f 7c       	andi	r24, 0xCF	; 207
    145e:	83 83       	std	Z+3, r24	; 0x03
}
    1460:	08 95       	ret

00001462 <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1462:	e0 91 28 22 	lds	r30, 0x2228
    1466:	f0 91 29 22 	lds	r31, 0x2229
    146a:	83 81       	ldd	r24, Z+3	; 0x03
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	83 83       	std	Z+3, r24	; 0x03
}
    1470:	08 95       	ret

00001472 <uart_txbuffer_disable>:

void uart_txbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    1472:	e0 91 28 22 	lds	r30, 0x2228
    1476:	f0 91 29 22 	lds	r31, 0x2229
    147a:	83 81       	ldd	r24, Z+3	; 0x03
    147c:	8c 7f       	andi	r24, 0xFC	; 252
    147e:	83 83       	std	Z+3, r24	; 0x03
}
    1480:	08 95       	ret

00001482 <__vector_59>:
//** [PORT SPECIFIC CODE] -- CURRENTLY TUNED TO UART F1
//************************************************************************
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	11 24       	eor	r1, r1
    148c:	2f 93       	push	r18
    148e:	3f 93       	push	r19
    1490:	4f 93       	push	r20
    1492:	5f 93       	push	r21
    1494:	6f 93       	push	r22
    1496:	7f 93       	push	r23
    1498:	8f 93       	push	r24
    149a:	9f 93       	push	r25
    149c:	af 93       	push	r26
    149e:	bf 93       	push	r27
    14a0:	ef 93       	push	r30
    14a2:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    14a4:	e0 91 28 22 	lds	r30, 0x2228
    14a8:	f0 91 29 22 	lds	r31, 0x2229
    14ac:	81 81       	ldd	r24, Z+1	; 0x01
    14ae:	85 fd       	sbrc	r24, 5
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <__vector_59+0x66>
    14b2:	30 c0       	rjmp	.+96     	; 0x1514 <__vector_59+0x92>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    14b4:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    14b8:	30 91 25 22 	lds	r19, 0x2225
    14bc:	3f 5f       	subi	r19, 0xFF	; 255
    14be:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    14c2:	30 91 25 22 	lds	r19, 0x2225
    14c6:	3a 3f       	cpi	r19, 0xFA	; 250
    14c8:	10 f0       	brcs	.+4      	; 0x14ce <__vector_59+0x4c>
		uart_tail = 0;
    14ca:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    14ce:	dc 01       	movw	r26, r24
    14d0:	a2 0f       	add	r26, r18
    14d2:	b1 1d       	adc	r27, r1
    14d4:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    14d6:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    14d8:	e0 91 28 22 	lds	r30, 0x2228
    14dc:	f0 91 29 22 	lds	r31, 0x2229
    14e0:	21 81       	ldd	r18, Z+1	; 0x01
    14e2:	25 fd       	sbrc	r18, 5
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <__vector_59+0x6a>
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <__vector_59+0x92>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    14e8:	8a e2       	ldi	r24, 0x2A	; 42
    14ea:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    14ec:	30 91 29 21 	lds	r19, 0x2129
    14f0:	20 91 25 22 	lds	r18, 0x2225
    14f4:	32 17       	cp	r19, r18
    14f6:	30 f0       	brcs	.+12     	; 0x1504 <__vector_59+0x82>
		return (uart_head - uart_tail);
    14f8:	20 91 29 21 	lds	r18, 0x2129
    14fc:	30 91 25 22 	lds	r19, 0x2225
    1500:	23 1b       	sub	r18, r19
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <__vector_59+0x8e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1504:	20 91 29 21 	lds	r18, 0x2129
    1508:	30 91 25 22 	lds	r19, 0x2225
    150c:	26 50       	subi	r18, 0x06	; 6
    150e:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1510:	22 23       	and	r18, r18
    1512:	81 f6       	brne	.-96     	; 0x14b4 <__vector_59+0x32>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1514:	90 91 29 21 	lds	r25, 0x2129
    1518:	80 91 25 22 	lds	r24, 0x2225
    151c:	98 17       	cp	r25, r24
    151e:	30 f0       	brcs	.+12     	; 0x152c <__vector_59+0xaa>
		return (uart_head - uart_tail);
    1520:	80 91 29 21 	lds	r24, 0x2129
    1524:	90 91 25 22 	lds	r25, 0x2225
    1528:	89 1b       	sub	r24, r25
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <__vector_59+0xb6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    152c:	80 91 29 21 	lds	r24, 0x2129
    1530:	90 91 25 22 	lds	r25, 0x2225
    1534:	86 50       	subi	r24, 0x06	; 6
    1536:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1538:	88 23       	and	r24, r24
    153a:	19 f0       	breq	.+6      	; 0x1542 <__vector_59+0xc0>
    153c:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart_txbuffer_enable>
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <__vector_59+0xc4>
	else uart_txbuffer_disable();
    1542:	0e 94 39 0a 	call	0x1472	; 0x1472 <uart_txbuffer_disable>
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <uart_transmit>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1568:	e0 91 28 22 	lds	r30, 0x2228
    156c:	f0 91 29 22 	lds	r31, 0x2229
    1570:	81 81       	ldd	r24, Z+1	; 0x01
    1572:	85 fd       	sbrc	r24, 5
    1574:	1b c0       	rjmp	.+54     	; 0x15ac <uart_transmit+0x44>
    1576:	30 c0       	rjmp	.+96     	; 0x15d8 <uart_transmit+0x70>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1578:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    157c:	30 91 25 22 	lds	r19, 0x2225
    1580:	3f 5f       	subi	r19, 0xFF	; 255
    1582:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    1586:	30 91 25 22 	lds	r19, 0x2225
    158a:	3a 3f       	cpi	r19, 0xFA	; 250
    158c:	10 f0       	brcs	.+4      	; 0x1592 <uart_transmit+0x2a>
		uart_tail = 0;
    158e:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    1592:	dc 01       	movw	r26, r24
    1594:	a2 0f       	add	r26, r18
    1596:	b1 1d       	adc	r27, r1
    1598:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    159a:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    159c:	e0 91 28 22 	lds	r30, 0x2228
    15a0:	f0 91 29 22 	lds	r31, 0x2229
    15a4:	21 81       	ldd	r18, Z+1	; 0x01
    15a6:	25 fd       	sbrc	r18, 5
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <uart_transmit+0x48>
    15aa:	16 c0       	rjmp	.+44     	; 0x15d8 <uart_transmit+0x70>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    15ac:	8a e2       	ldi	r24, 0x2A	; 42
    15ae:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    15b0:	30 91 29 21 	lds	r19, 0x2129
    15b4:	20 91 25 22 	lds	r18, 0x2225
    15b8:	32 17       	cp	r19, r18
    15ba:	30 f0       	brcs	.+12     	; 0x15c8 <uart_transmit+0x60>
		return (uart_head - uart_tail);
    15bc:	20 91 29 21 	lds	r18, 0x2129
    15c0:	30 91 25 22 	lds	r19, 0x2225
    15c4:	23 1b       	sub	r18, r19
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <uart_transmit+0x6c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    15c8:	20 91 29 21 	lds	r18, 0x2129
    15cc:	30 91 25 22 	lds	r19, 0x2225
    15d0:	26 50       	subi	r18, 0x06	; 6
    15d2:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15d4:	22 23       	and	r18, r18
    15d6:	81 f6       	brne	.-96     	; 0x1578 <uart_transmit+0x10>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    15d8:	90 91 29 21 	lds	r25, 0x2129
    15dc:	80 91 25 22 	lds	r24, 0x2225
    15e0:	98 17       	cp	r25, r24
    15e2:	30 f0       	brcs	.+12     	; 0x15f0 <uart_transmit+0x88>
		return (uart_head - uart_tail);
    15e4:	80 91 29 21 	lds	r24, 0x2129
    15e8:	90 91 25 22 	lds	r25, 0x2225
    15ec:	89 1b       	sub	r24, r25
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <uart_transmit+0x94>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    15f0:	80 91 29 21 	lds	r24, 0x2129
    15f4:	90 91 25 22 	lds	r25, 0x2225
    15f8:	86 50       	subi	r24, 0x06	; 6
    15fa:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <uart_transmit+0x9e>
    1600:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart_txbuffer_enable>
    1604:	08 95       	ret
	else uart_txbuffer_disable();
    1606:	0e 94 39 0a 	call	0x1472	; 0x1472 <uart_txbuffer_disable>
    160a:	08 95       	ret

0000160c <uart_receive>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    160c:	e0 91 28 22 	lds	r30, 0x2228
    1610:	f0 91 29 22 	lds	r31, 0x2229
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1614:	82 e2       	ldi	r24, 0x22	; 34
    1616:	90 e2       	ldi	r25, 0x20	; 32
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1618:	12 c0       	rjmp	.+36     	; 0x163e <uart_receive+0x32>
		incomingByte = port->DATA;
    161a:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    161c:	30 91 24 22 	lds	r19, 0x2224
    1620:	dc 01       	movw	r26, r24
    1622:	a3 0f       	add	r26, r19
    1624:	b1 1d       	adc	r27, r1
    1626:	2c 93       	st	X, r18
	uart_ihead++;
    1628:	20 91 24 22 	lds	r18, 0x2224
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	20 93 24 22 	sts	0x2224, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    1632:	20 91 24 22 	lds	r18, 0x2224
    1636:	2a 3f       	cpi	r18, 0xFA	; 250
    1638:	10 f0       	brcs	.+4      	; 0x163e <uart_receive+0x32>
		uart_ihead = 0;
    163a:	10 92 24 22 	sts	0x2224, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    163e:	21 81       	ldd	r18, Z+1	; 0x01
    1640:	22 23       	and	r18, r18
    1642:	a4 f4       	brge	.+40     	; 0x166c <uart_receive+0x60>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    1644:	30 91 24 22 	lds	r19, 0x2224
    1648:	20 91 21 20 	lds	r18, 0x2021
    164c:	32 17       	cp	r19, r18
    164e:	30 f0       	brcs	.+12     	; 0x165c <uart_receive+0x50>
		return (uart_ihead - uart_itail);
    1650:	20 91 24 22 	lds	r18, 0x2224
    1654:	30 91 21 20 	lds	r19, 0x2021
    1658:	23 1b       	sub	r18, r19
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <uart_receive+0x5c>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    165c:	20 91 24 22 	lds	r18, 0x2224
    1660:	30 91 21 20 	lds	r19, 0x2021
    1664:	26 50       	subi	r18, 0x06	; 6
    1666:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1668:	2a 3f       	cpi	r18, 0xFA	; 250
    166a:	b8 f2       	brcs	.-82     	; 0x161a <uart_receive+0xe>
    166c:	08 95       	ret

0000166e <init_uart_obuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(void){
	uart_head = 0;
    166e:	10 92 29 21 	sts	0x2129, r1
	uart_tail = 0;
    1672:	10 92 25 22 	sts	0x2225, r1
}
    1676:	08 95       	ret

00001678 <uart_count>:

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1678:	90 91 29 21 	lds	r25, 0x2129
    167c:	80 91 25 22 	lds	r24, 0x2225
    1680:	98 17       	cp	r25, r24
    1682:	30 f0       	brcs	.+12     	; 0x1690 <uart_count+0x18>
		return (uart_head - uart_tail);
    1684:	80 91 29 21 	lds	r24, 0x2129
    1688:	90 91 25 22 	lds	r25, 0x2225
    168c:	89 1b       	sub	r24, r25
    168e:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1690:	80 91 29 21 	lds	r24, 0x2129
    1694:	90 91 25 22 	lds	r25, 0x2225
    1698:	86 50       	subi	r24, 0x06	; 6
    169a:	89 1b       	sub	r24, r25
	}
}
    169c:	08 95       	ret

0000169e <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
	uint16_t length = (uint16_t)strlen(string_in);
    16ae:	e8 2f       	mov	r30, r24
    16b0:	f9 2f       	mov	r31, r25
    16b2:	df 01       	movw	r26, r30
    16b4:	0d 90       	ld	r0, X+
    16b6:	00 20       	and	r0, r0
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <uart_enqueue_string+0x16>
    16ba:	11 97       	sbiw	r26, 0x01	; 1
    16bc:	6d 01       	movw	r12, r26
    16be:	ce 1a       	sub	r12, r30
    16c0:	df 0a       	sbc	r13, r31
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <uart_enqueue_string+0x28>
    16c4:	72 c0       	rjmp	.+228    	; 0x17aa <uart_enqueue_string+0x10c>
    16c6:	e8 2e       	mov	r14, r24
    16c8:	f9 2e       	mov	r15, r25
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    16ce:	ca e2       	ldi	r28, 0x2A	; 42
    16d0:	d1 e2       	ldi	r29, 0x21	; 33
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    16d2:	f7 01       	movw	r30, r14
    16d4:	81 91       	ld	r24, Z+
    16d6:	7f 01       	movw	r14, r30
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    16d8:	90 91 29 21 	lds	r25, 0x2129
    16dc:	fe 01       	movw	r30, r28
    16de:	e9 0f       	add	r30, r25
    16e0:	f1 1d       	adc	r31, r1
    16e2:	80 83       	st	Z, r24
	uart_head++;
    16e4:	80 91 29 21 	lds	r24, 0x2129
    16e8:	8f 5f       	subi	r24, 0xFF	; 255
    16ea:	80 93 29 21 	sts	0x2129, r24
	if (uart_head >= MAX_BUFFER_LEN){
    16ee:	80 91 29 21 	lds	r24, 0x2129
    16f2:	8a 3f       	cpi	r24, 0xFA	; 250
    16f4:	10 f0       	brcs	.+4      	; 0x16fa <uart_enqueue_string+0x5c>
		uart_head = 0;
    16f6:	10 92 29 21 	sts	0x2129, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    16fa:	a0 91 28 22 	lds	r26, 0x2228
    16fe:	b0 91 29 22 	lds	r27, 0x2229
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	8c 91       	ld	r24, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	85 fd       	sbrc	r24, 5
    170a:	1c c0       	rjmp	.+56     	; 0x1744 <uart_enqueue_string+0xa6>
    170c:	2f c0       	rjmp	.+94     	; 0x176c <uart_enqueue_string+0xce>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    170e:	80 91 25 22 	lds	r24, 0x2225
	uart_tail++;
    1712:	90 91 25 22 	lds	r25, 0x2225
    1716:	9f 5f       	subi	r25, 0xFF	; 255
    1718:	90 93 25 22 	sts	0x2225, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    171c:	90 91 25 22 	lds	r25, 0x2225
    1720:	9a 3f       	cpi	r25, 0xFA	; 250
    1722:	10 f0       	brcs	.+4      	; 0x1728 <uart_enqueue_string+0x8a>
		uart_tail = 0;
    1724:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    1728:	fe 01       	movw	r30, r28
    172a:	e8 0f       	add	r30, r24
    172c:	f1 1d       	adc	r31, r1
    172e:	80 81       	ld	r24, Z
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1730:	8c 93       	st	X, r24
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1732:	a0 91 28 22 	lds	r26, 0x2228
    1736:	b0 91 29 22 	lds	r27, 0x2229
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	8c 91       	ld	r24, X
    173e:	11 97       	sbiw	r26, 0x01	; 1
    1740:	85 ff       	sbrs	r24, 5
    1742:	14 c0       	rjmp	.+40     	; 0x176c <uart_enqueue_string+0xce>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1744:	90 91 29 21 	lds	r25, 0x2129
    1748:	80 91 25 22 	lds	r24, 0x2225
    174c:	98 17       	cp	r25, r24
    174e:	30 f0       	brcs	.+12     	; 0x175c <uart_enqueue_string+0xbe>
		return (uart_head - uart_tail);
    1750:	80 91 29 21 	lds	r24, 0x2129
    1754:	90 91 25 22 	lds	r25, 0x2225
    1758:	89 1b       	sub	r24, r25
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <uart_enqueue_string+0xca>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    175c:	80 91 29 21 	lds	r24, 0x2129
    1760:	90 91 25 22 	lds	r25, 0x2225
    1764:	86 50       	subi	r24, 0x06	; 6
    1766:	89 1b       	sub	r24, r25
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1768:	88 23       	and	r24, r24
    176a:	89 f6       	brne	.-94     	; 0x170e <uart_enqueue_string+0x70>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    176c:	90 91 29 21 	lds	r25, 0x2129
    1770:	80 91 25 22 	lds	r24, 0x2225
    1774:	98 17       	cp	r25, r24
    1776:	30 f0       	brcs	.+12     	; 0x1784 <uart_enqueue_string+0xe6>
		return (uart_head - uart_tail);
    1778:	80 91 29 21 	lds	r24, 0x2129
    177c:	90 91 25 22 	lds	r25, 0x2225
    1780:	89 1b       	sub	r24, r25
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <uart_enqueue_string+0xf2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1784:	80 91 29 21 	lds	r24, 0x2129
    1788:	90 91 25 22 	lds	r25, 0x2225
    178c:	86 50       	subi	r24, 0x06	; 6
    178e:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1790:	88 23       	and	r24, r24
    1792:	19 f0       	breq	.+6      	; 0x179a <uart_enqueue_string+0xfc>
    1794:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart_txbuffer_enable>
    1798:	02 c0       	rjmp	.+4      	; 0x179e <uart_enqueue_string+0x100>
	else uart_txbuffer_disable();
    179a:	0e 94 39 0a 	call	0x1472	; 0x1472 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    179e:	0f 5f       	subi	r16, 0xFF	; 255
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	0c 15       	cp	r16, r12
    17a4:	1d 05       	cpc	r17, r13
    17a6:	09 f0       	breq	.+2      	; 0x17aa <uart_enqueue_string+0x10c>
    17a8:	94 cf       	rjmp	.-216    	; 0x16d2 <uart_enqueue_string+0x34>
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <uart_enqueue>:
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    17bc:	90 91 29 21 	lds	r25, 0x2129
    17c0:	ea e2       	ldi	r30, 0x2A	; 42
    17c2:	f1 e2       	ldi	r31, 0x21	; 33
    17c4:	e9 0f       	add	r30, r25
    17c6:	f1 1d       	adc	r31, r1
    17c8:	80 83       	st	Z, r24
	uart_head++;
    17ca:	80 91 29 21 	lds	r24, 0x2129
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	80 93 29 21 	sts	0x2129, r24
	if (uart_head >= MAX_BUFFER_LEN){
    17d4:	80 91 29 21 	lds	r24, 0x2129
    17d8:	8a 3f       	cpi	r24, 0xFA	; 250
    17da:	10 f0       	brcs	.+4      	; 0x17e0 <uart_enqueue+0x24>
		uart_head = 0;
    17dc:	10 92 29 21 	sts	0x2129, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    17e0:	e0 91 28 22 	lds	r30, 0x2228
    17e4:	f0 91 29 22 	lds	r31, 0x2229
    17e8:	81 81       	ldd	r24, Z+1	; 0x01
    17ea:	85 fd       	sbrc	r24, 5
    17ec:	1b c0       	rjmp	.+54     	; 0x1824 <uart_enqueue+0x68>
    17ee:	30 c0       	rjmp	.+96     	; 0x1850 <uart_enqueue+0x94>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    17f0:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    17f4:	30 91 25 22 	lds	r19, 0x2225
    17f8:	3f 5f       	subi	r19, 0xFF	; 255
    17fa:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    17fe:	30 91 25 22 	lds	r19, 0x2225
    1802:	3a 3f       	cpi	r19, 0xFA	; 250
    1804:	10 f0       	brcs	.+4      	; 0x180a <uart_enqueue+0x4e>
		uart_tail = 0;
    1806:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    180a:	dc 01       	movw	r26, r24
    180c:	a2 0f       	add	r26, r18
    180e:	b1 1d       	adc	r27, r1
    1810:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1812:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1814:	e0 91 28 22 	lds	r30, 0x2228
    1818:	f0 91 29 22 	lds	r31, 0x2229
    181c:	21 81       	ldd	r18, Z+1	; 0x01
    181e:	25 fd       	sbrc	r18, 5
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <uart_enqueue+0x6c>
    1822:	16 c0       	rjmp	.+44     	; 0x1850 <uart_enqueue+0x94>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1824:	8a e2       	ldi	r24, 0x2A	; 42
    1826:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1828:	30 91 29 21 	lds	r19, 0x2129
    182c:	20 91 25 22 	lds	r18, 0x2225
    1830:	32 17       	cp	r19, r18
    1832:	30 f0       	brcs	.+12     	; 0x1840 <uart_enqueue+0x84>
		return (uart_head - uart_tail);
    1834:	20 91 29 21 	lds	r18, 0x2129
    1838:	30 91 25 22 	lds	r19, 0x2225
    183c:	23 1b       	sub	r18, r19
    183e:	06 c0       	rjmp	.+12     	; 0x184c <uart_enqueue+0x90>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1840:	20 91 29 21 	lds	r18, 0x2129
    1844:	30 91 25 22 	lds	r19, 0x2225
    1848:	26 50       	subi	r18, 0x06	; 6
    184a:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    184c:	22 23       	and	r18, r18
    184e:	81 f6       	brne	.-96     	; 0x17f0 <uart_enqueue+0x34>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1850:	90 91 29 21 	lds	r25, 0x2129
    1854:	80 91 25 22 	lds	r24, 0x2225
    1858:	98 17       	cp	r25, r24
    185a:	30 f0       	brcs	.+12     	; 0x1868 <uart_enqueue+0xac>
		return (uart_head - uart_tail);
    185c:	80 91 29 21 	lds	r24, 0x2129
    1860:	90 91 25 22 	lds	r25, 0x2225
    1864:	89 1b       	sub	r24, r25
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <uart_enqueue+0xb8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1868:	80 91 29 21 	lds	r24, 0x2129
    186c:	90 91 25 22 	lds	r25, 0x2225
    1870:	86 50       	subi	r24, 0x06	; 6
    1872:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <uart_enqueue+0xc2>
    1878:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart_txbuffer_enable>
    187c:	08 95       	ret
	else uart_txbuffer_disable();
    187e:	0e 94 39 0a 	call	0x1472	; 0x1472 <uart_txbuffer_disable>
    1882:	08 95       	ret

00001884 <uart_dequeue>:
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1884:	80 91 25 22 	lds	r24, 0x2225
	uart_tail++;
    1888:	90 91 25 22 	lds	r25, 0x2225
    188c:	9f 5f       	subi	r25, 0xFF	; 255
    188e:	90 93 25 22 	sts	0x2225, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    1892:	90 91 25 22 	lds	r25, 0x2225
    1896:	9a 3f       	cpi	r25, 0xFA	; 250
    1898:	10 f0       	brcs	.+4      	; 0x189e <uart_dequeue+0x1a>
		uart_tail = 0;
    189a:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    189e:	ea e2       	ldi	r30, 0x2A	; 42
    18a0:	f1 e2       	ldi	r31, 0x21	; 33
    18a2:	e8 0f       	add	r30, r24
    18a4:	f1 1d       	adc	r31, r1
    18a6:	80 81       	ld	r24, Z
}
    18a8:	08 95       	ret

000018aa <init_uart_ibuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(void){
	uart_ihead = 0;
    18aa:	10 92 24 22 	sts	0x2224, r1
	uart_itail = 0;
    18ae:	10 92 21 20 	sts	0x2021, r1
}
    18b2:	08 95       	ret

000018b4 <init_uart_buffer>:
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* which){
	//Setup UART hardware
		port = which;
    18b4:	80 93 28 22 	sts	0x2228, r24
    18b8:	90 93 29 22 	sts	0x2229, r25
		
	//Setup data buffers
		init_uart_obuffer();
    18bc:	0e 94 37 0b 	call	0x166e	; 0x166e <init_uart_obuffer>
		init_uart_ibuffer();
    18c0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <init_uart_ibuffer>
	
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable();
    18c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <uart_rxbuffer_enable>
		uart_txbuffer_enable();		
    18c8:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart_txbuffer_enable>
}
    18cc:	08 95       	ret

000018ce <uart_icount>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    18ce:	90 91 24 22 	lds	r25, 0x2224
    18d2:	80 91 21 20 	lds	r24, 0x2021
    18d6:	98 17       	cp	r25, r24
    18d8:	30 f0       	brcs	.+12     	; 0x18e6 <uart_icount+0x18>
		return (uart_ihead - uart_itail);
    18da:	80 91 24 22 	lds	r24, 0x2224
    18de:	90 91 21 20 	lds	r25, 0x2021
    18e2:	89 1b       	sub	r24, r25
    18e4:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    18e6:	80 91 24 22 	lds	r24, 0x2224
    18ea:	90 91 21 20 	lds	r25, 0x2021
    18ee:	86 50       	subi	r24, 0x06	; 6
    18f0:	89 1b       	sub	r24, r25
	}
}
    18f2:	08 95       	ret

000018f4 <uart_ienqueue>:

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    18f4:	90 91 24 22 	lds	r25, 0x2224
    18f8:	e2 e2       	ldi	r30, 0x22	; 34
    18fa:	f0 e2       	ldi	r31, 0x20	; 32
    18fc:	e9 0f       	add	r30, r25
    18fe:	f1 1d       	adc	r31, r1
    1900:	80 83       	st	Z, r24
	uart_ihead++;
    1902:	80 91 24 22 	lds	r24, 0x2224
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	80 93 24 22 	sts	0x2224, r24
	if (uart_ihead >= MAX_IBUFFER_LEN){
    190c:	80 91 24 22 	lds	r24, 0x2224
    1910:	8a 3f       	cpi	r24, 0xFA	; 250
    1912:	10 f0       	brcs	.+4      	; 0x1918 <uart_ienqueue+0x24>
		uart_ihead = 0;
    1914:	10 92 24 22 	sts	0x2224, r1
    1918:	08 95       	ret

0000191a <uart_idequeue>:
	}
}

inline uint8_t uart_idequeue(void){
	uint8_t oldtail;
	oldtail = uart_itail;
    191a:	80 91 21 20 	lds	r24, 0x2021
	uart_itail++;
    191e:	90 91 21 20 	lds	r25, 0x2021
    1922:	9f 5f       	subi	r25, 0xFF	; 255
    1924:	90 93 21 20 	sts	0x2021, r25
	if (uart_itail >= MAX_IBUFFER_LEN){
    1928:	90 91 21 20 	lds	r25, 0x2021
    192c:	9a 3f       	cpi	r25, 0xFA	; 250
    192e:	10 f0       	brcs	.+4      	; 0x1934 <uart_idequeue+0x1a>
		uart_itail = 0;
    1930:	10 92 21 20 	sts	0x2021, r1
	}
	return uart_ibuffer[oldtail];
    1934:	e2 e2       	ldi	r30, 0x22	; 34
    1936:	f0 e2       	ldi	r31, 0x20	; 32
    1938:	e8 0f       	add	r30, r24
    193a:	f1 1d       	adc	r31, r1
    193c:	80 81       	ld	r24, Z
}
    193e:	08 95       	ret

00001940 <service_uart_buffer>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    1940:	90 91 24 22 	lds	r25, 0x2224
    1944:	80 91 21 20 	lds	r24, 0x2021
    1948:	98 17       	cp	r25, r24
    194a:	30 f0       	brcs	.+12     	; 0x1958 <service_uart_buffer+0x18>
		return (uart_ihead - uart_itail);
    194c:	80 91 24 22 	lds	r24, 0x2224
    1950:	90 91 21 20 	lds	r25, 0x2021
    1954:	89 1b       	sub	r24, r25
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <service_uart_buffer+0x24>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1958:	80 91 24 22 	lds	r24, 0x2224
    195c:	90 91 21 20 	lds	r25, 0x2021
    1960:	86 50       	subi	r24, 0x06	; 6
    1962:	89 1b       	sub	r24, r25
	uart_send_byte(&udata, ":");
	for (uint8_t i=0; i<uart_icount(); i++){uart_send_byte(&udata, uart_ibuffer[i]);}
}

inline void service_uart_buffer(){
	if (uart_icount() > 0) {pwm_hunt_target();}
    1964:	88 23       	and	r24, r24
    1966:	11 f0       	breq	.+4      	; 0x196c <service_uart_buffer+0x2c>
    1968:	0e 94 54 05 	call	0xaa8	; 0xaa8 <pwm_hunt_target>
    196c:	08 95       	ret

0000196e <init_ui>:

//Handles all UI hardware (buttons, switches, and lights)

void init_ui(){
	//LED's are located at PD0 (Middle) and PD4 (Left)
	PORTD.DIRSET = 0x11; //pins 0 and 4 to output
    196e:	e0 e6       	ldi	r30, 0x60	; 96
    1970:	f6 e0       	ldi	r31, 0x06	; 6
    1972:	81 e1       	ldi	r24, 0x11	; 17
    1974:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x11; //pins 0 and 4 to high (off)
    1976:	85 83       	std	Z+5, r24	; 0x05
	PORTD.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    1978:	80 e4       	ldi	r24, 0x40	; 64
    197a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    197c:	84 8b       	std	Z+20, r24	; 0x14
	TCD0.CTRLA = 0x07; //enable; div1024
    197e:	e0 e0       	ldi	r30, 0x00	; 0
    1980:	f9 e0       	ldi	r31, 0x09	; 9
    1982:	57 e0       	ldi	r21, 0x07	; 7
    1984:	50 83       	st	Z, r21
	TCD0.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    1986:	43 e1       	ldi	r20, 0x13	; 19
    1988:	41 83       	std	Z+1, r20	; 0x01
	TCD0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	86 a3       	lds	r24, 0x56
    1990:	97 a3       	lds	r25, 0x57
	TCD0.CCA = 0x0080; //Default to off-level brightness
    1992:	20 e8       	ldi	r18, 0x80	; 128
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	20 a7       	lds	r18, 0x70
    1998:	31 a7       	lds	r19, 0x71
	TCD1.CTRLA = 0x07; //enable; div1024
    199a:	e0 e4       	ldi	r30, 0x40	; 64
    199c:	f9 e0       	ldi	r31, 0x09	; 9
    199e:	50 83       	st	Z, r21
	TCD1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    19a0:	41 83       	std	Z+1, r20	; 0x01
	TCD1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    19a2:	86 a3       	lds	r24, 0x56
    19a4:	97 a3       	lds	r25, 0x57
	TCD1.CCA = 0x0010; //Default to off-level brightness
    19a6:	80 e1       	ldi	r24, 0x10	; 16
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	80 a7       	lds	r24, 0x70
    19ac:	91 a7       	lds	r25, 0x71

	//Switches need pull-up resistance
	//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
	PORTC.DIRCLR = B8(00111100); //This is the default condition, but just to be safe
    19ae:	e0 e4       	ldi	r30, 0x40	; 64
    19b0:	f6 e0       	ldi	r31, 0x06	; 6
    19b2:	8c e3       	ldi	r24, 0x3C	; 60
    19b4:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN5CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    19b6:	88 e9       	ldi	r24, 0x98	; 152
    19b8:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN4CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    19ba:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN3CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges	
    19bc:	83 8b       	std	Z+19, r24	; 0x13
	//Button requirements
	//	Button Interrupt Controls
	//	Button: PC2 = Button0
	#define RISING_EDGE 	B8(10011001) //Slew rate limiter on; Internal pull-up on; Sense on rising input edges
	#define FALLING_EDGE 	B8(10011010) //Slew rate limiter on; Internal pull-up on; Sense on falling input edges
	PORTC.INT0MASK = B8(00000100); //Enable interrupt0 channel for PC2 
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = B8(00000011); //interrupt0 channel set to high priority
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	81 87       	std	Z+9, r24	; 0x09
	PORTC.PIN2CTRL = FALLING_EDGE; 
    19c6:	8a e9       	ldi	r24, 0x9A	; 154
    19c8:	82 8b       	std	Z+18, r24	; 0x12
	STATE_Button = BUTTON_IDLE;
    19ca:	10 92 15 20 	sts	0x2015, r1
}
    19ce:	08 95       	ret

000019d0 <led_dim>:
void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}

void led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    19d0:	88 23       	and	r24, r24
    19d2:	19 f0       	breq	.+6      	; 0x19da <led_dim+0xa>
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	61 f4       	brne	.+24     	; 0x19f0 <led_dim+0x20>
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <led_dim+0x16>
	case LED_LEFT:
		TCD1.CCABUF = (uint16_t)brightness;		
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	e0 e4       	ldi	r30, 0x40	; 64
    19de:	f9 e0       	ldi	r31, 0x09	; 9
    19e0:	60 af       	sts	0x70, r22
    19e2:	71 af       	sts	0x71, r23
		break;
    19e4:	08 95       	ret
	case LED_MID:
		TCD0.CCABUF = (uint16_t)brightness;		
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	e0 e0       	ldi	r30, 0x00	; 0
    19ea:	f9 e0       	ldi	r31, 0x09	; 9
    19ec:	60 af       	sts	0x70, r22
    19ee:	71 af       	sts	0x71, r23
    19f0:	08 95       	ret

000019f2 <led_off>:
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <led_dim>
    19f8:	08 95       	ret

000019fa <led_on>:

//#############################################################
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}
    19fa:	6f ef       	ldi	r22, 0xFF	; 255
    19fc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <led_dim>
    1a00:	08 95       	ret

00001a02 <led_toggle>:
		break;
	}
}

void led_toggle(uint8_t which){
	switch(which){
    1a02:	88 23       	and	r24, r24
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <led_toggle+0xa>
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	61 f4       	brne	.+24     	; 0x1a22 <led_toggle+0x20>
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <led_toggle+0x16>
	case LED_LEFT:
		TCD1.CCAL = ~TCD1.CCAL;		
    1a0c:	e0 e4       	ldi	r30, 0x40	; 64
    1a0e:	f9 e0       	ldi	r31, 0x09	; 9
    1a10:	80 a5       	lds	r24, 0x60
    1a12:	80 95       	com	r24
    1a14:	80 a7       	lds	r24, 0x70
		break;
    1a16:	08 95       	ret
	case LED_MID:
		TCD0.CCAL = ~TCD0.CCAL;		
    1a18:	e0 e0       	ldi	r30, 0x00	; 0
    1a1a:	f9 e0       	ldi	r31, 0x09	; 9
    1a1c:	80 a5       	lds	r24, 0x60
    1a1e:	80 95       	com	r24
    1a20:	80 a7       	lds	r24, 0x70
    1a22:	08 95       	ret

00001a24 <service_leds>:
	}
}

void service_leds(){

}
    1a24:	08 95       	ret

00001a26 <__vector_2>:
//#############################################################
//## BUTTON -- Interrupt driven
//#############################################################

//Caution with programatic use as I do not implement switch debouncing
SIGNAL(PORTC_INT0_vect){
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	8f 93       	push	r24
    1a32:	ef 93       	push	r30
    1a34:	ff 93       	push	r31
	if (PORTC.PIN2CTRL == FALLING_EDGE){
    1a36:	e0 e4       	ldi	r30, 0x40	; 64
    1a38:	f6 e0       	ldi	r31, 0x06	; 6
    1a3a:	82 89       	ldd	r24, Z+18	; 0x12
    1a3c:	8a 39       	cpi	r24, 0x9A	; 154
    1a3e:	31 f4       	brne	.+12     	; 0x1a4c <__vector_2+0x26>
		//Just detected a falling edge (button has been pressed in)
		PORTC.PIN2CTRL = RISING_EDGE;
    1a40:	89 e9       	ldi	r24, 0x99	; 153
    1a42:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_PUSHED;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 15 20 	sts	0x2015, r24
    1a4a:	07 c0       	rjmp	.+14     	; 0x1a5a <__vector_2+0x34>
	}
	else {
		//Just detected a rising edge (button has been released)
		PORTC.PIN2CTRL = FALLING_EDGE;
    1a4c:	8a e9       	ldi	r24, 0x9A	; 154
    1a4e:	e0 e4       	ldi	r30, 0x40	; 64
    1a50:	f6 e0       	ldi	r31, 0x06	; 6
    1a52:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_RELEASED;
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	80 93 15 20 	sts	0x2015, r24
	}
}
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	8f 91       	pop	r24
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f 90       	pop	r0
    1a66:	1f 90       	pop	r1
    1a68:	18 95       	reti

00001a6a <service_button>:
		//Actions when the button is pushed and held down
	}
	else {
		//Actions when the button is not pressed or held
	}
}
    1a6a:	08 95       	ret

00001a6c <sw_on>:
//## SWITCHESs -- Polling only
//#############################################################

//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
boolean sw_on(uint8_t which){
	switch(which){
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a <sw_on+0x1e>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	18 f0       	brcs	.+6      	; 0x1a7a <sw_on+0xe>
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	c9 f4       	brne	.+50     	; 0x1aaa <sw_on+0x3e>
    1a78:	10 c0       	rjmp	.+32     	; 0x1a9a <sw_on+0x2e>
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
    1a7a:	e0 e4       	ldi	r30, 0x40	; 64
    1a7c:	f6 e0       	ldi	r31, 0x06	; 6
    1a7e:	90 85       	ldd	r25, Z+8	; 0x08
			//Switch is closed (on)
			return true;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	95 ff       	sbrs	r25, 5
    1a84:	13 c0       	rjmp	.+38     	; 0x1aac <sw_on+0x40>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW2:
		if ((PORTC.IN & _BV(4)) == 0x00){
    1a8a:	e0 e4       	ldi	r30, 0x40	; 64
    1a8c:	f6 e0       	ldi	r31, 0x06	; 6
    1a8e:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	94 ff       	sbrs	r25, 4
    1a94:	0b c0       	rjmp	.+22     	; 0x1aac <sw_on+0x40>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW3:
		if ((PORTC.IN & _BV(3)) == 0x00){
    1a9a:	e0 e4       	ldi	r30, 0x40	; 64
    1a9c:	f6 e0       	ldi	r31, 0x06	; 6
    1a9e:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	93 ff       	sbrs	r25, 3
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <sw_on+0x40>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	default:
		return false;
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1aac:	08 95       	ret

00001aae <service_switches>:

void service_switches(){
	static uint8_t mode = 0; //Store prior MODE state

	//[Switch 1] Audio vs. Photodiode Mode -- use pwm.c / pwm_mode() to test condition
	if (sw_on(SW1) == true){
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <sw_on>
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	51 f4       	brne	.+20     	; 0x1acc <service_switches+0x1e>
		if (mode != MODE_AUDIO){
    1ab8:	80 91 14 20 	lds	r24, 0x2014
    1abc:	85 33       	cpi	r24, 0x35	; 53
    1abe:	79 f0       	breq	.+30     	; 0x1ade <service_switches+0x30>
			//Just changed modes into AUDIO mode!
			mode = MODE_AUDIO; //update state
    1ac0:	85 e3       	ldi	r24, 0x35	; 53
    1ac2:	80 93 14 20 	sts	0x2014, r24
			pwm_enable(); //turn on AUDIO mode interrupts and configure!
    1ac6:	0e 94 1b 03 	call	0x636	; 0x636 <pwm_enable>
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <service_switches+0x30>
		}
	}
	else {
		if (mode != MODE_PHOTO){
    1acc:	80 91 14 20 	lds	r24, 0x2014
    1ad0:	86 33       	cpi	r24, 0x36	; 54
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <service_switches+0x30>
			//Just changed modes into PHOTO mode!
			mode = MODE_PHOTO; //update state
    1ad4:	86 e3       	ldi	r24, 0x36	; 54
    1ad6:	80 93 14 20 	sts	0x2014, r24
			pwm_disable();
    1ada:	0e 94 3f 03 	call	0x67e	; 0x67e <pwm_disable>
		}
	}
	//[Switch 2] Output polarity
	if (sw_on(SW2) == true){
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <sw_on>
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	61 f4       	brne	.+24     	; 0x1b00 <service_switches+0x52>
		if (pwm_mode() == false) ac_polarity(IDLE_HIGH);
    1ae8:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_mode>
    1aec:	88 23       	and	r24, r24
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <service_switches+0x4a>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <service_switches+0x68>
		else pwm_polarity(NEGATIVE_PULSE);
    1af8:	88 e5       	ldi	r24, 0x58	; 88
    1afa:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_polarity>
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <service_switches+0x68>
	}
	else {
		if (pwm_mode() == false) ac_polarity(IDLE_LOW);
    1b00:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_mode>
    1b04:	88 23       	and	r24, r24
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <service_switches+0x62>
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <service_switches+0x68>
		else pwm_polarity(POSITIVE_PULSE);
    1b10:	87 e5       	ldi	r24, 0x57	; 87
    1b12:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_polarity>
	}
	//[Switch 3] Hysteresis enable
	if (sw_on(SW3) == true){
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <sw_on>
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	41 f4       	brne	.+16     	; 0x1b30 <service_switches+0x82>
		if (pwm_mode() == false) ac_hysteresis(LARGE);
    1b20:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_mode>
    1b24:	88 23       	and	r24, r24
    1b26:	51 f4       	brne	.+20     	; 0x1b3c <service_switches+0x8e>
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1b2e:	08 95       	ret
	}
	else {
		if (pwm_mode() == false) ac_hysteresis(NONE);
    1b30:	0e 94 47 03 	call	0x68e	; 0x68e <pwm_mode>
    1b34:	88 23       	and	r24, r24
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <service_switches+0x8e>
    1b38:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1b3c:	08 95       	ret

00001b3e <__udivmodsi4>:
    1b3e:	a1 e2       	ldi	r26, 0x21	; 33
    1b40:	1a 2e       	mov	r1, r26
    1b42:	aa 1b       	sub	r26, r26
    1b44:	bb 1b       	sub	r27, r27
    1b46:	fd 01       	movw	r30, r26
    1b48:	0d c0       	rjmp	.+26     	; 0x1b64 <__udivmodsi4_ep>

00001b4a <__udivmodsi4_loop>:
    1b4a:	aa 1f       	adc	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	ee 1f       	adc	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	a2 17       	cp	r26, r18
    1b54:	b3 07       	cpc	r27, r19
    1b56:	e4 07       	cpc	r30, r20
    1b58:	f5 07       	cpc	r31, r21
    1b5a:	20 f0       	brcs	.+8      	; 0x1b64 <__udivmodsi4_ep>
    1b5c:	a2 1b       	sub	r26, r18
    1b5e:	b3 0b       	sbc	r27, r19
    1b60:	e4 0b       	sbc	r30, r20
    1b62:	f5 0b       	sbc	r31, r21

00001b64 <__udivmodsi4_ep>:
    1b64:	66 1f       	adc	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	88 1f       	adc	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	1a 94       	dec	r1
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <__udivmodsi4_loop>
    1b70:	60 95       	com	r22
    1b72:	70 95       	com	r23
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	bd 01       	movw	r22, r26
    1b7e:	cf 01       	movw	r24, r30
    1b80:	08 95       	ret

00001b82 <__eerd_block_x16a4>:
    1b82:	e0 ec       	ldi	r30, 0xC0	; 192
    1b84:	f1 e0       	ldi	r31, 0x01	; 1
    1b86:	a7 85       	ldd	r26, Z+15	; 0x0f
    1b88:	a7 fd       	sbrc	r26, 7
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <__eerd_block_x16a4+0x4>
    1b8c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b8e:	a8 60       	ori	r26, 0x08	; 8
    1b90:	a4 87       	std	Z+12, r26	; 0x0c
    1b92:	60 50       	subi	r22, 0x00	; 0
    1b94:	70 4f       	sbci	r23, 0xF0	; 240
    1b96:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <memcpy>

00001b9a <__eerd_byte_x16a4>:
    1b9a:	03 d0       	rcall	.+6      	; 0x1ba2 <eeprom_mapen>
    1b9c:	80 81       	ld	r24, Z
    1b9e:	99 27       	eor	r25, r25
    1ba0:	08 95       	ret

00001ba2 <eeprom_mapen>:
    1ba2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ba4:	f1 e0       	ldi	r31, 0x01	; 1
    1ba6:	37 85       	ldd	r19, Z+15	; 0x0f
    1ba8:	37 fd       	sbrc	r19, 7
    1baa:	fd cf       	rjmp	.-6      	; 0x1ba6 <eeprom_mapen+0x4>
    1bac:	34 85       	ldd	r19, Z+12	; 0x0c
    1bae:	38 60       	ori	r19, 0x08	; 8
    1bb0:	34 87       	std	Z+12, r19	; 0x0c
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e0 50       	subi	r30, 0x00	; 0
    1bb6:	f0 4f       	sbci	r31, 0xF0	; 240
    1bb8:	08 95       	ret

00001bba <__eewr_block_x16a4>:
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <__eewr_block_x16a4+0xc>
    1bc0:	2d 91       	ld	r18, X+
    1bc2:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__eewr_r18_x16a4>
    1bc6:	41 50       	subi	r20, 0x01	; 1
    1bc8:	50 40       	sbci	r21, 0x00	; 0
    1bca:	d0 f7       	brcc	.-12     	; 0x1bc0 <__eewr_block_x16a4+0x6>
    1bcc:	08 95       	ret

00001bce <__eewr_byte_x16a4>:
    1bce:	26 2f       	mov	r18, r22

00001bd0 <__eewr_r18_x16a4>:
    1bd0:	e0 ec       	ldi	r30, 0xC0	; 192
    1bd2:	f1 e0       	ldi	r31, 0x01	; 1
    1bd4:	37 85       	ldd	r19, Z+15	; 0x0f
    1bd6:	37 fd       	sbrc	r19, 7
    1bd8:	fd cf       	rjmp	.-6      	; 0x1bd4 <__eewr_r18_x16a4+0x4>
    1bda:	34 85       	ldd	r19, Z+12	; 0x0c
    1bdc:	37 7f       	andi	r19, 0xF7	; 247
    1bde:	34 87       	std	Z+12, r19	; 0x0c
    1be0:	37 85       	ldd	r19, Z+15	; 0x0f
    1be2:	31 ff       	sbrs	r19, 1
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <__eewr_r18_x16a4+0x28>
    1be6:	36 e3       	ldi	r19, 0x36	; 54
    1be8:	32 87       	std	Z+10, r19	; 0x0a
    1bea:	38 ed       	ldi	r19, 0xD8	; 216
    1bec:	34 bf       	out	0x34, r19	; 52
    1bee:	31 e0       	ldi	r19, 0x01	; 1
    1bf0:	33 87       	std	Z+11, r19	; 0x0b
    1bf2:	37 85       	ldd	r19, Z+15	; 0x0f
    1bf4:	37 fd       	sbrc	r19, 7
    1bf6:	fd cf       	rjmp	.-6      	; 0x1bf2 <__eewr_r18_x16a4+0x22>
    1bf8:	33 e3       	ldi	r19, 0x33	; 51
    1bfa:	32 87       	std	Z+10, r19	; 0x0a
    1bfc:	80 83       	st	Z, r24
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	12 82       	std	Z+2, r1	; 0x02
    1c02:	24 83       	std	Z+4, r18	; 0x04
    1c04:	25 e3       	ldi	r18, 0x35	; 53
    1c06:	22 87       	std	Z+10, r18	; 0x0a
    1c08:	28 ed       	ldi	r18, 0xD8	; 216
    1c0a:	31 e0       	ldi	r19, 0x01	; 1
    1c0c:	24 bf       	out	0x34, r18	; 52
    1c0e:	33 87       	std	Z+11, r19	; 0x0b
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	08 95       	ret

00001c14 <memcpy>:
    1c14:	fb 01       	movw	r30, r22
    1c16:	dc 01       	movw	r26, r24
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <memcpy+0xa>
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	41 50       	subi	r20, 0x01	; 1
    1c20:	50 40       	sbci	r21, 0x00	; 0
    1c22:	d8 f7       	brcc	.-10     	; 0x1c1a <memcpy+0x6>
    1c24:	08 95       	ret

00001c26 <_exit>:
    1c26:	f8 94       	cli

00001c28 <__stop_program>:
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <__stop_program>
