
Neurotrigger3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c98  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00001c98  00001d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  00802012  00802012  00001d5e  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00001d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000b7c  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000275  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001a0  00000000  00000000  00002b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000464c  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d95  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001478  00000000  00000000  000080d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000894  00000000  00000000  00009554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e7c  00000000  00000000  00009de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001592  00000000  00000000  0000ac64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  0000c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_2>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_58>
      ec:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_59>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_68>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	df e2       	ldi	r29, 0x2F	; 47
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	10 e2       	ldi	r17, 0x20	; 32
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e8 e9       	ldi	r30, 0x98	; 152
     18c:	fc e1       	ldi	r31, 0x1C	; 28
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 31       	cpi	r26, 0x12	; 18
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a2 e1       	ldi	r26, 0x12	; 18
     19e:	b0 e2       	ldi	r27, 0x20	; 32
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	aa 32       	cpi	r26, 0x2A	; 42
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
     1ae:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <ac_output>:
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
	ac_output(ENABLE); //AC output to pin PA7;
}

void ac_output(uint8_t config){
	switch(config){
     1b6:	89 32       	cpi	r24, 0x29	; 41
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <ac_output+0xc>
	case DISABLE:
		ACA.CTRLA = 0x00; //NO AC output to pin PA7;
     1ba:	e0 e8       	ldi	r30, 0x80	; 128
     1bc:	f3 e0       	ldi	r31, 0x03	; 3
     1be:	14 82       	std	Z+4, r1	; 0x04
		break;
     1c0:	08 95       	ret
	case ENABLE:
	default:
		ACA.CTRLA = 0x01; //AC output to pin PA7;	
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e0 e8       	ldi	r30, 0x80	; 128
     1c6:	f3 e0       	ldi	r31, 0x03	; 3
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	08 95       	ret

000001cc <init_ac>:

//Handles the Analog Comparator

void init_ac(){
	//hysterysis options: 0mV, 20mV, 50mV
	ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1cc:	e0 e8       	ldi	r30, 0x80	; 128
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	80 83       	st	Z, r24
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	82 83       	std	Z+2, r24	; 0x02
	ac_output(ENABLE); //AC output to pin PA7;
     1d8:	8a e2       	ldi	r24, 0x2A	; 42
     1da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
}
     1de:	08 95       	ret

000001e0 <ac_hysteresis>:
//#############################################################
//## ACs
//#############################################################

void ac_hysteresis(uint8_t amount){
	switch(amount){
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <ac_hysteresis+0x10>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	41 f4       	brne	.+16     	; 0x1f8 <ac_hysteresis+0x18>
	case LARGE:
		ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	80 93 80 03 	sts	0x0380, r24
		break;
     1ee:	08 95       	ret
	case SMALL:
		ACA.AC0CTRL = B8(00001011); //enable AC0; 20mV hysterysis; no interrupts; high-speed mode
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	80 93 80 03 	sts	0x0380, r24
		break;
     1f6:	08 95       	ret
	case NONE:
	default:
		ACA.AC0CTRL = B8(00001001); //enable AC0; no hysterysis; no interrupts; high-speed mode		
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	80 93 80 03 	sts	0x0380, r24
     1fe:	08 95       	ret

00000200 <ac_polarity>:

//Sets output polarity (e.g. active high or active low output)
void ac_polarity(uint8_t polarity){
	//reverse the comparator inputs to reverse the output polarity
	//pin I/O functions are overridden by the AC unit so I/O inversion is ineffective
	if (polarity == IDLE_HIGH){
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	29 f4       	brne	.+10     	; 0x20e <ac_polarity+0xe>
		ACA.AC0MUXCTRL = B8(00101000); //Pos. input = PA5; Neg. Input = PA0; 
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	e0 e8       	ldi	r30, 0x80	; 128
     208:	f3 e0       	ldi	r31, 0x03	; 3
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	08 95       	ret
	}
	else {
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	08 95       	ret

00000218 <service_ac>:
	}
}

void service_ac(){	
}
     218:	08 95       	ret

0000021a <init_adc>:
#include "adc.h"

//Handles the ADC

void init_adc(){
	ADCA.REFCTRL = B8(00010000); //Use AVCC/1.6 = 2.063V as reference (highest allowed)
     21a:	e0 e0       	ldi	r30, 0x00	; 0
     21c:	f2 e0       	ldi	r31, 0x02	; 2
     21e:	80 e1       	ldi	r24, 0x10	; 16
     220:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = B8(00000000); //12bit-right adjusted; One-shot conversion
     222:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 83       	st	Z, r25
	ADCA.CH0.MUXCTRL = B8(00010000); //CH0 converts from PA2
     228:	81 a3       	lds	r24, 0x51
	ADCA.CH1.MUXCTRL = B8(00011000); //CH1 converts from PA3
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	81 a7       	lds	r24, 0x71
}
     22e:	08 95       	ret

00000230 <adc_ch0>:
//#############################################################

//Performs a single 12-bit conversion on ADC CH0
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch0(){
	ADCA.CH0.CTRL = B8(10000001); //Single ended input mode; No gain
     230:	81 e8       	ldi	r24, 0x81	; 129
     232:	e0 e0       	ldi	r30, 0x00	; 0
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	80 a3       	lds	r24, 0x50
	while(ADCA.CH0.INTFLAGS == 0x00); //wait for conversion to complete
     238:	83 a1       	lds	r24, 0x43
     23a:	88 23       	and	r24, r24
     23c:	e9 f3       	breq	.-6      	; 0x238 <adc_ch0+0x8>
	ADCA.CH0.INTFLAGS = 0x01; //clear the conversion complete flag
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	83 a3       	lds	r24, 0x53
	return ADCA.CH0.RES;
     246:	84 a1       	lds	r24, 0x44
     248:	95 a1       	lds	r25, 0x45
}
     24a:	08 95       	ret

0000024c <adc_ch1>:

//Performs a single 12-bit conversion on ADC CH1
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch1(){
	ADCA.CH1.CTRL = B8(10000001); //Single ended input mode; No gain
     24c:	81 e8       	ldi	r24, 0x81	; 129
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	80 a7       	lds	r24, 0x70
	while(ADCA.CH1.INTFLAGS == 0x00); //wait for conversion to complete
     254:	83 a5       	lds	r24, 0x63
     256:	88 23       	and	r24, r24
     258:	e9 f3       	breq	.-6      	; 0x254 <adc_ch1+0x8>
	ADCA.CH1.INTFLAGS = 0x01; //clear the conversion complete flag
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	83 a7       	lds	r24, 0x73
	return ADCA.CH1.RES;
     262:	84 a5       	lds	r24, 0x64
     264:	95 a5       	lds	r25, 0x65
}
     266:	08 95       	ret

00000268 <adc_ch0_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     27a:	10 92 19 20 	sts	0x2019, r1
     27e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	9f ef       	ldi	r25, 0xFF	; 255
     286:	80 93 1b 20 	sts	0x201B, r24
     28a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     28e:	01 15       	cp	r16, r1
     290:	11 05       	cpc	r17, r1
     292:	49 f1       	breq	.+82     	; 0x2e6 <adc_ch0_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     298:	cc 24       	eor	r12, r12
     29a:	dd 24       	eor	r13, r13
     29c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch0();
     29e:	0e 94 18 01 	call	0x230	; 0x230 <adc_ch0>
		sum += intermediate; //for averaging
     2a2:	ac 01       	movw	r20, r24
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	c4 0e       	add	r12, r20
     2aa:	d5 1e       	adc	r13, r21
     2ac:	e6 1e       	adc	r14, r22
     2ae:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     2b0:	20 91 1b 20 	lds	r18, 0x201B
     2b4:	30 91 1c 20 	lds	r19, 0x201C
     2b8:	82 17       	cp	r24, r18
     2ba:	93 07       	cpc	r25, r19
     2bc:	20 f4       	brcc	.+8      	; 0x2c6 <adc_ch0_stats+0x5e>
     2be:	80 93 1b 20 	sts	0x201B, r24
     2c2:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     2c6:	20 91 19 20 	lds	r18, 0x2019
     2ca:	30 91 1a 20 	lds	r19, 0x201A
     2ce:	28 17       	cp	r18, r24
     2d0:	39 07       	cpc	r19, r25
     2d2:	20 f4       	brcc	.+8      	; 0x2dc <adc_ch0_stats+0x74>
     2d4:	80 93 19 20 	sts	0x2019, r24
     2d8:	90 93 1a 20 	sts	0x201A, r25
		i++;
     2dc:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     2de:	c0 17       	cp	r28, r16
     2e0:	d1 07       	cpc	r29, r17
     2e2:	e9 f6       	brne	.-70     	; 0x29e <adc_ch0_stats+0x36>
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <adc_ch0_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     2e6:	cc 24       	eor	r12, r12
     2e8:	dd 24       	eor	r13, r13
     2ea:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     2ec:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     2f0:	98 01       	movw	r18, r16
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__udivmodsi4>
     2fe:	20 93 17 20 	sts	0x2017, r18
     302:	30 93 18 20 	sts	0x2018, r19
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <adc_ch1_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     32a:	10 92 19 20 	sts	0x2019, r1
     32e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	80 93 1b 20 	sts	0x201B, r24
     33a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     33e:	01 15       	cp	r16, r1
     340:	11 05       	cpc	r17, r1
     342:	49 f1       	breq	.+82     	; 0x396 <adc_ch1_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     348:	cc 24       	eor	r12, r12
     34a:	dd 24       	eor	r13, r13
     34c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch1();
     34e:	0e 94 26 01 	call	0x24c	; 0x24c <adc_ch1>
		sum += intermediate; //for averaging
     352:	ac 01       	movw	r20, r24
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	c4 0e       	add	r12, r20
     35a:	d5 1e       	adc	r13, r21
     35c:	e6 1e       	adc	r14, r22
     35e:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     360:	20 91 1b 20 	lds	r18, 0x201B
     364:	30 91 1c 20 	lds	r19, 0x201C
     368:	82 17       	cp	r24, r18
     36a:	93 07       	cpc	r25, r19
     36c:	20 f4       	brcc	.+8      	; 0x376 <adc_ch1_stats+0x5e>
     36e:	80 93 1b 20 	sts	0x201B, r24
     372:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     376:	20 91 19 20 	lds	r18, 0x2019
     37a:	30 91 1a 20 	lds	r19, 0x201A
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	20 f4       	brcc	.+8      	; 0x38c <adc_ch1_stats+0x74>
     384:	80 93 19 20 	sts	0x2019, r24
     388:	90 93 1a 20 	sts	0x201A, r25
		i++;
     38c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     38e:	c0 17       	cp	r28, r16
     390:	d1 07       	cpc	r29, r17
     392:	e9 f6       	brne	.-70     	; 0x34e <adc_ch1_stats+0x36>
     394:	03 c0       	rjmp	.+6      	; 0x39c <adc_ch1_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     396:	cc 24       	eor	r12, r12
     398:	dd 24       	eor	r13, r13
     39a:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     39c:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     3a0:	98 01       	movw	r18, r16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__udivmodsi4>
     3ae:	20 93 17 20 	sts	0x2017, r18
     3b2:	30 93 18 20 	sts	0x2018, r19
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <service_adc>:

void service_adc(){	
}
     3c8:	08 95       	ret

000003ca <init_dac>:
#include "dac.h"

//Handles the DAC for PORTB

void init_dac(){
	DACB.CTRLA = B8(00001101); //enable DAC and both output pins
     3ca:	e0 e2       	ldi	r30, 0x20	; 32
     3cc:	f3 e0       	ldi	r31, 0x03	; 3
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	80 83       	st	Z, r24
	DACB.CTRLB = B8(01000000); //enable sample-and-hold to allow for independent output operation
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = B8(00001000); //use AVCC as the reference
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	82 83       	std	Z+2, r24	; 0x02
}
     3da:	08 95       	ret

000003dc <dac_output0>:

void dac_output0(uint8_t config){
	switch(config){
     3dc:	89 32       	cpi	r24, 0x29	; 41
     3de:	31 f4       	brne	.+12     	; 0x3ec <dac_output0+0x10>
	case DISABLE:
		DACB.CTRLA = DACB.CTRLA & B8(11111011); //NO DAC output to pin PB2
     3e0:	e0 e2       	ldi	r30, 0x20	; 32
     3e2:	f3 e0       	ldi	r31, 0x03	; 3
     3e4:	80 81       	ld	r24, Z
     3e6:	8b 7f       	andi	r24, 0xFB	; 251
     3e8:	80 83       	st	Z, r24
		break;
     3ea:	08 95       	ret
	case ENABLE:
	default:
		DACB.CTRLA = DACB.CTRLA | B8(00000100); //DAC output to pin PB2
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f3 e0       	ldi	r31, 0x03	; 3
     3f0:	80 81       	ld	r24, Z
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 83       	st	Z, r24
     3f6:	08 95       	ret

000003f8 <dac_output1>:
	}
}

void dac_output1(uint8_t config){
	switch(config){
     3f8:	89 32       	cpi	r24, 0x29	; 41
     3fa:	31 f4       	brne	.+12     	; 0x408 <dac_output1+0x10>
		case DISABLE:
		DACB.CTRLA = DACB.CTRLA & B8(11110111); //NO DAC output to pin PB3
     3fc:	e0 e2       	ldi	r30, 0x20	; 32
     3fe:	f3 e0       	ldi	r31, 0x03	; 3
     400:	80 81       	ld	r24, Z
     402:	87 7f       	andi	r24, 0xF7	; 247
     404:	80 83       	st	Z, r24
		break;
     406:	08 95       	ret
		case ENABLE:
		default:
		DACB.CTRLA = DACB.CTRLA | B8(00001000); //DAC output to pin PB3
     408:	e0 e2       	ldi	r30, 0x20	; 32
     40a:	f3 e0       	ldi	r31, 0x03	; 3
     40c:	80 81       	ld	r24, Z
     40e:	88 60       	ori	r24, 0x08	; 8
     410:	80 83       	st	Z, r24
     412:	08 95       	ret

00000414 <dac_out0>:
//## DACs
//#############################################################

//DAC's are 12 bit valued -- numbers outside this range will overflow silently
uint16_t dac_out0(uint16_t value){
	DACB.CH0DATA = value; 
     414:	e0 e2       	ldi	r30, 0x20	; 32
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	80 8f       	std	Z+24, r24	; 0x18
     41a:	91 8f       	std	Z+25, r25	; 0x19
	return DACB.CH0DATA;
     41c:	80 8d       	ldd	r24, Z+24	; 0x18
     41e:	91 8d       	ldd	r25, Z+25	; 0x19
}	
     420:	08 95       	ret

00000422 <dac_out1>:
uint16_t dac_out1(uint16_t value){
	DACB.CH1DATA = value;
     422:	e0 e2       	ldi	r30, 0x20	; 32
     424:	f3 e0       	ldi	r31, 0x03	; 3
     426:	82 8f       	std	Z+26, r24	; 0x1a
     428:	93 8f       	std	Z+27, r25	; 0x1b
	return DACB.CH1DATA;
     42a:	82 8d       	ldd	r24, Z+26	; 0x1a
     42c:	93 8d       	ldd	r25, Z+27	; 0x1b
}	
     42e:	08 95       	ret

00000430 <dac_read0>:

uint16_t dac_read0() {return DACB.CH0DATA;}
     430:	e0 e2       	ldi	r30, 0x20	; 32
     432:	f3 e0       	ldi	r31, 0x03	; 3
     434:	80 8d       	ldd	r24, Z+24	; 0x18
     436:	91 8d       	ldd	r25, Z+25	; 0x19
     438:	08 95       	ret

0000043a <dac_read1>:
uint16_t dac_read1() {return DACB.CH1DATA;}
     43a:	e0 e2       	ldi	r30, 0x20	; 32
     43c:	f3 e0       	ldi	r31, 0x03	; 3
     43e:	82 8d       	ldd	r24, Z+26	; 0x1a
     440:	93 8d       	ldd	r25, Z+27	; 0x1b
     442:	08 95       	ret

00000444 <service_dac>:

void service_dac(){	
}
     444:	08 95       	ret

00000446 <eeprom_save>:
//#############################################################
//## API
//#############################################################

void eeprom_save(){
	eeprom_write_block((void*)&dac_background, (void*)&nv_dac_background, 2); //multiple size by 2 since uint16_t = 2 bytes
     446:	8f e1       	ldi	r24, 0x1F	; 31
     448:	90 e2       	ldi	r25, 0x20	; 32
     44a:	62 e0       	ldi	r22, 0x02	; 2
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	42 e0       	ldi	r20, 0x02	; 2
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__eewr_block_x32a4>
	eeprom_write_block((void*)&dac_threshold, (void*)&nv_dac_threshold, 2); //multiple size by 2 since uint16_t = 2 bytes
     456:	8d e1       	ldi	r24, 0x1D	; 29
     458:	90 e2       	ldi	r25, 0x20	; 32
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	42 e0       	ldi	r20, 0x02	; 2
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__eewr_block_x32a4>
}
     466:	08 95       	ret

00000468 <eeprom_restore>:

void eeprom_restore(){
	eeprom_read_block((void*)&dac_background, (void*)&nv_dac_background, 2);
     468:	8f e1       	ldi	r24, 0x1F	; 31
     46a:	90 e2       	ldi	r25, 0x20	; 32
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	42 e0       	ldi	r20, 0x02	; 2
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__eerd_block_x32a4>
	eeprom_read_block((void*)&dac_threshold, (void*)&nv_dac_threshold, 2);
     478:	8d e1       	ldi	r24, 0x1D	; 29
     47a:	90 e2       	ldi	r25, 0x20	; 32
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	42 e0       	ldi	r20, 0x02	; 2
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__eerd_block_x32a4>
	dac_out0(dac_background);
     488:	80 91 1f 20 	lds	r24, 0x201F
     48c:	90 91 20 20 	lds	r25, 0x2020
     490:	0e 94 0a 02 	call	0x414	; 0x414 <dac_out0>
	dac_out1(dac_threshold);
     494:	80 91 1d 20 	lds	r24, 0x201D
     498:	90 91 1e 20 	lds	r25, 0x201E
     49c:	0e 94 11 02 	call	0x422	; 0x422 <dac_out1>
}
     4a0:	08 95       	ret

000004a2 <init_eeprom>:
//#############################################################
//## Initialization
//#############################################################

void init_eeprom(){
	eeprom_restore();
     4a2:	0e 94 34 02 	call	0x468	; 0x468 <eeprom_restore>
}
     4a6:	08 95       	ret

000004a8 <eeprom_read>:
	dac_out1(dac_threshold);
}

//mostly for debugging
uint8_t eeprom_read(){
	return eeprom_read_byte(&nv_dac_background);
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__eerd_byte_x32a4>
}
     4b0:	08 95       	ret

000004b2 <service_eeprom>:
//#############################################################

//2ms Service Loop -- Call once every 2ms
void service_eeprom(){
	
}
     4b2:	08 95       	ret

000004b4 <main>:
	int8_t updown;
	uint16_t push_counter = 0;
	uint8_t push_blinker = 0;

	//[LED's, Button, & Switches]
		init_ui(); //init LED's first so that they are available for debugging
     4b4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <init_ui>

	//[CPU CLOCK]
		//Boot up and configure oscillator
			OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
     4b8:	e0 e5       	ldi	r30, 0x50	; 80
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	82 e2       	ldi	r24, 0x22	; 34
     4be:	82 83       	std	Z+2, r24	; 0x02
			OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     4c0:	8b e0       	ldi	r24, 0x0B	; 11
     4c2:	80 83       	st	Z, r24
		//Wait for stability
			led_on(LED_LEFT);
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <led_on>
			//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
			while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
     4ca:	e0 e5       	ldi	r30, 0x50	; 80
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	81 81       	ldd	r24, Z+1	; 0x01
     4d0:	8b 30       	cpi	r24, 0x0B	; 11
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <main+0x1a>
			led_off(LED_LEFT);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
		//Configure 
			OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     4da:	e0 e5       	ldi	r30, 0x50	; 80
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	86 83       	std	Z+6, r24	; 0x06
			DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 60 00 	sts	0x0060, r24
		//Switch system clock over to stable RC oscillator
			//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
			//----REQUIRES CONFIGURATION PROTECTION REGISTER 
			CCP = CCP_IOREG_gc; //disable change protection for IO register
     4e8:	98 ed       	ldi	r25, 0xD8	; 216
     4ea:	94 bf       	out	0x34, r25	; 52
			CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     4ec:	80 93 40 00 	sts	0x0040, r24
			OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	80 83       	st	Z, r24
		//Now running live at 32MHz		

	//[UARTs]
		init_uart(&uctrl, BAUD_115200);
     4f4:	80 ea       	ldi	r24, 0xA0	; 160
     4f6:	9a e0       	ldi	r25, 0x0A	; 10
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 08 06 	call	0xc10	; 0xc10 <init_uart>
		init_uart_buffer(&uctrl);
     4fe:	80 ea       	ldi	r24, 0xA0	; 160
     500:	9a e0       	ldi	r25, 0x0A	; 10
     502:	0e 94 91 0c 	call	0x1922	; 0x1922 <init_uart_buffer>
		init_uart(&udata, BAUD_115200);
     506:	80 eb       	ldi	r24, 0xB0	; 176
     508:	99 e0       	ldi	r25, 0x09	; 9
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	0e 94 08 06 	call	0xc10	; 0xc10 <init_uart>

	//[ADC]
		init_adc();
     510:	0e 94 0d 01 	call	0x21a	; 0x21a <init_adc>

	//[DAC]
		//dac0 is background level
		//dac1 is threshold level
		init_dac();
     514:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_dac>

	//[AC]
		init_ac();
     518:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>

	//[PWM] 
		init_pwm(); // and serial trigger
     51c:	0e 94 48 03 	call	0x690	; 0x690 <init_pwm>

	//[EEPROM]
		init_eeprom();
     520:	0e 94 51 02 	call	0x4a2	; 0x4a2 <init_eeprom>

	//[Realtime Loop Timer]
		//Use PortC's T/C0
		TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
     524:	e0 e0       	ldi	r30, 0x00	; 0
     526:	f8 e0       	ldi	r31, 0x08	; 8
     528:	87 e0       	ldi	r24, 0x07	; 7
     52a:	80 83       	st	Z, r24
		//TCC0.PER = 31; //992uS per timer period
		TCC0.PER = 61;
     52c:	8d e3       	ldi	r24, 0x3D	; 61
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	86 a3       	lds	r24, 0x56
     532:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
		PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
     534:	87 e8       	ldi	r24, 0x87	; 135
     536:	e0 ea       	ldi	r30, 0xA0	; 160
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	82 83       	std	Z+2, r24	; 0x02
		sei(); //ENABLE INTERRUPTS AND GO LIVE!
     53c:	78 94       	sei

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
		led_off(LED_LEFT);
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
		led_off(LED_MID);
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>

		while(1){
			led_dim(LED_LEFT, blah);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <led_dim>
			
			blah += updown;			
     552:	12 e0       	ldi	r17, 0x02	; 2
int main(void){
	uint8_t blah;
	uint16_t blah16;
	int8_t updown;
	uint16_t push_counter = 0;
	uint8_t push_blinker = 0;
     554:	ee 24       	eor	r14, r14

int main(void){
	uint8_t blah;
	uint16_t blah16;
	int8_t updown;
	uint16_t push_counter = 0;
     556:	cc 24       	eor	r12, r12
     558:	dd 24       	eor	r13, r13
		sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
     55a:	01 e0       	ldi	r16, 0x01	; 1
			if (STATE_Button == BUTTON_PUSHED){
				if (pwm_mode() == false){
					//DIODE mode
					if (STATE_Autolevel == AUTOLEVEL_IDLE){
						if (++push_counter >= EEPROM_HOLD_TO_SAVE_TIME){
							STATE_Autolevel = AUTOLEVEL_DIODE;
     55c:	ff 24       	eor	r15, r15
     55e:	f3 94       	inc	r15
				//Write to permanent memory
					eeprom_save();
				//We're done!
					led_off(LED_LEFT);
					led_off(LED_MID);
					STATE_Autolevel = AUTOLEVEL_DONE;
     560:	0f 2e       	mov	r0, r31
     562:	f5 e0       	ldi	r31, 0x05	; 5
     564:	bf 2e       	mov	r11, r31
     566:	f0 2d       	mov	r31, r0
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	d8 e0       	ldi	r29, 0x08	; 8
     56c:	01 c0       	rjmp	.+2      	; 0x570 <main+0xbc>
		while(1){
			led_dim(LED_LEFT, blah);
			
			blah += updown;			
			if ((blah == 255) || (blah == 0)) {
				updown = -1 * updown;
     56e:	01 95       	neg	r16
			}
			
			blah16++;
			
			service_pwm();
     570:	0e 94 5a 05 	call	0xab4	; 0xab4 <service_pwm>
			service_switches();
     574:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <service_switches>
			service_leds();
     578:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <service_leds>
			service_button();
     57c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <service_button>
			service_uart_buffer();
     580:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <service_uart_buffer>
			service_eeprom();
     584:	0e 94 59 02 	call	0x4b2	; 0x4b2 <service_eeprom>
			
			if (STATE_Button == BUTTON_PUSHED){
     588:	80 91 15 20 	lds	r24, 0x2015
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	c9 f4       	brne	.+50     	; 0x5c2 <main+0x10e>
				if (pwm_mode() == false){
     590:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pwm_mode>
     594:	88 23       	and	r24, r24
     596:	b9 f4       	brne	.+46     	; 0x5c6 <main+0x112>
					//DIODE mode
					if (STATE_Autolevel == AUTOLEVEL_IDLE){
     598:	80 91 12 20 	lds	r24, 0x2012
     59c:	88 23       	and	r24, r24
     59e:	99 f4       	brne	.+38     	; 0x5c6 <main+0x112>
						if (++push_counter >= EEPROM_HOLD_TO_SAVE_TIME){
     5a0:	08 94       	sec
     5a2:	c1 1c       	adc	r12, r1
     5a4:	d1 1c       	adc	r13, r1
     5a6:	88 ee       	ldi	r24, 0xE8	; 232
     5a8:	c8 16       	cp	r12, r24
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	d8 06       	cpc	r13, r24
     5ae:	58 f0       	brcs	.+22     	; 0x5c6 <main+0x112>
							STATE_Autolevel = AUTOLEVEL_DIODE;
     5b0:	f0 92 12 20 	sts	0x2012, r15
							led_on(LED_LEFT);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <led_on>
							led_on(LED_MID);						
     5ba:	8f 2d       	mov	r24, r15
     5bc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <led_on>
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <main+0x112>
					//AUDIO mode
					//--deprecated, no longer supported.
				}					
			}
			else{
				push_counter = 0;
     5c2:	cc 24       	eor	r12, r12
     5c4:	dd 24       	eor	r13, r13

			//PERFORM AUTO-LEVELING!
				//adc is 503uV resolution
				//dac is 806uV resolution
				//ergo ADC -> DAC values must be adjusted by: (x*0.625 = x*5/8)
			switch(STATE_Autolevel){
     5c6:	80 91 12 20 	lds	r24, 0x2012
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <main+0x122>
     5ce:	85 30       	cpi	r24, 0x05	; 5
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <main+0x120>
     5d2:	4f c0       	rjmp	.+158    	; 0x672 <main+0x1be>
     5d4:	36 c0       	rjmp	.+108    	; 0x642 <main+0x18e>
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
				//Set background level
					dac_background = (adc_avg*5)/8 + 170; //background (x*0.625 = x*5/8)
     5de:	80 91 17 20 	lds	r24, 0x2017
     5e2:	90 91 18 20 	lds	r25, 0x2018
     5e6:	9c 01       	movw	r18, r24
     5e8:	22 0f       	add	r18, r18
     5ea:	33 1f       	adc	r19, r19
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	96 95       	lsr	r25
     5fa:	87 95       	ror	r24
     5fc:	96 95       	lsr	r25
     5fe:	87 95       	ror	r24
     600:	9c 01       	movw	r18, r24
     602:	26 55       	subi	r18, 0x56	; 86
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	20 93 1f 20 	sts	0x201F, r18
     60a:	30 93 20 20 	sts	0x2020, r19
					dac_threshold = dac_background + 200;
     60e:	8e 58       	subi	r24, 0x8E	; 142
     610:	9e 4f       	sbci	r25, 0xFE	; 254
     612:	80 93 1d 20 	sts	0x201D, r24
     616:	90 93 1e 20 	sts	0x201E, r25
					dac_out0(dac_background); 
     61a:	c9 01       	movw	r24, r18
     61c:	0e 94 0a 02 	call	0x414	; 0x414 <dac_out0>
					dac_out1(dac_threshold);
     620:	80 91 1d 20 	lds	r24, 0x201D
     624:	90 91 1e 20 	lds	r25, 0x201E
     628:	0e 94 11 02 	call	0x422	; 0x422 <dac_out1>
				//Write to permanent memory
					eeprom_save();
     62c:	0e 94 23 02 	call	0x446	; 0x446 <eeprom_save>
				//We're done!
					led_off(LED_LEFT);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
					led_off(LED_MID);
     636:	8f 2d       	mov	r24, r15
     638:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
					STATE_Autolevel = AUTOLEVEL_DONE;
     63c:	b0 92 12 20 	sts	0x2012, r11
				break;
     640:	18 c0       	rjmp	.+48     	; 0x672 <main+0x1be>
			case AUTOLEVEL_DONE:
				if (STATE_Button == BUTTON_RELEASED){
     642:	80 91 15 20 	lds	r24, 0x2015
     646:	82 30       	cpi	r24, 0x02	; 2
     648:	49 f4       	brne	.+18     	; 0x65c <main+0x1a8>
					STATE_Autolevel = AUTOLEVEL_IDLE;
     64a:	10 92 12 20 	sts	0x2012, r1
					led_off(LED_LEFT);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
					led_off(LED_MID);
     654:	8f 2d       	mov	r24, r15
     656:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
     65a:	0b c0       	rjmp	.+22     	; 0x672 <main+0x1be>
				}
				else {
					if (++push_blinker > 20){
     65c:	e3 94       	inc	r14
     65e:	84 e1       	ldi	r24, 0x14	; 20
     660:	8e 15       	cp	r24, r14
     662:	38 f4       	brcc	.+14     	; 0x672 <main+0x1be>
						led_toggle(LED_LEFT);
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <led_toggle>
						led_toggle(LED_MID);
     66a:	8f 2d       	mov	r24, r15
     66c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <led_toggle>
						push_blinker = 0;
     670:	ee 24       	eor	r14, r14
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     672:	8c 85       	ldd	r24, Y+12	; 0x0c
     674:	80 ff       	sbrs	r24, 0
     676:	fd cf       	rjmp	.-6      	; 0x672 <main+0x1be>
			TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     678:	fc 86       	std	Y+12, r15	; 0x0c
		updown = 1;
		led_off(LED_LEFT);
		led_off(LED_MID);

		while(1){
			led_dim(LED_LEFT, blah);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	61 2f       	mov	r22, r17
     67e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <led_dim>
			
			blah += updown;			
     682:	10 0f       	add	r17, r16
			if ((blah == 255) || (blah == 0)) {
     684:	81 2f       	mov	r24, r17
     686:	81 50       	subi	r24, 0x01	; 1
     688:	8e 3f       	cpi	r24, 0xFE	; 254
     68a:	08 f0       	brcs	.+2      	; 0x68e <main+0x1da>
     68c:	70 cf       	rjmp	.-288    	; 0x56e <main+0xba>
     68e:	70 cf       	rjmp	.-288    	; 0x570 <main+0xbc>

00000690 <init_pwm>:

//Initialize the PWM module
void init_pwm(){
	//no init needed for pwm functions. We initialize when the mode is activated.
	//but triggering does
	trigger_target = TRIGGER_TARGET;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e2       	ldi	r25, 0x20	; 32
     694:	80 93 26 22 	sts	0x2226, r24
     698:	90 93 27 22 	sts	0x2227, r25
}
     69c:	08 95       	ret

0000069e <pwm_enable>:

void pwm_enable(){
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = B8(00000101); //Timer Clock source is 32MHz/64; ~130ms Range @ 2uS resolution
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	fa e0       	ldi	r31, 0x0A	; 10
     6a6:	85 e0       	ldi	r24, 0x05	; 5
     6a8:	80 83       	st	Z, r24
		TCE0.CTRLB = 0x00; //Turn off output pins (for both input capture and waveform generation)
     6aa:	11 82       	std	Z+1, r1	; 0x01
		TCE0.CTRLC = 0x00; //Only for the compare output unit
     6ac:	12 82       	std	Z+2, r1	; 0x02
		TCE0.CTRLD = B8(00000000); //Disable Event Unit
     6ae:	13 82       	std	Z+3, r1	; 0x03
		TCE0.CTRLE = 0x00; //Leave the counter in 16 (rather than 8) bit mode
     6b0:	14 82       	std	Z+4, r1	; 0x04

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; value set by calibration routine;
		dac_output0(ENABLE);
     6b2:	8a e2       	ldi	r24, 0x2A	; 42
     6b4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
		dac_out1(2000); //about mid scale
     6b8:	80 ed       	ldi	r24, 0xD0	; 208
     6ba:	97 e0       	ldi	r25, 0x07	; 7
     6bc:	0e 94 11 02 	call	0x422	; 0x422 <dac_out1>
		
	//ANALOG COMPARATOR
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5 (DAC1); 
     6c0:	c0 e8       	ldi	r28, 0x80	; 128
     6c2:	d3 e0       	ldi	r29, 0x03	; 3
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	8a 83       	std	Y+2, r24	; 0x02
		//ACA.CTRLB = 20; //VCC Scaler = VCC/2 = 1.65V
		ac_output(DISABLE); //Turn off PA7 output pin (we'll use it directly to control the external peripheral)
     6c8:	89 e2       	ldi	r24, 0x29	; 41
     6ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
		ACA.AC0CTRL = B8(00111101); //enable AC0; 50mV hysterysis; high priority interrupt on edge toggle; high-speed mode
     6ce:	8d e3       	ldi	r24, 0x3D	; 61
     6d0:	88 83       	st	Y, r24
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     6d2:	e0 e0       	ldi	r30, 0x00	; 0
     6d4:	f6 e0       	ldi	r31, 0x06	; 6
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRSET = B8(10000000); //Set PA7 as output (should be anyway)
     6da:	81 83       	std	Z+1, r24	; 0x01

	//BUTTON
		STATE_Autolevel = AUTOLEVEL_IDLE;
     6dc:	10 92 12 20 	sts	0x2012, r1
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <pwm_disable>:

void pwm_disable(){
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = 0x00; //Disable Timer
     6e6:	10 92 00 0a 	sts	0x0A00, r1

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; Enable to allow DAC operation
		dac_output0(ENABLE);
     6ea:	8a e2       	ldi	r24, 0x2A	; 42
     6ec:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
		dac_output1(ENABLE);
     6f0:	8a e2       	ldi	r24, 0x2A	; 42
     6f2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_output1>

	//ANALOG COMPARATOR
		init_ac();
     6f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>
}
     6fa:	08 95       	ret

000006fc <pwm_mode>:

//Returns 'true' if the user configuration switch is set to Audio/PWM mode
boolean pwm_mode(){
	return sw_on(SW1);
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <sw_on>
}
     702:	08 95       	ret

00000704 <pwm_polarity>:
		pwm_decode(width);
	}
}

void pwm_polarity(uint8_t polarity){
	STATE_Pwm_Polarity = polarity;
     704:	80 93 10 20 	sts	0x2010, r24
}
     708:	08 95       	ret

0000070a <pwm_timer_reset>:
//#############################################################
//## TIMER CAPTURE FUNCTIONS
//#############################################################
void pwm_timer_reset(void){
	//Reset the timer effective immediately!
	TCE0.CNTL = 0x00;
     70a:	e0 e0       	ldi	r30, 0x00	; 0
     70c:	fa e0       	ldi	r31, 0x0A	; 10
     70e:	10 a2       	lds	r17, 0x90
	TCE0.CNTH = 0x00;	
     710:	11 a2       	lds	r17, 0x91
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	84 87       	std	Z+12, r24	; 0x0c
}
     716:	08 95       	ret

00000718 <edge_start>:
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     718:	0e 94 85 03 	call	0x70a	; 0x70a <pwm_timer_reset>
}
     71c:	08 95       	ret

0000071e <between>:
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     71e:	9c 01       	movw	r18, r24
	if ((var > low) && (var < high)) return true;
     720:	68 17       	cp	r22, r24
     722:	79 07       	cpc	r23, r25
     724:	30 f4       	brcc	.+12     	; 0x732 <between+0x14>
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	24 17       	cp	r18, r20
     72a:	35 07       	cpc	r19, r21
     72c:	18 f0       	brcs	.+6      	; 0x734 <between+0x16>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	08 95       	ret
	if ((var > low) && (var < high)) return true;
	else return false;
     732:	80 e0       	ldi	r24, 0x00	; 0
}
     734:	08 95       	ret

00000736 <pwm_out_high>:
		pwm_state('D');
	}
}

void pwm_out_high(void){
	STATE_Pwm = PWM_OUTPUT_HIGH; //A = Turn On Constantly
     736:	8f e4       	ldi	r24, 0x4F	; 79
     738:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     73c:	80 e2       	ldi	r24, 0x20	; 32
     73e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('<');
     742:	8c e3       	ldi	r24, 0x3C	; 60
     744:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('-');
     748:	8d e2       	ldi	r24, 0x2D	; 45
     74a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('O');
     74e:	8f e4       	ldi	r24, 0x4F	; 79
     750:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('N');
     754:	8e e4       	ldi	r24, 0x4E	; 78
     756:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
}
     75a:	08 95       	ret

0000075c <pwm_out_low>:
void pwm_out_low(void){
	STATE_Pwm = PWM_OUTPUT_LOW; //B = Turn Off Constantly
     75c:	8e e4       	ldi	r24, 0x4E	; 78
     75e:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     762:	80 e2       	ldi	r24, 0x20	; 32
     764:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('<');
     768:	8c e3       	ldi	r24, 0x3C	; 60
     76a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('-');
     76e:	8d e2       	ldi	r24, 0x2D	; 45
     770:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('O');
     774:	8f e4       	ldi	r24, 0x4F	; 79
     776:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('F');
     77a:	86 e4       	ldi	r24, 0x46	; 70
     77c:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('F');
     780:	86 e4       	ldi	r24, 0x46	; 70
     782:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
}
     786:	08 95       	ret

00000788 <pwm_pulse>:

//Code to initiate an output pulse. Output pulses are only initiated if there is not a current pulse in progress
void pwm_pulse(void){	
	if (STATE_Pwm != PWM_OUTPUT_PULSE){
     788:	80 91 11 20 	lds	r24, 0x2011
     78c:	80 35       	cpi	r24, 0x50	; 80
     78e:	31 f0       	breq	.+12     	; 0x79c <pwm_pulse+0x14>
		STATE_Pwm = PWM_OUTPUT_PULSE; //Update state
     790:	80 e5       	ldi	r24, 0x50	; 80
     792:	80 93 11 20 	sts	0x2011, r24
		STATE_Pwm_Counter = PWM_PULSE_DURATION; //Load the counter
     796:	84 e1       	ldi	r24, 0x14	; 20
     798:	80 93 13 20 	sts	0x2013, r24
	}	
	uart_enqueue(' ');
     79c:	80 e2       	ldi	r24, 0x20	; 32
     79e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('<');
     7a2:	8c e3       	ldi	r24, 0x3C	; 60
     7a4:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('-');
     7a8:	8d e2       	ldi	r24, 0x2D	; 45
     7aa:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('P');
     7ae:	80 e5       	ldi	r24, 0x50	; 80
     7b0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('U');
     7b4:	85 e5       	ldi	r24, 0x55	; 85
     7b6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('L');
     7ba:	8c e4       	ldi	r24, 0x4C	; 76
     7bc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('S');
     7c0:	83 e5       	ldi	r24, 0x53	; 83
     7c2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('E');
     7c6:	85 e4       	ldi	r24, 0x45	; 69
     7c8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
}
     7cc:	08 95       	ret

000007ce <pwm_reserved>:

void pwm_reserved(void){
	uart_enqueue(' ');
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('<');
     7d4:	8c e3       	ldi	r24, 0x3C	; 60
     7d6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('-');
     7da:	8d e2       	ldi	r24, 0x2D	; 45
     7dc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('W');
     7e0:	87 e5       	ldi	r24, 0x57	; 87
     7e2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('T');
     7e6:	84 e5       	ldi	r24, 0x54	; 84
     7e8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('F');
     7ec:	86 e4       	ldi	r24, 0x46	; 70
     7ee:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enqueue('!');
     7f2:	81 e2       	ldi	r24, 0x21	; 33
     7f4:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
}
     7f8:	08 95       	ret

000007fa <pwm_change_state>:

void pwm_change_state(uint8_t new_state){
	STATE_Pwm_Decode = new_state;
     7fa:	80 93 0f 20 	sts	0x200F, r24
	STATE_Pwm_Timeout = TIMEOUT;		
     7fe:	82 e3       	ldi	r24, 0x32	; 50
     800:	80 93 0e 20 	sts	0x200E, r24
}
     804:	08 95       	ret

00000806 <pwm_state>:

//State machine to decode more advanced command format
void pwm_state(uint8_t next_code){
	switch (STATE_Pwm_Decode){
     806:	90 91 0f 20 	lds	r25, 0x200F
     80a:	95 38       	cpi	r25, 0x85	; 133
     80c:	09 f4       	brne	.+2      	; 0x810 <pwm_state+0xa>
     80e:	42 c0       	rjmp	.+132    	; 0x894 <pwm_state+0x8e>
     810:	96 38       	cpi	r25, 0x86	; 134
     812:	40 f4       	brcc	.+16     	; 0x824 <pwm_state+0x1e>
     814:	93 38       	cpi	r25, 0x83	; 131
     816:	d1 f0       	breq	.+52     	; 0x84c <pwm_state+0x46>
     818:	94 38       	cpi	r25, 0x84	; 132
     81a:	58 f5       	brcc	.+86     	; 0x872 <pwm_state+0x6c>
     81c:	92 38       	cpi	r25, 0x82	; 130
     81e:	09 f0       	breq	.+2      	; 0x822 <pwm_state+0x1c>
     820:	5a c0       	rjmp	.+180    	; 0x8d6 <pwm_state+0xd0>
     822:	0d c0       	rjmp	.+26     	; 0x83e <pwm_state+0x38>
     824:	97 38       	cpi	r25, 0x87	; 135
     826:	09 f4       	brne	.+2      	; 0x82a <pwm_state+0x24>
     828:	4a c0       	rjmp	.+148    	; 0x8be <pwm_state+0xb8>
     82a:	97 38       	cpi	r25, 0x87	; 135
     82c:	08 f4       	brcc	.+2      	; 0x830 <pwm_state+0x2a>
     82e:	43 c0       	rjmp	.+134    	; 0x8b6 <pwm_state+0xb0>
     830:	98 38       	cpi	r25, 0x88	; 136
     832:	09 f4       	brne	.+2      	; 0x836 <pwm_state+0x30>
     834:	48 c0       	rjmp	.+144    	; 0x8c6 <pwm_state+0xc0>
     836:	99 38       	cpi	r25, 0x89	; 137
     838:	09 f0       	breq	.+2      	; 0x83c <pwm_state+0x36>
     83a:	4d c0       	rjmp	.+154    	; 0x8d6 <pwm_state+0xd0>
     83c:	48 c0       	rjmp	.+144    	; 0x8ce <pwm_state+0xc8>
		case LOOK_FOR_START:
			if (next_code == 'A') pwm_change_state(SAW_A);
     83e:	81 34       	cpi	r24, 0x41	; 65
     840:	09 f0       	breq	.+2      	; 0x844 <pwm_state+0x3e>
     842:	4c c0       	rjmp	.+152    	; 0x8dc <pwm_state+0xd6>
     844:	83 e8       	ldi	r24, 0x83	; 131
     846:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     84a:	08 95       	ret
			break;
		case SAW_A:
			switch (next_code){
     84c:	82 34       	cpi	r24, 0x42	; 66
     84e:	29 f0       	breq	.+10     	; 0x85a <pwm_state+0x54>
     850:	83 34       	cpi	r24, 0x43	; 67
     852:	39 f0       	breq	.+14     	; 0x862 <pwm_state+0x5c>
     854:	81 34       	cpi	r24, 0x41	; 65
     856:	49 f4       	brne	.+18     	; 0x86a <pwm_state+0x64>
     858:	08 95       	ret
				case 'A':
				break;
				case 'B':
				pwm_change_state(SAW_AB); break;
     85a:	84 e8       	ldi	r24, 0x84	; 132
     85c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     860:	08 95       	ret
				case 'C':
				pwm_change_state(SAW_AC); break;
     862:	85 e8       	ldi	r24, 0x85	; 133
     864:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     868:	08 95       	ret
				default:
				pwm_change_state(LOOK_FOR_START);
     86a:	82 e8       	ldi	r24, 0x82	; 130
     86c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     870:	08 95       	ret
			}		
			break;	
		case SAW_AB:
			switch (next_code){
     872:	82 34       	cpi	r24, 0x42	; 66
     874:	19 f0       	breq	.+6      	; 0x87c <pwm_state+0x76>
     876:	83 34       	cpi	r24, 0x43	; 67
     878:	49 f4       	brne	.+18     	; 0x88c <pwm_state+0x86>
     87a:	04 c0       	rjmp	.+8      	; 0x884 <pwm_state+0x7e>
				case 'B':
					pwm_change_state(SAW_ABB); break;
     87c:	86 e8       	ldi	r24, 0x86	; 134
     87e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     882:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ABC); break;
     884:	87 e8       	ldi	r24, 0x87	; 135
     886:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     88a:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     88c:	82 e8       	ldi	r24, 0x82	; 130
     88e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     892:	08 95       	ret
			}
			break;
		case SAW_AC:
			switch (next_code){
     894:	82 34       	cpi	r24, 0x42	; 66
     896:	19 f0       	breq	.+6      	; 0x89e <pwm_state+0x98>
     898:	83 34       	cpi	r24, 0x43	; 67
     89a:	49 f4       	brne	.+18     	; 0x8ae <pwm_state+0xa8>
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <pwm_state+0xa0>
				case 'B':
					pwm_change_state(SAW_ACB); break;
     89e:	88 e8       	ldi	r24, 0x88	; 136
     8a0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     8a4:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ACC); break;
     8a6:	89 e8       	ldi	r24, 0x89	; 137
     8a8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     8ac:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     8ae:	82 e8       	ldi	r24, 0x82	; 130
     8b0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <pwm_change_state>
     8b4:	08 95       	ret
			}
			break;
		case SAW_ABB:
			if (STATE_Pwm_Decode == 'D') pwm_out_high();
			STATE_Pwm_Decode = LOOK_FOR_START;				
     8b6:	82 e8       	ldi	r24, 0x82	; 130
     8b8:	80 93 0f 20 	sts	0x200F, r24
			break;
     8bc:	08 95       	ret
		case SAW_ABC:
			if (STATE_Pwm_Decode == 'D') pwm_out_low();
			STATE_Pwm_Decode = LOOK_FOR_START;
     8be:	82 e8       	ldi	r24, 0x82	; 130
     8c0:	80 93 0f 20 	sts	0x200F, r24
			break;		
     8c4:	08 95       	ret
		case SAW_ACB:
			if (STATE_Pwm_Decode == 'D') pwm_pulse();
			STATE_Pwm_Decode = LOOK_FOR_START;
     8c6:	82 e8       	ldi	r24, 0x82	; 130
     8c8:	80 93 0f 20 	sts	0x200F, r24
			break;
     8cc:	08 95       	ret
		case SAW_ACC:
			if (STATE_Pwm_Decode == 'D') pwm_reserved();
			STATE_Pwm_Decode = LOOK_FOR_START;
     8ce:	82 e8       	ldi	r24, 0x82	; 130
     8d0:	80 93 0f 20 	sts	0x200F, r24
			break;
     8d4:	08 95       	ret
		default:
			STATE_Pwm_Decode = LOOK_FOR_START;
     8d6:	82 e8       	ldi	r24, 0x82	; 130
     8d8:	80 93 0f 20 	sts	0x200F, r24
     8dc:	08 95       	ret

000008de <pwm_decode>:
//Converts Pulse Width's into State Machine Changes
	//0x2000 = As.wav
	//0x4000 = Bs.wav
	//0x7000 = Cs.wav
	//0x9000 = Ds.wav
void pwm_decode(uint16_t width){
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
	
	uart_send_byte(&udata,'-');
     8e4:	80 eb       	ldi	r24, 0xB0	; 176
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	6d e2       	ldi	r22, 0x2D	; 45
     8ea:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	uart_send_byte(&udata,'-');
     8ee:	80 eb       	ldi	r24, 0xB0	; 176
     8f0:	99 e0       	ldi	r25, 0x09	; 9
     8f2:	6d e2       	ldi	r22, 0x2D	; 45
     8f4:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	uart_send_byte(&udata,'-');
     8f8:	80 eb       	ldi	r24, 0xB0	; 176
     8fa:	99 e0       	ldi	r25, 0x09	; 9
     8fc:	6d e2       	ldi	r22, 0x2D	; 45
     8fe:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	uart_send_HEX16(&udata, width);
     902:	80 eb       	ldi	r24, 0xB0	; 176
     904:	99 e0       	ldi	r25, 0x09	; 9
     906:	be 01       	movw	r22, r28
     908:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_HEX16>
	uart_send_byte(&udata,'-');
     90c:	80 eb       	ldi	r24, 0xB0	; 176
     90e:	99 e0       	ldi	r25, 0x09	; 9
     910:	6d e2       	ldi	r22, 0x2D	; 45
     912:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	uart_send_byte(&udata, 13);
     916:	80 eb       	ldi	r24, 0xB0	; 176
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	6d e0       	ldi	r22, 0x0D	; 13
     91c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	
	if (between(width,0x1000,0x2000) == true){
     920:	ce 01       	movw	r24, r28
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e1       	ldi	r23, 0x10	; 16
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e2       	ldi	r21, 0x20	; 32
     92a:	0e 94 8f 03 	call	0x71e	; 0x71e <between>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	19 f4       	brne	.+6      	; 0x938 <pwm_decode+0x5a>
		//Found A code!
		pwm_state('A');		
     932:	81 e4       	ldi	r24, 0x41	; 65
     934:	0e 94 03 04 	call	0x806	; 0x806 <pwm_state>
	}
	if (between(width,0x2000,0x3000) == true){
     938:	ce 01       	movw	r24, r28
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e2       	ldi	r23, 0x20	; 32
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e3       	ldi	r21, 0x30	; 48
     942:	0e 94 8f 03 	call	0x71e	; 0x71e <between>
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	19 f4       	brne	.+6      	; 0x950 <pwm_decode+0x72>
		//Found B code!
		pwm_state('B');
     94a:	82 e4       	ldi	r24, 0x42	; 66
     94c:	0e 94 03 04 	call	0x806	; 0x806 <pwm_state>
	}
	if (between(width,0x4000,0x5000) == true){
     950:	ce 01       	movw	r24, r28
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e4       	ldi	r23, 0x40	; 64
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e5       	ldi	r21, 0x50	; 80
     95a:	0e 94 8f 03 	call	0x71e	; 0x71e <between>
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	19 f4       	brne	.+6      	; 0x968 <pwm_decode+0x8a>
		//Found C code!
		pwm_state('C');
     962:	83 e4       	ldi	r24, 0x43	; 67
     964:	0e 94 03 04 	call	0x806	; 0x806 <pwm_state>
	}
	if (between(width,0x7000,0x8000) == true){
     968:	ce 01       	movw	r24, r28
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e7       	ldi	r23, 0x70	; 112
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e8       	ldi	r21, 0x80	; 128
     972:	0e 94 8f 03 	call	0x71e	; 0x71e <between>
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	19 f4       	brne	.+6      	; 0x980 <pwm_decode+0xa2>
		//Found D code!
		pwm_state('D');
     97a:	84 e4       	ldi	r24, 0x44	; 68
     97c:	0e 94 03 04 	call	0x806	; 0x806 <pwm_state>
	}
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <edge_stop>:

void inline edge_start(){
	pwm_timer_reset();
}

void inline edge_stop(){
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
	uint16_t width;
	width = TCE0.CNT;
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	fa e0       	ldi	r31, 0x0A	; 10
     98e:	c0 a1       	lds	r28, 0x40
     990:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     992:	84 85       	ldd	r24, Z+12	; 0x0c
     994:	80 fd       	sbrc	r24, 0
     996:	12 c0       	rjmp	.+36     	; 0x9bc <edge_stop+0x36>
		uart_enqueue(13);
     998:	8d e0       	ldi	r24, 0x0D	; 13
     99a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue(10);
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     9a4:	8d e2       	ldi	r24, 0x2D	; 45
     9a6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     9aa:	8d e2       	ldi	r24, 0x2D	; 45
     9ac:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enq_HEX16(width);
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 04 0a 	call	0x1408	; 0x1408 <uart_enq_HEX16>
		pwm_decode(width);
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 6f 04 	call	0x8de	; 0x8de <pwm_decode>
	}
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <__vector_68>:
boolean pwm_mode(){
	return sw_on(SW1);
}

//ANALOG COMPARATOR (AC0) OUTPUT TOGGLE INTERRUPT
SIGNAL(ACA_AC0_vect){
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
     9e8:	e0 e8       	ldi	r30, 0x80	; 128
     9ea:	f3 e0       	ldi	r31, 0x03	; 3
     9ec:	87 81       	ldd	r24, Z+7	; 0x07
     9ee:	84 ff       	sbrs	r24, 4
     9f0:	28 c0       	rjmp	.+80     	; 0xa42 <__vector_68+0x80>
		led_on(LED_MID);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <led_on>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
     9f8:	80 91 10 20 	lds	r24, 0x2010
     9fc:	87 35       	cpi	r24, 0x57	; 87
     9fe:	11 f4       	brne	.+4      	; 0xa04 <__vector_68+0x42>
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     a00:	0e 94 85 03 	call	0x70a	; 0x70a <pwm_timer_reset>
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
		led_on(LED_MID);
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
     a04:	80 91 10 20 	lds	r24, 0x2010
     a08:	88 35       	cpi	r24, 0x58	; 88
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__vector_68+0x4c>
     a0c:	40 c0       	rjmp	.+128    	; 0xa8e <__vector_68+0xcc>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     a0e:	e0 e0       	ldi	r30, 0x00	; 0
     a10:	fa e0       	ldi	r31, 0x0A	; 10
     a12:	c0 a1       	lds	r28, 0x40
     a14:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     a16:	84 85       	ldd	r24, Z+12	; 0x0c
     a18:	80 fd       	sbrc	r24, 0
     a1a:	39 c0       	rjmp	.+114    	; 0xa8e <__vector_68+0xcc>
		uart_enqueue(13);
     a1c:	8d e0       	ldi	r24, 0x0D	; 13
     a1e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue(10);
     a22:	8a e0       	ldi	r24, 0x0A	; 10
     a24:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     a28:	8d e2       	ldi	r24, 0x2D	; 45
     a2a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     a2e:	8d e2       	ldi	r24, 0x2D	; 45
     a30:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enq_HEX16(width);
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 04 0a 	call	0x1408	; 0x1408 <uart_enq_HEX16>
		pwm_decode(width);
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 6f 04 	call	0x8de	; 0x8de <pwm_decode>
     a40:	26 c0       	rjmp	.+76     	; 0xa8e <__vector_68+0xcc>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
	}
	else {
		led_off(LED_MID);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <led_off>
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
     a48:	80 91 10 20 	lds	r24, 0x2010
     a4c:	87 35       	cpi	r24, 0x57	; 87
     a4e:	c9 f4       	brne	.+50     	; 0xa82 <__vector_68+0xc0>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     a50:	e0 e0       	ldi	r30, 0x00	; 0
     a52:	fa e0       	ldi	r31, 0x0A	; 10
     a54:	c0 a1       	lds	r28, 0x40
     a56:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     a58:	84 85       	ldd	r24, Z+12	; 0x0c
     a5a:	80 fd       	sbrc	r24, 0
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <__vector_68+0xc0>
		uart_enqueue(13);
     a5e:	8d e0       	ldi	r24, 0x0D	; 13
     a60:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue(10);
     a64:	8a e0       	ldi	r24, 0x0A	; 10
     a66:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     a6a:	8d e2       	ldi	r24, 0x2D	; 45
     a6c:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('-');
     a70:	8d e2       	ldi	r24, 0x2D	; 45
     a72:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enq_HEX16(width);
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 04 0a 	call	0x1408	; 0x1408 <uart_enq_HEX16>
		pwm_decode(width);
     a7c:	ce 01       	movw	r24, r28
     a7e:	0e 94 6f 04 	call	0x8de	; 0x8de <pwm_decode>
	}
	else {
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
     a82:	80 91 10 20 	lds	r24, 0x2010
     a86:	88 35       	cpi	r24, 0x58	; 88
     a88:	11 f4       	brne	.+4      	; 0xa8e <__vector_68+0xcc>
	}
}

void inline edge_start(){
	pwm_timer_reset();
     a8a:	0e 94 85 03 	call	0x70a	; 0x70a <pwm_timer_reset>
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <service_pwm>:
//Mainline Loop PWM Service Routine -- use to manage output pulse
//...and trigger states
//---must run only once per 2ms looptime
void service_pwm(void){
	//Process Decoding Timeout
	if (STATE_Pwm_Timeout > 0) STATE_Pwm_Timeout--;
     ab4:	80 91 0e 20 	lds	r24, 0x200E
     ab8:	88 23       	and	r24, r24
     aba:	29 f0       	breq	.+10     	; 0xac6 <service_pwm+0x12>
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	80 93 0e 20 	sts	0x200E, r24
	if (STATE_Pwm_Timeout == 0) STATE_Pwm_Decode = LOOK_FOR_START;
     ac2:	88 23       	and	r24, r24
     ac4:	19 f4       	brne	.+6      	; 0xacc <service_pwm+0x18>
     ac6:	82 e8       	ldi	r24, 0x82	; 130
     ac8:	80 93 0f 20 	sts	0x200F, r24
	
	//Process component pulse durations
	switch(STATE_Pwm){
     acc:	80 91 11 20 	lds	r24, 0x2011
     ad0:	8f 34       	cpi	r24, 0x4F	; 79
     ad2:	19 f0       	breq	.+6      	; 0xada <service_pwm+0x26>
     ad4:	80 35       	cpi	r24, 0x50	; 80
     ad6:	d1 f4       	brne	.+52     	; 0xb0c <service_pwm+0x58>
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <service_pwm+0x30>
	case PWM_OUTPUT_HIGH:
		PORTA.OUTSET = B8(10000000); //PA7 output high
     ada:	80 e8       	ldi	r24, 0x80	; 128
     adc:	e0 e0       	ldi	r30, 0x00	; 0
     ade:	f6 e0       	ldi	r31, 0x06	; 6
     ae0:	85 83       	std	Z+5, r24	; 0x05
		break;
     ae2:	08 95       	ret
	case PWM_OUTPUT_PULSE:
		if (STATE_Pwm_Counter == 0)	{
     ae4:	80 91 13 20 	lds	r24, 0x2013
     ae8:	88 23       	and	r24, r24
     aea:	41 f4       	brne	.+16     	; 0xafc <service_pwm+0x48>
			//Done with pulse!
			PORTA.OUTCLR = B8(10000000); //PA7 output low
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	e0 e0       	ldi	r30, 0x00	; 0
     af0:	f6 e0       	ldi	r31, 0x06	; 6
     af2:	86 83       	std	Z+6, r24	; 0x06
			STATE_Pwm = PWM_OUTPUT_LOW;	//Update State (Done with pulse)
     af4:	8e e4       	ldi	r24, 0x4E	; 78
     af6:	80 93 11 20 	sts	0x2011, r24
     afa:	08 95       	ret
		}
		else {
			STATE_Pwm_Counter--; //Decrement Counter
     afc:	81 50       	subi	r24, 0x01	; 1
     afe:	80 93 13 20 	sts	0x2013, r24
			PORTA.OUTSET = B8(10000000); //PA7 output high
     b02:	80 e8       	ldi	r24, 0x80	; 128
     b04:	e0 e0       	ldi	r30, 0x00	; 0
     b06:	f6 e0       	ldi	r31, 0x06	; 6
     b08:	85 83       	std	Z+5, r24	; 0x05
     b0a:	08 95       	ret
		}
		break;
	case PWM_OUTPUT_LOW:
	default:
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	e0 e0       	ldi	r30, 0x00	; 0
     b10:	f6 e0       	ldi	r31, 0x06	; 6
     b12:	86 83       	std	Z+6, r24	; 0x06
     b14:	08 95       	ret

00000b16 <pwm_hunt_target>:
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	uint8_t how_many = uart_icount();
     b32:	0e 94 9e 0c 	call	0x193c	; 0x193c <uart_icount>
	uint8_t current_index = uart_itail;
     b36:	d0 90 21 20 	lds	r13, 0x2021
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
     b3a:	8d 30       	cpi	r24, 0x0D	; 13
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <pwm_hunt_target+0x2a>
     b3e:	59 c0       	rjmp	.+178    	; 0xbf2 <pwm_hunt_target+0xdc>
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0f 2e       	mov	r0, r31
     b44:	f3 ef       	ldi	r31, 0xF3	; 243
     b46:	6f 2e       	mov	r6, r31
     b48:	ff ef       	ldi	r31, 0xFF	; 255
     b4a:	7f 2e       	mov	r7, r31
     b4c:	f0 2d       	mov	r31, r0
     b4e:	68 0e       	add	r6, r24
     b50:	79 1e       	adc	r7, r25
     b52:	77 20       	and	r7, r7
     b54:	0c f4       	brge	.+2      	; 0xb58 <pwm_hunt_target+0x42>
     b56:	4d c0       	rjmp	.+154    	; 0xbf2 <pwm_hunt_target+0xdc>
     b58:	cc 24       	eor	r12, r12
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     b5a:	0f 2e       	mov	r0, r31
     b5c:	fc e1       	ldi	r31, 0x1C	; 28
     b5e:	8f 2e       	mov	r8, r31
     b60:	f1 e2       	ldi	r31, 0x21	; 33
     b62:	9f 2e       	mov	r9, r31
     b64:	f0 2d       	mov	r31, r0
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b66:	b8 2c       	mov	r11, r8
     b68:	a9 2c       	mov	r10, r9
     b6a:	84 01       	movw	r16, r8
     b6c:	03 5f       	subi	r16, 0xF3	; 243
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     b70:	0f 2e       	mov	r0, r31
     b72:	f2 e2       	ldi	r31, 0x22	; 34
     b74:	ef 2e       	mov	r14, r31
     b76:	f0 e2       	ldi	r31, 0x20	; 32
     b78:	ff 2e       	mov	r15, r31
     b7a:	f0 2d       	mov	r31, r0
inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     b7c:	89 ef       	ldi	r24, 0xF9	; 249
     b7e:	8d 15       	cp	r24, r13
     b80:	08 f4       	brcc	.+2      	; 0xb84 <pwm_hunt_target+0x6e>
     b82:	dd 24       	eor	r13, r13
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b84:	2d 2d       	mov	r18, r13
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	2a 5f       	subi	r18, 0xFA	; 250
     b8a:	30 40       	sbci	r19, 0x00	; 0
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     b8c:	d4 01       	movw	r26, r8
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     b8e:	cb 2d       	mov	r28, r11
     b90:	da 2d       	mov	r29, r10
     b92:	c9 01       	movw	r24, r18
     b94:	86 50       	subi	r24, 0x06	; 6
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
     b98:	8a 3f       	cpi	r24, 0xFA	; 250
     b9a:	91 05       	cpc	r25, r1
     b9c:	34 f0       	brlt	.+12     	; 0xbaa <pwm_hunt_target+0x94>
     b9e:	f7 01       	movw	r30, r14
     ba0:	e2 0f       	add	r30, r18
     ba2:	f3 1f       	adc	r31, r19
     ba4:	80 81       	ld	r24, Z
     ba6:	8c 93       	st	X, r24
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <pwm_hunt_target+0x9e>
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     baa:	8e 0d       	add	r24, r14
     bac:	9f 1d       	adc	r25, r15
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	8c 93       	st	X, r24
     bb4:	2f 5f       	subi	r18, 0xFF	; 255
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	11 96       	adiw	r26, 0x01	; 1
//#############################################################
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
     bba:	a0 17       	cp	r26, r16
     bbc:	b1 07       	cpc	r27, r17
     bbe:	49 f7       	brne	.-46     	; 0xb92 <pwm_hunt_target+0x7c>
     bc0:	e0 91 26 22 	lds	r30, 0x2226
     bc4:	f0 91 27 22 	lds	r31, 0x2227
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
	}	
}

inline uint8_t array_compare(uint8_t* arr1, uint8_t* arr2){
	uint8_t equal = true;
     bc8:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
     bca:	91 91       	ld	r25, Z+
     bcc:	89 91       	ld	r24, Y+
     bce:	98 13       	cpse	r25, r24
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	c0 17       	cp	r28, r16
     bd4:	d1 07       	cpc	r29, r17
     bd6:	c9 f7       	brne	.-14     	; 0xbca <pwm_hunt_target+0xb4>
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
		build_dut(current_index);
		if (array_compare(trigger_target, trigger_compare) == true){
     bd8:	21 30       	cpi	r18, 0x01	; 1
     bda:	21 f4       	brne	.+8      	; 0xbe4 <pwm_hunt_target+0xce>
			pwm_pulse(); //fire off the solenoid
     bdc:	0e 94 c4 03 	call	0x788	; 0x788 <pwm_pulse>
			init_uart_ibuffer(); //flush buffer to prevent retriggering
     be0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <init_uart_ibuffer>
		}
		current_index++;
     be4:	d3 94       	inc	r13

inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     be6:	c3 94       	inc	r12
     be8:	8c 2d       	mov	r24, r12
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	68 16       	cp	r6, r24
     bee:	79 06       	cpc	r7, r25
     bf0:	2c f6       	brge	.-118    	; 0xb7c <pwm_hunt_target+0x66>
			pwm_pulse(); //fire off the solenoid
			init_uart_ibuffer(); //flush buffer to prevent retriggering
		}
		current_index++;
	}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	08 95       	ret

00000c10 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
     c10:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	e0 3a       	cpi	r30, 0xA0	; 160
     c16:	f8 07       	cpc	r31, r24
     c18:	51 f4       	brne	.+20     	; 0xc2e <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
     c1a:	a0 e4       	ldi	r26, 0x40	; 64
     c1c:	b6 e0       	ldi	r27, 0x06	; 6
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	8c 93       	st	X, r24
     c24:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
     c26:	15 96       	adiw	r26, 0x05	; 5
     c28:	8c 93       	st	X, r24
     c2a:	15 97       	sbiw	r26, 0x05	; 5
     c2c:	37 c0       	rjmp	.+110    	; 0xc9c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTC1) {
     c2e:	88 e0       	ldi	r24, 0x08	; 8
     c30:	e0 3b       	cpi	r30, 0xB0	; 176
     c32:	f8 07       	cpc	r31, r24
     c34:	51 f4       	brne	.+20     	; 0xc4a <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	b6 e0       	ldi	r27, 0x06	; 6
     c3a:	80 e8       	ldi	r24, 0x80	; 128
     c3c:	11 96       	adiw	r26, 0x01	; 1
     c3e:	8c 93       	st	X, r24
     c40:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
     c42:	15 96       	adiw	r26, 0x05	; 5
     c44:	8c 93       	st	X, r24
     c46:	15 97       	sbiw	r26, 0x05	; 5
     c48:	29 c0       	rjmp	.+82     	; 0xc9c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTD0) {
     c4a:	89 e0       	ldi	r24, 0x09	; 9
     c4c:	e0 3a       	cpi	r30, 0xA0	; 160
     c4e:	f8 07       	cpc	r31, r24
     c50:	51 f4       	brne	.+20     	; 0xc66 <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
     c52:	a0 e6       	ldi	r26, 0x60	; 96
     c54:	b6 e0       	ldi	r27, 0x06	; 6
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	11 96       	adiw	r26, 0x01	; 1
     c5a:	8c 93       	st	X, r24
     c5c:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
     c5e:	15 96       	adiw	r26, 0x05	; 5
     c60:	8c 93       	st	X, r24
     c62:	15 97       	sbiw	r26, 0x05	; 5
     c64:	1b c0       	rjmp	.+54     	; 0xc9c <init_uart+0x8c>
		}	
		else if (&(*which) == &USARTD1) {
     c66:	89 e0       	ldi	r24, 0x09	; 9
     c68:	e0 3b       	cpi	r30, 0xB0	; 176
     c6a:	f8 07       	cpc	r31, r24
     c6c:	51 f4       	brne	.+20     	; 0xc82 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
     c6e:	a0 e6       	ldi	r26, 0x60	; 96
     c70:	b6 e0       	ldi	r27, 0x06	; 6
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	11 96       	adiw	r26, 0x01	; 1
     c76:	8c 93       	st	X, r24
     c78:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
     c7a:	15 96       	adiw	r26, 0x05	; 5
     c7c:	8c 93       	st	X, r24
     c7e:	15 97       	sbiw	r26, 0x05	; 5
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTE0) {
     c82:	8a e0       	ldi	r24, 0x0A	; 10
     c84:	e0 3a       	cpi	r30, 0xA0	; 160
     c86:	f8 07       	cpc	r31, r24
     c88:	49 f4       	brne	.+18     	; 0xc9c <init_uart+0x8c>
			PORTE.DIRSET = B8(00001000); //TX pin as output
     c8a:	a0 e8       	ldi	r26, 0x80	; 128
     c8c:	b6 e0       	ldi	r27, 0x06	; 6
     c8e:	88 e0       	ldi	r24, 0x08	; 8
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	8c 93       	st	X, r24
     c94:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
     c96:	15 96       	adiw	r26, 0x05	; 5
     c98:	8c 93       	st	X, r24
     c9a:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
     c9c:	61 30       	cpi	r22, 0x01	; 1
     c9e:	39 f0       	breq	.+14     	; 0xcae <init_uart+0x9e>
     ca0:	62 30       	cpi	r22, 0x02	; 2
     ca2:	51 f4       	brne	.+20     	; 0xcb8 <init_uart+0xa8>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
     ca4:	8c ea       	ldi	r24, 0xAC	; 172
     ca6:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
     ca8:	85 ec       	ldi	r24, 0xC5	; 197
     caa:	86 83       	std	Z+6, r24	; 0x06
			break;
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <init_uart+0xb0>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
     cae:	88 ea       	ldi	r24, 0xA8	; 168
     cb0:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
     cb2:	8e e6       	ldi	r24, 0x6E	; 110
     cb4:	86 83       	std	Z+6, r24	; 0x06
			break;
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <init_uart+0xb0>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA4;
     cb8:	84 ea       	ldi	r24, 0xA4	; 164
     cba:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x17;		
     cbc:	87 e1       	ldi	r24, 0x17	; 23
     cbe:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
     cc0:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
     cc2:	88 e1       	ldi	r24, 0x18	; 24
     cc4:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	85 83       	std	Z+5, r24	; 0x05
	//
}
     cca:	08 95       	ret

00000ccc <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
     ccc:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	85 ff       	sbrs	r24, 5
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <uart_send_byte+0x2>
	which->DATA = dataB;	
     cd4:	60 83       	st	Z, r22
}
     cd6:	08 95       	ret

00000cd8 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
     cea:	e6 2f       	mov	r30, r22
     cec:	f7 2f       	mov	r31, r23
     cee:	ef 01       	movw	r28, r30
     cf0:	09 90       	ld	r0, Y+
     cf2:	00 20       	and	r0, r0
     cf4:	e9 f7       	brne	.-6      	; 0xcf0 <uart_send_string+0x18>
     cf6:	21 97       	sbiw	r28, 0x01	; 1
     cf8:	ce 1b       	sub	r28, r30
     cfa:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
     cfc:	79 f0       	breq	.+30     	; 0xd1c <uart_send_string+0x44>
     cfe:	e6 2e       	mov	r14, r22
     d00:	f7 2e       	mov	r15, r23
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	f7 01       	movw	r30, r14
     d08:	61 91       	ld	r22, Z+
     d0a:	7f 01       	movw	r14, r30
     d0c:	c6 01       	movw	r24, r12
     d0e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
     d12:	0f 5f       	subi	r16, 0xFF	; 255
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	0c 17       	cp	r16, r28
     d18:	1d 07       	cpc	r17, r29
     d1a:	a9 f7       	brne	.-22     	; 0xd06 <uart_send_string+0x2e>
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	08 95       	ret

00000d2e <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
	switch(lowb){
     d34:	67 30       	cpi	r22, 0x07	; 7
     d36:	09 f4       	brne	.+2      	; 0xd3a <uart_send_BIN4+0xc>
     d38:	9d c0       	rjmp	.+314    	; 0xe74 <uart_send_BIN4+0x146>
     d3a:	68 30       	cpi	r22, 0x08	; 8
     d3c:	90 f4       	brcc	.+36     	; 0xd62 <uart_send_BIN4+0x34>
     d3e:	63 30       	cpi	r22, 0x03	; 3
     d40:	09 f4       	brne	.+2      	; 0xd44 <uart_send_BIN4+0x16>
     d42:	58 c0       	rjmp	.+176    	; 0xdf4 <uart_send_BIN4+0xc6>
     d44:	64 30       	cpi	r22, 0x04	; 4
     d46:	30 f4       	brcc	.+12     	; 0xd54 <uart_send_BIN4+0x26>
     d48:	61 30       	cpi	r22, 0x01	; 1
     d4a:	a1 f1       	breq	.+104    	; 0xdb4 <uart_send_BIN4+0x86>
     d4c:	62 30       	cpi	r22, 0x02	; 2
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <uart_send_BIN4+0x24>
     d50:	41 c0       	rjmp	.+130    	; 0xdd4 <uart_send_BIN4+0xa6>
     d52:	20 c0       	rjmp	.+64     	; 0xd94 <uart_send_BIN4+0x66>
     d54:	65 30       	cpi	r22, 0x05	; 5
     d56:	09 f4       	brne	.+2      	; 0xd5a <uart_send_BIN4+0x2c>
     d58:	6d c0       	rjmp	.+218    	; 0xe34 <uart_send_BIN4+0x106>
     d5a:	66 30       	cpi	r22, 0x06	; 6
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <uart_send_BIN4+0x32>
     d5e:	7a c0       	rjmp	.+244    	; 0xe54 <uart_send_BIN4+0x126>
     d60:	59 c0       	rjmp	.+178    	; 0xe14 <uart_send_BIN4+0xe6>
     d62:	6b 30       	cpi	r22, 0x0B	; 11
     d64:	09 f4       	brne	.+2      	; 0xd68 <uart_send_BIN4+0x3a>
     d66:	c6 c0       	rjmp	.+396    	; 0xef4 <uart_send_BIN4+0x1c6>
     d68:	6c 30       	cpi	r22, 0x0C	; 12
     d6a:	38 f4       	brcc	.+14     	; 0xd7a <uart_send_BIN4+0x4c>
     d6c:	69 30       	cpi	r22, 0x09	; 9
     d6e:	09 f4       	brne	.+2      	; 0xd72 <uart_send_BIN4+0x44>
     d70:	a1 c0       	rjmp	.+322    	; 0xeb4 <uart_send_BIN4+0x186>
     d72:	6a 30       	cpi	r22, 0x0A	; 10
     d74:	08 f0       	brcs	.+2      	; 0xd78 <uart_send_BIN4+0x4a>
     d76:	ae c0       	rjmp	.+348    	; 0xed4 <uart_send_BIN4+0x1a6>
     d78:	8d c0       	rjmp	.+282    	; 0xe94 <uart_send_BIN4+0x166>
     d7a:	6d 30       	cpi	r22, 0x0D	; 13
     d7c:	09 f4       	brne	.+2      	; 0xd80 <uart_send_BIN4+0x52>
     d7e:	da c0       	rjmp	.+436    	; 0xf34 <uart_send_BIN4+0x206>
     d80:	6d 30       	cpi	r22, 0x0D	; 13
     d82:	08 f4       	brcc	.+2      	; 0xd86 <uart_send_BIN4+0x58>
     d84:	c7 c0       	rjmp	.+398    	; 0xf14 <uart_send_BIN4+0x1e6>
     d86:	6e 30       	cpi	r22, 0x0E	; 14
     d88:	09 f4       	brne	.+2      	; 0xd8c <uart_send_BIN4+0x5e>
     d8a:	e4 c0       	rjmp	.+456    	; 0xf54 <uart_send_BIN4+0x226>
     d8c:	6f 30       	cpi	r22, 0x0F	; 15
     d8e:	09 f0       	breq	.+2      	; 0xd92 <uart_send_BIN4+0x64>
     d90:	00 c1       	rjmp	.+512    	; 0xf92 <uart_send_BIN4+0x264>
     d92:	f0 c0       	rjmp	.+480    	; 0xf74 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
     d94:	60 e3       	ldi	r22, 0x30	; 48
     d96:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     d9a:	ce 01       	movw	r24, r28
     d9c:	60 e3       	ldi	r22, 0x30	; 48
     d9e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     da2:	ce 01       	movw	r24, r28
     da4:	60 e3       	ldi	r22, 0x30	; 48
     da6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     daa:	ce 01       	movw	r24, r28
     dac:	60 e3       	ldi	r22, 0x30	; 48
     dae:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     db2:	ef c0       	rjmp	.+478    	; 0xf92 <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
     db4:	60 e3       	ldi	r22, 0x30	; 48
     db6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     dba:	ce 01       	movw	r24, r28
     dbc:	60 e3       	ldi	r22, 0x30	; 48
     dbe:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     dc2:	ce 01       	movw	r24, r28
     dc4:	60 e3       	ldi	r22, 0x30	; 48
     dc6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     dca:	ce 01       	movw	r24, r28
     dcc:	61 e3       	ldi	r22, 0x31	; 49
     dce:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     dd2:	df c0       	rjmp	.+446    	; 0xf92 <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
     dd4:	60 e3       	ldi	r22, 0x30	; 48
     dd6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     dda:	ce 01       	movw	r24, r28
     ddc:	60 e3       	ldi	r22, 0x30	; 48
     dde:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     de2:	ce 01       	movw	r24, r28
     de4:	61 e3       	ldi	r22, 0x31	; 49
     de6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     dea:	ce 01       	movw	r24, r28
     dec:	60 e3       	ldi	r22, 0x30	; 48
     dee:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     df2:	cf c0       	rjmp	.+414    	; 0xf92 <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
     df4:	60 e3       	ldi	r22, 0x30	; 48
     df6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     dfa:	ce 01       	movw	r24, r28
     dfc:	60 e3       	ldi	r22, 0x30	; 48
     dfe:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e02:	ce 01       	movw	r24, r28
     e04:	61 e3       	ldi	r22, 0x31	; 49
     e06:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e0a:	ce 01       	movw	r24, r28
     e0c:	61 e3       	ldi	r22, 0x31	; 49
     e0e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     e12:	bf c0       	rjmp	.+382    	; 0xf92 <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
     e14:	60 e3       	ldi	r22, 0x30	; 48
     e16:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e1a:	ce 01       	movw	r24, r28
     e1c:	61 e3       	ldi	r22, 0x31	; 49
     e1e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     e22:	ce 01       	movw	r24, r28
     e24:	60 e3       	ldi	r22, 0x30	; 48
     e26:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     e2a:	ce 01       	movw	r24, r28
     e2c:	60 e3       	ldi	r22, 0x30	; 48
     e2e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     e32:	af c0       	rjmp	.+350    	; 0xf92 <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
     e34:	60 e3       	ldi	r22, 0x30	; 48
     e36:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e3a:	ce 01       	movw	r24, r28
     e3c:	61 e3       	ldi	r22, 0x31	; 49
     e3e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     e42:	ce 01       	movw	r24, r28
     e44:	60 e3       	ldi	r22, 0x30	; 48
     e46:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e4a:	ce 01       	movw	r24, r28
     e4c:	61 e3       	ldi	r22, 0x31	; 49
     e4e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     e52:	9f c0       	rjmp	.+318    	; 0xf92 <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
     e54:	60 e3       	ldi	r22, 0x30	; 48
     e56:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e5a:	ce 01       	movw	r24, r28
     e5c:	61 e3       	ldi	r22, 0x31	; 49
     e5e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e62:	ce 01       	movw	r24, r28
     e64:	61 e3       	ldi	r22, 0x31	; 49
     e66:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     e6a:	ce 01       	movw	r24, r28
     e6c:	60 e3       	ldi	r22, 0x30	; 48
     e6e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     e72:	8f c0       	rjmp	.+286    	; 0xf92 <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
     e74:	60 e3       	ldi	r22, 0x30	; 48
     e76:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e7a:	ce 01       	movw	r24, r28
     e7c:	61 e3       	ldi	r22, 0x31	; 49
     e7e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e82:	ce 01       	movw	r24, r28
     e84:	61 e3       	ldi	r22, 0x31	; 49
     e86:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     e8a:	ce 01       	movw	r24, r28
     e8c:	61 e3       	ldi	r22, 0x31	; 49
     e8e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     e92:	7f c0       	rjmp	.+254    	; 0xf92 <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
     e94:	61 e3       	ldi	r22, 0x31	; 49
     e96:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     e9a:	ce 01       	movw	r24, r28
     e9c:	60 e3       	ldi	r22, 0x30	; 48
     e9e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     ea2:	ce 01       	movw	r24, r28
     ea4:	60 e3       	ldi	r22, 0x30	; 48
     ea6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     eaa:	ce 01       	movw	r24, r28
     eac:	60 e3       	ldi	r22, 0x30	; 48
     eae:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     eb2:	6f c0       	rjmp	.+222    	; 0xf92 <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
     eb4:	61 e3       	ldi	r22, 0x31	; 49
     eb6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     eba:	ce 01       	movw	r24, r28
     ebc:	60 e3       	ldi	r22, 0x30	; 48
     ebe:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     ec2:	ce 01       	movw	r24, r28
     ec4:	60 e3       	ldi	r22, 0x30	; 48
     ec6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     eca:	ce 01       	movw	r24, r28
     ecc:	61 e3       	ldi	r22, 0x31	; 49
     ece:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     ed2:	5f c0       	rjmp	.+190    	; 0xf92 <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
     ed4:	61 e3       	ldi	r22, 0x31	; 49
     ed6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     eda:	ce 01       	movw	r24, r28
     edc:	60 e3       	ldi	r22, 0x30	; 48
     ede:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     ee2:	ce 01       	movw	r24, r28
     ee4:	61 e3       	ldi	r22, 0x31	; 49
     ee6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     eea:	ce 01       	movw	r24, r28
     eec:	60 e3       	ldi	r22, 0x30	; 48
     eee:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     ef2:	4f c0       	rjmp	.+158    	; 0xf92 <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
     ef4:	61 e3       	ldi	r22, 0x31	; 49
     ef6:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     efa:	ce 01       	movw	r24, r28
     efc:	60 e3       	ldi	r22, 0x30	; 48
     efe:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f02:	ce 01       	movw	r24, r28
     f04:	61 e3       	ldi	r22, 0x31	; 49
     f06:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f0a:	ce 01       	movw	r24, r28
     f0c:	61 e3       	ldi	r22, 0x31	; 49
     f0e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
     f14:	61 e3       	ldi	r22, 0x31	; 49
     f16:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f1a:	ce 01       	movw	r24, r28
     f1c:	61 e3       	ldi	r22, 0x31	; 49
     f1e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     f22:	ce 01       	movw	r24, r28
     f24:	60 e3       	ldi	r22, 0x30	; 48
     f26:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     f2a:	ce 01       	movw	r24, r28
     f2c:	60 e3       	ldi	r22, 0x30	; 48
     f2e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     f32:	2f c0       	rjmp	.+94     	; 0xf92 <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
     f34:	61 e3       	ldi	r22, 0x31	; 49
     f36:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f3a:	ce 01       	movw	r24, r28
     f3c:	61 e3       	ldi	r22, 0x31	; 49
     f3e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     f42:	ce 01       	movw	r24, r28
     f44:	60 e3       	ldi	r22, 0x30	; 48
     f46:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f4a:	ce 01       	movw	r24, r28
     f4c:	61 e3       	ldi	r22, 0x31	; 49
     f4e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
     f54:	61 e3       	ldi	r22, 0x31	; 49
     f56:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f5a:	ce 01       	movw	r24, r28
     f5c:	61 e3       	ldi	r22, 0x31	; 49
     f5e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f62:	ce 01       	movw	r24, r28
     f64:	61 e3       	ldi	r22, 0x31	; 49
     f66:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'0');
     f6a:	ce 01       	movw	r24, r28
     f6c:	60 e3       	ldi	r22, 0x30	; 48
     f6e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
     f74:	61 e3       	ldi	r22, 0x31	; 49
     f76:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f7a:	ce 01       	movw	r24, r28
     f7c:	61 e3       	ldi	r22, 0x31	; 49
     f7e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f82:	ce 01       	movw	r24, r28
     f84:	61 e3       	ldi	r22, 0x31	; 49
     f86:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		uart_send_byte(which,'1');
     f8a:	ce 01       	movw	r24, r28
     f8c:	61 e3       	ldi	r22, 0x31	; 49
     f8e:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
	}	
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
     fa2:	62 e6       	ldi	r22, 0x62	; 98
     fa4:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
     fa8:	61 2f       	mov	r22, r17
     faa:	62 95       	swap	r22
     fac:	6f 70       	andi	r22, 0x0F	; 15
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 97 06 	call	0xd2e	; 0xd2e <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
     fb4:	61 2f       	mov	r22, r17
     fb6:	6f 70       	andi	r22, 0x0F	; 15
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 94 97 06 	call	0xd2e	; 0xd2e <uart_send_BIN4>
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	08 95       	ret

00000fc6 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
     fc6:	67 30       	cpi	r22, 0x07	; 7
     fc8:	09 f4       	brne	.+2      	; 0xfcc <uart_send_HEX4+0x6>
     fca:	3f c0       	rjmp	.+126    	; 0x104a <uart_send_HEX4+0x84>
     fcc:	68 30       	cpi	r22, 0x08	; 8
     fce:	70 f4       	brcc	.+28     	; 0xfec <uart_send_HEX4+0x26>
     fd0:	63 30       	cpi	r22, 0x03	; 3
     fd2:	59 f1       	breq	.+86     	; 0x102a <uart_send_HEX4+0x64>
     fd4:	64 30       	cpi	r22, 0x04	; 4
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <uart_send_HEX4+0x1c>
     fd8:	61 30       	cpi	r22, 0x01	; 1
     fda:	f9 f0       	breq	.+62     	; 0x101a <uart_send_HEX4+0x54>
     fdc:	62 30       	cpi	r22, 0x02	; 2
     fde:	08 f5       	brcc	.+66     	; 0x1022 <uart_send_HEX4+0x5c>
     fe0:	18 c0       	rjmp	.+48     	; 0x1012 <uart_send_HEX4+0x4c>
     fe2:	65 30       	cpi	r22, 0x05	; 5
     fe4:	51 f1       	breq	.+84     	; 0x103a <uart_send_HEX4+0x74>
     fe6:	66 30       	cpi	r22, 0x06	; 6
     fe8:	60 f5       	brcc	.+88     	; 0x1042 <uart_send_HEX4+0x7c>
     fea:	23 c0       	rjmp	.+70     	; 0x1032 <uart_send_HEX4+0x6c>
     fec:	6b 30       	cpi	r22, 0x0B	; 11
     fee:	e9 f1       	breq	.+122    	; 0x106a <uart_send_HEX4+0xa4>
     ff0:	6c 30       	cpi	r22, 0x0C	; 12
     ff2:	28 f4       	brcc	.+10     	; 0xffe <uart_send_HEX4+0x38>
     ff4:	69 30       	cpi	r22, 0x09	; 9
     ff6:	89 f1       	breq	.+98     	; 0x105a <uart_send_HEX4+0x94>
     ff8:	6a 30       	cpi	r22, 0x0A	; 10
     ffa:	98 f5       	brcc	.+102    	; 0x1062 <uart_send_HEX4+0x9c>
     ffc:	2a c0       	rjmp	.+84     	; 0x1052 <uart_send_HEX4+0x8c>
     ffe:	6d 30       	cpi	r22, 0x0D	; 13
    1000:	e1 f1       	breq	.+120    	; 0x107a <uart_send_HEX4+0xb4>
    1002:	6d 30       	cpi	r22, 0x0D	; 13
    1004:	b0 f1       	brcs	.+108    	; 0x1072 <uart_send_HEX4+0xac>
    1006:	6e 30       	cpi	r22, 0x0E	; 14
    1008:	e1 f1       	breq	.+120    	; 0x1082 <uart_send_HEX4+0xbc>
    100a:	6f 30       	cpi	r22, 0x0F	; 15
    100c:	09 f0       	breq	.+2      	; 0x1010 <uart_send_HEX4+0x4a>
    100e:	40 c0       	rjmp	.+128    	; 0x1090 <uart_send_HEX4+0xca>
    1010:	3c c0       	rjmp	.+120    	; 0x108a <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    1012:	60 e3       	ldi	r22, 0x30	; 48
    1014:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1018:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    101a:	61 e3       	ldi	r22, 0x31	; 49
    101c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1020:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    1022:	62 e3       	ldi	r22, 0x32	; 50
    1024:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1028:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    102a:	63 e3       	ldi	r22, 0x33	; 51
    102c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1030:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    1032:	64 e3       	ldi	r22, 0x34	; 52
    1034:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1038:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    103a:	65 e3       	ldi	r22, 0x35	; 53
    103c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1040:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    1042:	66 e3       	ldi	r22, 0x36	; 54
    1044:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1048:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    104a:	67 e3       	ldi	r22, 0x37	; 55
    104c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1050:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    1052:	68 e3       	ldi	r22, 0x38	; 56
    1054:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1058:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    105a:	69 e3       	ldi	r22, 0x39	; 57
    105c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1060:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    1062:	61 e4       	ldi	r22, 0x41	; 65
    1064:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1068:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    106a:	62 e4       	ldi	r22, 0x42	; 66
    106c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1070:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    1072:	63 e4       	ldi	r22, 0x43	; 67
    1074:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1078:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    107a:	64 e4       	ldi	r22, 0x44	; 68
    107c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1080:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    1082:	65 e4       	ldi	r22, 0x45	; 69
    1084:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
		break;
    1088:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    108a:	66 e4       	ldi	r22, 0x46	; 70
    108c:	0e 94 66 06 	call	0xccc	; 0xccc <uart_send_byte>
    1090:	08 95       	ret

00001092 <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    109c:	62 95       	swap	r22
    109e:	6f 70       	andi	r22, 0x0F	; 15
    10a0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    10a4:	61 2f       	mov	r22, r17
    10a6:	6f 70       	andi	r22, 0x0F	; 15
    10a8:	ce 01       	movw	r24, r28
    10aa:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <uart_send_HEX4>
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	08 95       	ret

000010b6 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    10c0:	0e 94 49 08 	call	0x1092	; 0x1092 <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    10c4:	ce 01       	movw	r24, r28
    10c6:	61 2f       	mov	r22, r17
    10c8:	0e 94 49 08 	call	0x1092	; 0x1092 <uart_send_HEX8>
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	08 95       	ret

000010d4 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	16 2f       	mov	r17, r22
    10de:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    10e0:	0e 94 49 08 	call	0x1092	; 0x1092 <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    10e4:	ce 01       	movw	r24, r28
    10e6:	61 2f       	mov	r22, r17
    10e8:	0e 94 49 08 	call	0x1092	; 0x1092 <uart_send_HEX8>
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	08 95       	ret

000010f4 <uart_enq_BIN4>:
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(uint8_t lowb){
	switch(lowb){
    10f4:	87 30       	cpi	r24, 0x07	; 7
    10f6:	09 f4       	brne	.+2      	; 0x10fa <uart_enq_BIN4+0x6>
    10f8:	87 c0       	rjmp	.+270    	; 0x1208 <uart_enq_BIN4+0x114>
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	88 f4       	brcc	.+34     	; 0x1120 <uart_enq_BIN4+0x2c>
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	09 f4       	brne	.+2      	; 0x1104 <uart_enq_BIN4+0x10>
    1102:	4e c0       	rjmp	.+156    	; 0x11a0 <uart_enq_BIN4+0xac>
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	28 f4       	brcc	.+10     	; 0x1112 <uart_enq_BIN4+0x1e>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	81 f1       	breq	.+96     	; 0x116c <uart_enq_BIN4+0x78>
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	d8 f5       	brcc	.+118    	; 0x1186 <uart_enq_BIN4+0x92>
    1110:	20 c0       	rjmp	.+64     	; 0x1152 <uart_enq_BIN4+0x5e>
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	09 f4       	brne	.+2      	; 0x1118 <uart_enq_BIN4+0x24>
    1116:	5e c0       	rjmp	.+188    	; 0x11d4 <uart_enq_BIN4+0xe0>
    1118:	86 30       	cpi	r24, 0x06	; 6
    111a:	08 f0       	brcs	.+2      	; 0x111e <uart_enq_BIN4+0x2a>
    111c:	68 c0       	rjmp	.+208    	; 0x11ee <uart_enq_BIN4+0xfa>
    111e:	4d c0       	rjmp	.+154    	; 0x11ba <uart_enq_BIN4+0xc6>
    1120:	8b 30       	cpi	r24, 0x0B	; 11
    1122:	09 f4       	brne	.+2      	; 0x1126 <uart_enq_BIN4+0x32>
    1124:	a5 c0       	rjmp	.+330    	; 0x1270 <uart_enq_BIN4+0x17c>
    1126:	8c 30       	cpi	r24, 0x0C	; 12
    1128:	38 f4       	brcc	.+14     	; 0x1138 <uart_enq_BIN4+0x44>
    112a:	89 30       	cpi	r24, 0x09	; 9
    112c:	09 f4       	brne	.+2      	; 0x1130 <uart_enq_BIN4+0x3c>
    112e:	86 c0       	rjmp	.+268    	; 0x123c <uart_enq_BIN4+0x148>
    1130:	8a 30       	cpi	r24, 0x0A	; 10
    1132:	08 f0       	brcs	.+2      	; 0x1136 <uart_enq_BIN4+0x42>
    1134:	90 c0       	rjmp	.+288    	; 0x1256 <uart_enq_BIN4+0x162>
    1136:	75 c0       	rjmp	.+234    	; 0x1222 <uart_enq_BIN4+0x12e>
    1138:	8d 30       	cpi	r24, 0x0D	; 13
    113a:	09 f4       	brne	.+2      	; 0x113e <uart_enq_BIN4+0x4a>
    113c:	b3 c0       	rjmp	.+358    	; 0x12a4 <uart_enq_BIN4+0x1b0>
    113e:	8d 30       	cpi	r24, 0x0D	; 13
    1140:	08 f4       	brcc	.+2      	; 0x1144 <uart_enq_BIN4+0x50>
    1142:	a3 c0       	rjmp	.+326    	; 0x128a <uart_enq_BIN4+0x196>
    1144:	8e 30       	cpi	r24, 0x0E	; 14
    1146:	09 f4       	brne	.+2      	; 0x114a <uart_enq_BIN4+0x56>
    1148:	ba c0       	rjmp	.+372    	; 0x12be <uart_enq_BIN4+0x1ca>
    114a:	8f 30       	cpi	r24, 0x0F	; 15
    114c:	09 f0       	breq	.+2      	; 0x1150 <uart_enq_BIN4+0x5c>
    114e:	d0 c0       	rjmp	.+416    	; 0x12f0 <uart_enq_BIN4+0x1fc>
    1150:	c3 c0       	rjmp	.+390    	; 0x12d8 <uart_enq_BIN4+0x1e4>
	case(0):
		uart_enqueue('0');
    1152:	80 e3       	ldi	r24, 0x30	; 48
    1154:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1158:	80 e3       	ldi	r24, 0x30	; 48
    115a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1164:	80 e3       	ldi	r24, 0x30	; 48
    1166:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    116a:	08 95       	ret
	case(1):
		uart_enqueue('0');
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1172:	80 e3       	ldi	r24, 0x30	; 48
    1174:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1178:	80 e3       	ldi	r24, 0x30	; 48
    117a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    117e:	81 e3       	ldi	r24, 0x31	; 49
    1180:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1184:	08 95       	ret
	case(2):
		uart_enqueue('0');
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    118c:	80 e3       	ldi	r24, 0x30	; 48
    118e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    1192:	81 e3       	ldi	r24, 0x31	; 49
    1194:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    119e:	08 95       	ret
	case(3):
		uart_enqueue('0');
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    11a6:	80 e3       	ldi	r24, 0x30	; 48
    11a8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11ac:	81 e3       	ldi	r24, 0x31	; 49
    11ae:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11b2:	81 e3       	ldi	r24, 0x31	; 49
    11b4:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    11b8:	08 95       	ret
	case(4):
		uart_enqueue('0');
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11c0:	81 e3       	ldi	r24, 0x31	; 49
    11c2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    11cc:	80 e3       	ldi	r24, 0x30	; 48
    11ce:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    11d2:	08 95       	ret
	case(5):
		uart_enqueue('0');
    11d4:	80 e3       	ldi	r24, 0x30	; 48
    11d6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11da:	81 e3       	ldi	r24, 0x31	; 49
    11dc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11e6:	81 e3       	ldi	r24, 0x31	; 49
    11e8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    11ec:	08 95       	ret
	case(6):
		uart_enqueue('0');
    11ee:	80 e3       	ldi	r24, 0x30	; 48
    11f0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11f4:	81 e3       	ldi	r24, 0x31	; 49
    11f6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    11fa:	81 e3       	ldi	r24, 0x31	; 49
    11fc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1200:	80 e3       	ldi	r24, 0x30	; 48
    1202:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1206:	08 95       	ret
	case(7):
		uart_enqueue('0');
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    120e:	81 e3       	ldi	r24, 0x31	; 49
    1210:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    121a:	81 e3       	ldi	r24, 0x31	; 49
    121c:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1220:	08 95       	ret
	case(8):
		uart_enqueue('1');
    1222:	81 e3       	ldi	r24, 0x31	; 49
    1224:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1228:	80 e3       	ldi	r24, 0x30	; 48
    122a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    122e:	80 e3       	ldi	r24, 0x30	; 48
    1230:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    123a:	08 95       	ret
	case(9):
		uart_enqueue('1');
    123c:	81 e3       	ldi	r24, 0x31	; 49
    123e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    124e:	81 e3       	ldi	r24, 0x31	; 49
    1250:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1254:	08 95       	ret
	case(10):
		uart_enqueue('1');
    1256:	81 e3       	ldi	r24, 0x31	; 49
    1258:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    1262:	81 e3       	ldi	r24, 0x31	; 49
    1264:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1268:	80 e3       	ldi	r24, 0x30	; 48
    126a:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    126e:	08 95       	ret
	case(11):
		uart_enqueue('1');
    1270:	81 e3       	ldi	r24, 0x31	; 49
    1272:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1276:	80 e3       	ldi	r24, 0x30	; 48
    1278:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    127c:	81 e3       	ldi	r24, 0x31	; 49
    127e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    1282:	81 e3       	ldi	r24, 0x31	; 49
    1284:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1288:	08 95       	ret
	case(12):
		uart_enqueue('1');
    128a:	81 e3       	ldi	r24, 0x31	; 49
    128c:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    1290:	81 e3       	ldi	r24, 0x31	; 49
    1292:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    1296:	80 e3       	ldi	r24, 0x30	; 48
    1298:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    12a2:	08 95       	ret
	case(13):
		uart_enqueue('1');
    12a4:	81 e3       	ldi	r24, 0x31	; 49
    12a6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12aa:	81 e3       	ldi	r24, 0x31	; 49
    12ac:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    12b0:	80 e3       	ldi	r24, 0x30	; 48
    12b2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12b6:	81 e3       	ldi	r24, 0x31	; 49
    12b8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    12bc:	08 95       	ret
	case(14):
		uart_enqueue('1');
    12be:	81 e3       	ldi	r24, 0x31	; 49
    12c0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12c4:	81 e3       	ldi	r24, 0x31	; 49
    12c6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12ca:	81 e3       	ldi	r24, 0x31	; 49
    12cc:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('0');
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    12d6:	08 95       	ret
	case(15):
		uart_enqueue('1');
    12d8:	81 e3       	ldi	r24, 0x31	; 49
    12da:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12de:	81 e3       	ldi	r24, 0x31	; 49
    12e0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12e4:	81 e3       	ldi	r24, 0x31	; 49
    12e6:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		uart_enqueue('1');
    12ea:	81 e3       	ldi	r24, 0x31	; 49
    12ec:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
    12f0:	08 95       	ret

000012f2 <uart_enq_BIN8>:
		break;
	}	
}

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(uint8_t lowb){
    12f2:	cf 93       	push	r28
    12f4:	c8 2f       	mov	r28, r24
	uart_enqueue('b');
    12f6:	82 e6       	ldi	r24, 0x62	; 98
    12f8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
	uart_enq_BIN4(lowb>>4);
    12fc:	8c 2f       	mov	r24, r28
    12fe:	82 95       	swap	r24
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <uart_enq_BIN4>
	uart_enq_BIN4(lowb & 0x0F);
    1306:	8c 2f       	mov	r24, r28
    1308:	8f 70       	andi	r24, 0x0F	; 15
    130a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <uart_enq_BIN4>
}
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <uart_enq_HEX4>:
	

void uart_enq_HEX4(uint8_t lowb){
	switch(lowb){
    1312:	87 30       	cpi	r24, 0x07	; 7
    1314:	09 f4       	brne	.+2      	; 0x1318 <uart_enq_HEX4+0x6>
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <uart_enq_HEX4+0x84>
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	70 f4       	brcc	.+28     	; 0x1338 <uart_enq_HEX4+0x26>
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	59 f1       	breq	.+86     	; 0x1376 <uart_enq_HEX4+0x64>
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	28 f4       	brcc	.+10     	; 0x132e <uart_enq_HEX4+0x1c>
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	f9 f0       	breq	.+62     	; 0x1366 <uart_enq_HEX4+0x54>
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	08 f5       	brcc	.+66     	; 0x136e <uart_enq_HEX4+0x5c>
    132c:	18 c0       	rjmp	.+48     	; 0x135e <uart_enq_HEX4+0x4c>
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	51 f1       	breq	.+84     	; 0x1386 <uart_enq_HEX4+0x74>
    1332:	86 30       	cpi	r24, 0x06	; 6
    1334:	60 f5       	brcc	.+88     	; 0x138e <uart_enq_HEX4+0x7c>
    1336:	23 c0       	rjmp	.+70     	; 0x137e <uart_enq_HEX4+0x6c>
    1338:	8b 30       	cpi	r24, 0x0B	; 11
    133a:	e9 f1       	breq	.+122    	; 0x13b6 <uart_enq_HEX4+0xa4>
    133c:	8c 30       	cpi	r24, 0x0C	; 12
    133e:	28 f4       	brcc	.+10     	; 0x134a <uart_enq_HEX4+0x38>
    1340:	89 30       	cpi	r24, 0x09	; 9
    1342:	89 f1       	breq	.+98     	; 0x13a6 <uart_enq_HEX4+0x94>
    1344:	8a 30       	cpi	r24, 0x0A	; 10
    1346:	98 f5       	brcc	.+102    	; 0x13ae <uart_enq_HEX4+0x9c>
    1348:	2a c0       	rjmp	.+84     	; 0x139e <uart_enq_HEX4+0x8c>
    134a:	8d 30       	cpi	r24, 0x0D	; 13
    134c:	e1 f1       	breq	.+120    	; 0x13c6 <uart_enq_HEX4+0xb4>
    134e:	8d 30       	cpi	r24, 0x0D	; 13
    1350:	b0 f1       	brcs	.+108    	; 0x13be <uart_enq_HEX4+0xac>
    1352:	8e 30       	cpi	r24, 0x0E	; 14
    1354:	e1 f1       	breq	.+120    	; 0x13ce <uart_enq_HEX4+0xbc>
    1356:	8f 30       	cpi	r24, 0x0F	; 15
    1358:	09 f0       	breq	.+2      	; 0x135c <uart_enq_HEX4+0x4a>
    135a:	40 c0       	rjmp	.+128    	; 0x13dc <uart_enq_HEX4+0xca>
    135c:	3c c0       	rjmp	.+120    	; 0x13d6 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue( '0');
    135e:	80 e3       	ldi	r24, 0x30	; 48
    1360:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1364:	08 95       	ret
	case(1):
		uart_enqueue( '1');
    1366:	81 e3       	ldi	r24, 0x31	; 49
    1368:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    136c:	08 95       	ret
	case(2):
		uart_enqueue( '2');
    136e:	82 e3       	ldi	r24, 0x32	; 50
    1370:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1374:	08 95       	ret
	case(3):
		uart_enqueue( '3');
    1376:	83 e3       	ldi	r24, 0x33	; 51
    1378:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    137c:	08 95       	ret
	case(4):
		uart_enqueue( '4');
    137e:	84 e3       	ldi	r24, 0x34	; 52
    1380:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1384:	08 95       	ret
	case(5):
		uart_enqueue( '5');
    1386:	85 e3       	ldi	r24, 0x35	; 53
    1388:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    138c:	08 95       	ret
	case(6):
		uart_enqueue( '6');
    138e:	86 e3       	ldi	r24, 0x36	; 54
    1390:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    1394:	08 95       	ret
	case(7):
		uart_enqueue( '7');
    1396:	87 e3       	ldi	r24, 0x37	; 55
    1398:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    139c:	08 95       	ret
	case(8):
		uart_enqueue( '8');
    139e:	88 e3       	ldi	r24, 0x38	; 56
    13a0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13a4:	08 95       	ret
	case(9):
		uart_enqueue( '9');
    13a6:	89 e3       	ldi	r24, 0x39	; 57
    13a8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13ac:	08 95       	ret
	case(10):
		uart_enqueue( 'A');
    13ae:	81 e4       	ldi	r24, 0x41	; 65
    13b0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13b4:	08 95       	ret
	case(11):
		uart_enqueue( 'B');
    13b6:	82 e4       	ldi	r24, 0x42	; 66
    13b8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13bc:	08 95       	ret
	case(12):
		uart_enqueue( 'C');
    13be:	83 e4       	ldi	r24, 0x43	; 67
    13c0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13c4:	08 95       	ret
	case(13):
		uart_enqueue( 'D');
    13c6:	84 e4       	ldi	r24, 0x44	; 68
    13c8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13cc:	08 95       	ret
	case(14):
		uart_enqueue( 'E');
    13ce:	85 e4       	ldi	r24, 0x45	; 69
    13d0:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
		break;
    13d4:	08 95       	ret
	case(15):
		uart_enqueue( 'F');
    13d6:	86 e4       	ldi	r24, 0x46	; 70
    13d8:	0e 94 15 0c 	call	0x182a	; 0x182a <uart_enqueue>
    13dc:	08 95       	ret

000013de <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(uint8_t lowb){
    13de:	cf 93       	push	r28
    13e0:	c8 2f       	mov	r28, r24
	uart_enq_HEX4(lowb>>4);
    13e2:	82 95       	swap	r24
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	0e 94 89 09 	call	0x1312	; 0x1312 <uart_enq_HEX4>
	uart_enq_HEX4(lowb & 0x0F);
    13ea:	8c 2f       	mov	r24, r28
    13ec:	8f 70       	andi	r24, 0x0F	; 15
    13ee:	0e 94 89 09 	call	0x1312	; 0x1312 <uart_enq_HEX4>
}
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <uart_enq_HEX16b>:

void uart_enq_HEX16b(uint8_t highb, uint8_t lowb){
    13f6:	cf 93       	push	r28
    13f8:	c6 2f       	mov	r28, r22
	uart_enq_HEX8(highb);
    13fa:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_enq_HEX8>
	uart_enq_HEX8(lowb);
    13fe:	8c 2f       	mov	r24, r28
    1400:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_enq_HEX8>
}
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <uart_enq_HEX16>:

void uart_enq_HEX16(uint16_t highb){
    1408:	cf 93       	push	r28
    140a:	c8 2f       	mov	r28, r24
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(blah);
    140c:	89 2f       	mov	r24, r25
    140e:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(blah);
    1412:	8c 2f       	mov	r24, r28
    1414:	0e 94 ef 09 	call	0x13de	; 0x13de <uart_enq_HEX8>
}
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <__vector_58>:
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1436:	e0 91 28 22 	lds	r30, 0x2228
    143a:	f0 91 29 22 	lds	r31, 0x2229
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    143e:	82 e2       	ldi	r24, 0x22	; 34
    1440:	90 e2       	ldi	r25, 0x20	; 32
    1442:	12 c0       	rjmp	.+36     	; 0x1468 <__vector_58+0x4c>
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    1444:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1446:	30 91 24 22 	lds	r19, 0x2224
    144a:	dc 01       	movw	r26, r24
    144c:	a3 0f       	add	r26, r19
    144e:	b1 1d       	adc	r27, r1
    1450:	2c 93       	st	X, r18
	uart_ihead++;
    1452:	20 91 24 22 	lds	r18, 0x2224
    1456:	2f 5f       	subi	r18, 0xFF	; 255
    1458:	20 93 24 22 	sts	0x2224, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    145c:	20 91 24 22 	lds	r18, 0x2224
    1460:	2a 3f       	cpi	r18, 0xFA	; 250
    1462:	10 f0       	brcs	.+4      	; 0x1468 <__vector_58+0x4c>
		uart_ihead = 0;
    1464:	10 92 24 22 	sts	0x2224, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1468:	21 81       	ldd	r18, Z+1	; 0x01
    146a:	22 23       	and	r18, r18
    146c:	a4 f4       	brge	.+40     	; 0x1496 <__vector_58+0x7a>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    146e:	30 91 24 22 	lds	r19, 0x2224
    1472:	20 91 21 20 	lds	r18, 0x2021
    1476:	32 17       	cp	r19, r18
    1478:	30 f0       	brcs	.+12     	; 0x1486 <__vector_58+0x6a>
		return (uart_ihead - uart_itail);
    147a:	20 91 24 22 	lds	r18, 0x2224
    147e:	30 91 21 20 	lds	r19, 0x2021
    1482:	23 1b       	sub	r18, r19
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <__vector_58+0x76>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1486:	20 91 24 22 	lds	r18, 0x2224
    148a:	30 91 21 20 	lds	r19, 0x2021
    148e:	26 50       	subi	r18, 0x06	; 6
    1490:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1492:	2a 3f       	cpi	r18, 0xFA	; 250
    1494:	b8 f2       	brcs	.-82     	; 0x1444 <__vector_58+0x28>
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
	uart_receive();
}
    1496:	ff 91       	pop	r31
    1498:	ef 91       	pop	r30
    149a:	bf 91       	pop	r27
    149c:	af 91       	pop	r26
    149e:	9f 91       	pop	r25
    14a0:	8f 91       	pop	r24
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <uart_rxbuffer_enable>:
		uart_txbuffer_enable();		
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    14b0:	e0 91 28 22 	lds	r30, 0x2228
    14b4:	f0 91 29 22 	lds	r31, 0x2229
    14b8:	83 81       	ldd	r24, Z+3	; 0x03
    14ba:	80 63       	ori	r24, 0x30	; 48
    14bc:	83 83       	std	Z+3, r24	; 0x03
}
    14be:	08 95       	ret

000014c0 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    14c0:	e0 91 28 22 	lds	r30, 0x2228
    14c4:	f0 91 29 22 	lds	r31, 0x2229
    14c8:	83 81       	ldd	r24, Z+3	; 0x03
    14ca:	8f 7c       	andi	r24, 0xCF	; 207
    14cc:	83 83       	std	Z+3, r24	; 0x03
}
    14ce:	08 95       	ret

000014d0 <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    14d0:	e0 91 28 22 	lds	r30, 0x2228
    14d4:	f0 91 29 22 	lds	r31, 0x2229
    14d8:	83 81       	ldd	r24, Z+3	; 0x03
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	83 83       	std	Z+3, r24	; 0x03
}
    14de:	08 95       	ret

000014e0 <uart_txbuffer_disable>:

void uart_txbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    14e0:	e0 91 28 22 	lds	r30, 0x2228
    14e4:	f0 91 29 22 	lds	r31, 0x2229
    14e8:	83 81       	ldd	r24, Z+3	; 0x03
    14ea:	8c 7f       	andi	r24, 0xFC	; 252
    14ec:	83 83       	std	Z+3, r24	; 0x03
}
    14ee:	08 95       	ret

000014f0 <__vector_59>:
//** [PORT SPECIFIC CODE] -- CURRENTLY TUNED TO UART F1
//************************************************************************
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1512:	e0 91 28 22 	lds	r30, 0x2228
    1516:	f0 91 29 22 	lds	r31, 0x2229
    151a:	81 81       	ldd	r24, Z+1	; 0x01
    151c:	85 fd       	sbrc	r24, 5
    151e:	1b c0       	rjmp	.+54     	; 0x1556 <__vector_59+0x66>
    1520:	30 c0       	rjmp	.+96     	; 0x1582 <__vector_59+0x92>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1522:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    1526:	30 91 25 22 	lds	r19, 0x2225
    152a:	3f 5f       	subi	r19, 0xFF	; 255
    152c:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    1530:	30 91 25 22 	lds	r19, 0x2225
    1534:	3a 3f       	cpi	r19, 0xFA	; 250
    1536:	10 f0       	brcs	.+4      	; 0x153c <__vector_59+0x4c>
		uart_tail = 0;
    1538:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    153c:	dc 01       	movw	r26, r24
    153e:	a2 0f       	add	r26, r18
    1540:	b1 1d       	adc	r27, r1
    1542:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1544:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1546:	e0 91 28 22 	lds	r30, 0x2228
    154a:	f0 91 29 22 	lds	r31, 0x2229
    154e:	21 81       	ldd	r18, Z+1	; 0x01
    1550:	25 fd       	sbrc	r18, 5
    1552:	03 c0       	rjmp	.+6      	; 0x155a <__vector_59+0x6a>
    1554:	16 c0       	rjmp	.+44     	; 0x1582 <__vector_59+0x92>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1556:	8a e2       	ldi	r24, 0x2A	; 42
    1558:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    155a:	30 91 29 21 	lds	r19, 0x2129
    155e:	20 91 25 22 	lds	r18, 0x2225
    1562:	32 17       	cp	r19, r18
    1564:	30 f0       	brcs	.+12     	; 0x1572 <__vector_59+0x82>
		return (uart_head - uart_tail);
    1566:	20 91 29 21 	lds	r18, 0x2129
    156a:	30 91 25 22 	lds	r19, 0x2225
    156e:	23 1b       	sub	r18, r19
    1570:	06 c0       	rjmp	.+12     	; 0x157e <__vector_59+0x8e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1572:	20 91 29 21 	lds	r18, 0x2129
    1576:	30 91 25 22 	lds	r19, 0x2225
    157a:	26 50       	subi	r18, 0x06	; 6
    157c:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    157e:	22 23       	and	r18, r18
    1580:	81 f6       	brne	.-96     	; 0x1522 <__vector_59+0x32>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1582:	90 91 29 21 	lds	r25, 0x2129
    1586:	80 91 25 22 	lds	r24, 0x2225
    158a:	98 17       	cp	r25, r24
    158c:	30 f0       	brcs	.+12     	; 0x159a <__vector_59+0xaa>
		return (uart_head - uart_tail);
    158e:	80 91 29 21 	lds	r24, 0x2129
    1592:	90 91 25 22 	lds	r25, 0x2225
    1596:	89 1b       	sub	r24, r25
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <__vector_59+0xb6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    159a:	80 91 29 21 	lds	r24, 0x2129
    159e:	90 91 25 22 	lds	r25, 0x2225
    15a2:	86 50       	subi	r24, 0x06	; 6
    15a4:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    15a6:	88 23       	and	r24, r24
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <__vector_59+0xc0>
    15aa:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <uart_txbuffer_enable>
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <__vector_59+0xc4>
	else uart_txbuffer_disable();
    15b0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uart_txbuffer_disable>
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <uart_transmit>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15d6:	e0 91 28 22 	lds	r30, 0x2228
    15da:	f0 91 29 22 	lds	r31, 0x2229
    15de:	81 81       	ldd	r24, Z+1	; 0x01
    15e0:	85 fd       	sbrc	r24, 5
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <uart_transmit+0x44>
    15e4:	30 c0       	rjmp	.+96     	; 0x1646 <uart_transmit+0x70>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    15e6:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    15ea:	30 91 25 22 	lds	r19, 0x2225
    15ee:	3f 5f       	subi	r19, 0xFF	; 255
    15f0:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    15f4:	30 91 25 22 	lds	r19, 0x2225
    15f8:	3a 3f       	cpi	r19, 0xFA	; 250
    15fa:	10 f0       	brcs	.+4      	; 0x1600 <uart_transmit+0x2a>
		uart_tail = 0;
    15fc:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    1600:	dc 01       	movw	r26, r24
    1602:	a2 0f       	add	r26, r18
    1604:	b1 1d       	adc	r27, r1
    1606:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1608:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    160a:	e0 91 28 22 	lds	r30, 0x2228
    160e:	f0 91 29 22 	lds	r31, 0x2229
    1612:	21 81       	ldd	r18, Z+1	; 0x01
    1614:	25 fd       	sbrc	r18, 5
    1616:	03 c0       	rjmp	.+6      	; 0x161e <uart_transmit+0x48>
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <uart_transmit+0x70>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    161a:	8a e2       	ldi	r24, 0x2A	; 42
    161c:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    161e:	30 91 29 21 	lds	r19, 0x2129
    1622:	20 91 25 22 	lds	r18, 0x2225
    1626:	32 17       	cp	r19, r18
    1628:	30 f0       	brcs	.+12     	; 0x1636 <uart_transmit+0x60>
		return (uart_head - uart_tail);
    162a:	20 91 29 21 	lds	r18, 0x2129
    162e:	30 91 25 22 	lds	r19, 0x2225
    1632:	23 1b       	sub	r18, r19
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <uart_transmit+0x6c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1636:	20 91 29 21 	lds	r18, 0x2129
    163a:	30 91 25 22 	lds	r19, 0x2225
    163e:	26 50       	subi	r18, 0x06	; 6
    1640:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1642:	22 23       	and	r18, r18
    1644:	81 f6       	brne	.-96     	; 0x15e6 <uart_transmit+0x10>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1646:	90 91 29 21 	lds	r25, 0x2129
    164a:	80 91 25 22 	lds	r24, 0x2225
    164e:	98 17       	cp	r25, r24
    1650:	30 f0       	brcs	.+12     	; 0x165e <uart_transmit+0x88>
		return (uart_head - uart_tail);
    1652:	80 91 29 21 	lds	r24, 0x2129
    1656:	90 91 25 22 	lds	r25, 0x2225
    165a:	89 1b       	sub	r24, r25
    165c:	06 c0       	rjmp	.+12     	; 0x166a <uart_transmit+0x94>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    165e:	80 91 29 21 	lds	r24, 0x2129
    1662:	90 91 25 22 	lds	r25, 0x2225
    1666:	86 50       	subi	r24, 0x06	; 6
    1668:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    166a:	88 23       	and	r24, r24
    166c:	19 f0       	breq	.+6      	; 0x1674 <uart_transmit+0x9e>
    166e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <uart_txbuffer_enable>
    1672:	08 95       	ret
	else uart_txbuffer_disable();
    1674:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uart_txbuffer_disable>
    1678:	08 95       	ret

0000167a <uart_receive>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    167a:	e0 91 28 22 	lds	r30, 0x2228
    167e:	f0 91 29 22 	lds	r31, 0x2229
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1682:	82 e2       	ldi	r24, 0x22	; 34
    1684:	90 e2       	ldi	r25, 0x20	; 32
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1686:	12 c0       	rjmp	.+36     	; 0x16ac <uart_receive+0x32>
		incomingByte = port->DATA;
    1688:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    168a:	30 91 24 22 	lds	r19, 0x2224
    168e:	dc 01       	movw	r26, r24
    1690:	a3 0f       	add	r26, r19
    1692:	b1 1d       	adc	r27, r1
    1694:	2c 93       	st	X, r18
	uart_ihead++;
    1696:	20 91 24 22 	lds	r18, 0x2224
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	20 93 24 22 	sts	0x2224, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    16a0:	20 91 24 22 	lds	r18, 0x2224
    16a4:	2a 3f       	cpi	r18, 0xFA	; 250
    16a6:	10 f0       	brcs	.+4      	; 0x16ac <uart_receive+0x32>
		uart_ihead = 0;
    16a8:	10 92 24 22 	sts	0x2224, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    16ac:	21 81       	ldd	r18, Z+1	; 0x01
    16ae:	22 23       	and	r18, r18
    16b0:	a4 f4       	brge	.+40     	; 0x16da <uart_receive+0x60>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    16b2:	30 91 24 22 	lds	r19, 0x2224
    16b6:	20 91 21 20 	lds	r18, 0x2021
    16ba:	32 17       	cp	r19, r18
    16bc:	30 f0       	brcs	.+12     	; 0x16ca <uart_receive+0x50>
		return (uart_ihead - uart_itail);
    16be:	20 91 24 22 	lds	r18, 0x2224
    16c2:	30 91 21 20 	lds	r19, 0x2021
    16c6:	23 1b       	sub	r18, r19
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <uart_receive+0x5c>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    16ca:	20 91 24 22 	lds	r18, 0x2224
    16ce:	30 91 21 20 	lds	r19, 0x2021
    16d2:	26 50       	subi	r18, 0x06	; 6
    16d4:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    16d6:	2a 3f       	cpi	r18, 0xFA	; 250
    16d8:	b8 f2       	brcs	.-82     	; 0x1688 <uart_receive+0xe>
    16da:	08 95       	ret

000016dc <init_uart_obuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(void){
	uart_head = 0;
    16dc:	10 92 29 21 	sts	0x2129, r1
	uart_tail = 0;
    16e0:	10 92 25 22 	sts	0x2225, r1
}
    16e4:	08 95       	ret

000016e6 <uart_count>:

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    16e6:	90 91 29 21 	lds	r25, 0x2129
    16ea:	80 91 25 22 	lds	r24, 0x2225
    16ee:	98 17       	cp	r25, r24
    16f0:	30 f0       	brcs	.+12     	; 0x16fe <uart_count+0x18>
		return (uart_head - uart_tail);
    16f2:	80 91 29 21 	lds	r24, 0x2129
    16f6:	90 91 25 22 	lds	r25, 0x2225
    16fa:	89 1b       	sub	r24, r25
    16fc:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    16fe:	80 91 29 21 	lds	r24, 0x2129
    1702:	90 91 25 22 	lds	r25, 0x2225
    1706:	86 50       	subi	r24, 0x06	; 6
    1708:	89 1b       	sub	r24, r25
	}
}
    170a:	08 95       	ret

0000170c <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
	uint16_t length = (uint16_t)strlen(string_in);
    171c:	e8 2f       	mov	r30, r24
    171e:	f9 2f       	mov	r31, r25
    1720:	df 01       	movw	r26, r30
    1722:	0d 90       	ld	r0, X+
    1724:	00 20       	and	r0, r0
    1726:	e9 f7       	brne	.-6      	; 0x1722 <uart_enqueue_string+0x16>
    1728:	11 97       	sbiw	r26, 0x01	; 1
    172a:	6d 01       	movw	r12, r26
    172c:	ce 1a       	sub	r12, r30
    172e:	df 0a       	sbc	r13, r31
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    1730:	09 f4       	brne	.+2      	; 0x1734 <uart_enqueue_string+0x28>
    1732:	72 c0       	rjmp	.+228    	; 0x1818 <uart_enqueue_string+0x10c>
    1734:	e8 2e       	mov	r14, r24
    1736:	f9 2e       	mov	r15, r25
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	10 e0       	ldi	r17, 0x00	; 0
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    173c:	ca e2       	ldi	r28, 0x2A	; 42
    173e:	d1 e2       	ldi	r29, 0x21	; 33
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    1740:	f7 01       	movw	r30, r14
    1742:	81 91       	ld	r24, Z+
    1744:	7f 01       	movw	r14, r30
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    1746:	90 91 29 21 	lds	r25, 0x2129
    174a:	fe 01       	movw	r30, r28
    174c:	e9 0f       	add	r30, r25
    174e:	f1 1d       	adc	r31, r1
    1750:	80 83       	st	Z, r24
	uart_head++;
    1752:	80 91 29 21 	lds	r24, 0x2129
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	80 93 29 21 	sts	0x2129, r24
	if (uart_head >= MAX_BUFFER_LEN){
    175c:	80 91 29 21 	lds	r24, 0x2129
    1760:	8a 3f       	cpi	r24, 0xFA	; 250
    1762:	10 f0       	brcs	.+4      	; 0x1768 <uart_enqueue_string+0x5c>
		uart_head = 0;
    1764:	10 92 29 21 	sts	0x2129, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1768:	a0 91 28 22 	lds	r26, 0x2228
    176c:	b0 91 29 22 	lds	r27, 0x2229
    1770:	11 96       	adiw	r26, 0x01	; 1
    1772:	8c 91       	ld	r24, X
    1774:	11 97       	sbiw	r26, 0x01	; 1
    1776:	85 fd       	sbrc	r24, 5
    1778:	1c c0       	rjmp	.+56     	; 0x17b2 <uart_enqueue_string+0xa6>
    177a:	2f c0       	rjmp	.+94     	; 0x17da <uart_enqueue_string+0xce>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    177c:	80 91 25 22 	lds	r24, 0x2225
	uart_tail++;
    1780:	90 91 25 22 	lds	r25, 0x2225
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	90 93 25 22 	sts	0x2225, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    178a:	90 91 25 22 	lds	r25, 0x2225
    178e:	9a 3f       	cpi	r25, 0xFA	; 250
    1790:	10 f0       	brcs	.+4      	; 0x1796 <uart_enqueue_string+0x8a>
		uart_tail = 0;
    1792:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    1796:	fe 01       	movw	r30, r28
    1798:	e8 0f       	add	r30, r24
    179a:	f1 1d       	adc	r31, r1
    179c:	80 81       	ld	r24, Z
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    179e:	8c 93       	st	X, r24
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    17a0:	a0 91 28 22 	lds	r26, 0x2228
    17a4:	b0 91 29 22 	lds	r27, 0x2229
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	8c 91       	ld	r24, X
    17ac:	11 97       	sbiw	r26, 0x01	; 1
    17ae:	85 ff       	sbrs	r24, 5
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <uart_enqueue_string+0xce>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    17b2:	90 91 29 21 	lds	r25, 0x2129
    17b6:	80 91 25 22 	lds	r24, 0x2225
    17ba:	98 17       	cp	r25, r24
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <uart_enqueue_string+0xbe>
		return (uart_head - uart_tail);
    17be:	80 91 29 21 	lds	r24, 0x2129
    17c2:	90 91 25 22 	lds	r25, 0x2225
    17c6:	89 1b       	sub	r24, r25
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <uart_enqueue_string+0xca>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    17ca:	80 91 29 21 	lds	r24, 0x2129
    17ce:	90 91 25 22 	lds	r25, 0x2225
    17d2:	86 50       	subi	r24, 0x06	; 6
    17d4:	89 1b       	sub	r24, r25
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    17d6:	88 23       	and	r24, r24
    17d8:	89 f6       	brne	.-94     	; 0x177c <uart_enqueue_string+0x70>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    17da:	90 91 29 21 	lds	r25, 0x2129
    17de:	80 91 25 22 	lds	r24, 0x2225
    17e2:	98 17       	cp	r25, r24
    17e4:	30 f0       	brcs	.+12     	; 0x17f2 <uart_enqueue_string+0xe6>
		return (uart_head - uart_tail);
    17e6:	80 91 29 21 	lds	r24, 0x2129
    17ea:	90 91 25 22 	lds	r25, 0x2225
    17ee:	89 1b       	sub	r24, r25
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <uart_enqueue_string+0xf2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    17f2:	80 91 29 21 	lds	r24, 0x2129
    17f6:	90 91 25 22 	lds	r25, 0x2225
    17fa:	86 50       	subi	r24, 0x06	; 6
    17fc:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    17fe:	88 23       	and	r24, r24
    1800:	19 f0       	breq	.+6      	; 0x1808 <uart_enqueue_string+0xfc>
    1802:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <uart_txbuffer_enable>
    1806:	02 c0       	rjmp	.+4      	; 0x180c <uart_enqueue_string+0x100>
	else uart_txbuffer_disable();
    1808:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    180c:	0f 5f       	subi	r16, 0xFF	; 255
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	0c 15       	cp	r16, r12
    1812:	1d 05       	cpc	r17, r13
    1814:	09 f0       	breq	.+2      	; 0x1818 <uart_enqueue_string+0x10c>
    1816:	94 cf       	rjmp	.-216    	; 0x1740 <uart_enqueue_string+0x34>
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	08 95       	ret

0000182a <uart_enqueue>:
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    182a:	90 91 29 21 	lds	r25, 0x2129
    182e:	ea e2       	ldi	r30, 0x2A	; 42
    1830:	f1 e2       	ldi	r31, 0x21	; 33
    1832:	e9 0f       	add	r30, r25
    1834:	f1 1d       	adc	r31, r1
    1836:	80 83       	st	Z, r24
	uart_head++;
    1838:	80 91 29 21 	lds	r24, 0x2129
    183c:	8f 5f       	subi	r24, 0xFF	; 255
    183e:	80 93 29 21 	sts	0x2129, r24
	if (uart_head >= MAX_BUFFER_LEN){
    1842:	80 91 29 21 	lds	r24, 0x2129
    1846:	8a 3f       	cpi	r24, 0xFA	; 250
    1848:	10 f0       	brcs	.+4      	; 0x184e <uart_enqueue+0x24>
		uart_head = 0;
    184a:	10 92 29 21 	sts	0x2129, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    184e:	e0 91 28 22 	lds	r30, 0x2228
    1852:	f0 91 29 22 	lds	r31, 0x2229
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	85 fd       	sbrc	r24, 5
    185a:	1b c0       	rjmp	.+54     	; 0x1892 <uart_enqueue+0x68>
    185c:	30 c0       	rjmp	.+96     	; 0x18be <uart_enqueue+0x94>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    185e:	20 91 25 22 	lds	r18, 0x2225
	uart_tail++;
    1862:	30 91 25 22 	lds	r19, 0x2225
    1866:	3f 5f       	subi	r19, 0xFF	; 255
    1868:	30 93 25 22 	sts	0x2225, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    186c:	30 91 25 22 	lds	r19, 0x2225
    1870:	3a 3f       	cpi	r19, 0xFA	; 250
    1872:	10 f0       	brcs	.+4      	; 0x1878 <uart_enqueue+0x4e>
		uart_tail = 0;
    1874:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    1878:	dc 01       	movw	r26, r24
    187a:	a2 0f       	add	r26, r18
    187c:	b1 1d       	adc	r27, r1
    187e:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1880:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1882:	e0 91 28 22 	lds	r30, 0x2228
    1886:	f0 91 29 22 	lds	r31, 0x2229
    188a:	21 81       	ldd	r18, Z+1	; 0x01
    188c:	25 fd       	sbrc	r18, 5
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <uart_enqueue+0x6c>
    1890:	16 c0       	rjmp	.+44     	; 0x18be <uart_enqueue+0x94>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1892:	8a e2       	ldi	r24, 0x2A	; 42
    1894:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1896:	30 91 29 21 	lds	r19, 0x2129
    189a:	20 91 25 22 	lds	r18, 0x2225
    189e:	32 17       	cp	r19, r18
    18a0:	30 f0       	brcs	.+12     	; 0x18ae <uart_enqueue+0x84>
		return (uart_head - uart_tail);
    18a2:	20 91 29 21 	lds	r18, 0x2129
    18a6:	30 91 25 22 	lds	r19, 0x2225
    18aa:	23 1b       	sub	r18, r19
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <uart_enqueue+0x90>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    18ae:	20 91 29 21 	lds	r18, 0x2129
    18b2:	30 91 25 22 	lds	r19, 0x2225
    18b6:	26 50       	subi	r18, 0x06	; 6
    18b8:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    18ba:	22 23       	and	r18, r18
    18bc:	81 f6       	brne	.-96     	; 0x185e <uart_enqueue+0x34>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    18be:	90 91 29 21 	lds	r25, 0x2129
    18c2:	80 91 25 22 	lds	r24, 0x2225
    18c6:	98 17       	cp	r25, r24
    18c8:	30 f0       	brcs	.+12     	; 0x18d6 <uart_enqueue+0xac>
		return (uart_head - uart_tail);
    18ca:	80 91 29 21 	lds	r24, 0x2129
    18ce:	90 91 25 22 	lds	r25, 0x2225
    18d2:	89 1b       	sub	r24, r25
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <uart_enqueue+0xb8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    18d6:	80 91 29 21 	lds	r24, 0x2129
    18da:	90 91 25 22 	lds	r25, 0x2225
    18de:	86 50       	subi	r24, 0x06	; 6
    18e0:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    18e2:	88 23       	and	r24, r24
    18e4:	19 f0       	breq	.+6      	; 0x18ec <uart_enqueue+0xc2>
    18e6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <uart_txbuffer_enable>
    18ea:	08 95       	ret
	else uart_txbuffer_disable();
    18ec:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <uart_txbuffer_disable>
    18f0:	08 95       	ret

000018f2 <uart_dequeue>:
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    18f2:	80 91 25 22 	lds	r24, 0x2225
	uart_tail++;
    18f6:	90 91 25 22 	lds	r25, 0x2225
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	90 93 25 22 	sts	0x2225, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    1900:	90 91 25 22 	lds	r25, 0x2225
    1904:	9a 3f       	cpi	r25, 0xFA	; 250
    1906:	10 f0       	brcs	.+4      	; 0x190c <uart_dequeue+0x1a>
		uart_tail = 0;
    1908:	10 92 25 22 	sts	0x2225, r1
	}
	return uart_buffer[oldtail];
    190c:	ea e2       	ldi	r30, 0x2A	; 42
    190e:	f1 e2       	ldi	r31, 0x21	; 33
    1910:	e8 0f       	add	r30, r24
    1912:	f1 1d       	adc	r31, r1
    1914:	80 81       	ld	r24, Z
}
    1916:	08 95       	ret

00001918 <init_uart_ibuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(void){
	uart_ihead = 0;
    1918:	10 92 24 22 	sts	0x2224, r1
	uart_itail = 0;
    191c:	10 92 21 20 	sts	0x2021, r1
}
    1920:	08 95       	ret

00001922 <init_uart_buffer>:
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* which){
	//Setup UART hardware
		port = which;
    1922:	80 93 28 22 	sts	0x2228, r24
    1926:	90 93 29 22 	sts	0x2229, r25
		
	//Setup data buffers
		init_uart_obuffer();
    192a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <init_uart_obuffer>
		init_uart_ibuffer();
    192e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <init_uart_ibuffer>
	
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable();
    1932:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <uart_rxbuffer_enable>
		uart_txbuffer_enable();		
    1936:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <uart_txbuffer_enable>
}
    193a:	08 95       	ret

0000193c <uart_icount>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    193c:	90 91 24 22 	lds	r25, 0x2224
    1940:	80 91 21 20 	lds	r24, 0x2021
    1944:	98 17       	cp	r25, r24
    1946:	30 f0       	brcs	.+12     	; 0x1954 <uart_icount+0x18>
		return (uart_ihead - uart_itail);
    1948:	80 91 24 22 	lds	r24, 0x2224
    194c:	90 91 21 20 	lds	r25, 0x2021
    1950:	89 1b       	sub	r24, r25
    1952:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1954:	80 91 24 22 	lds	r24, 0x2224
    1958:	90 91 21 20 	lds	r25, 0x2021
    195c:	86 50       	subi	r24, 0x06	; 6
    195e:	89 1b       	sub	r24, r25
	}
}
    1960:	08 95       	ret

00001962 <uart_ienqueue>:

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1962:	90 91 24 22 	lds	r25, 0x2224
    1966:	e2 e2       	ldi	r30, 0x22	; 34
    1968:	f0 e2       	ldi	r31, 0x20	; 32
    196a:	e9 0f       	add	r30, r25
    196c:	f1 1d       	adc	r31, r1
    196e:	80 83       	st	Z, r24
	uart_ihead++;
    1970:	80 91 24 22 	lds	r24, 0x2224
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 24 22 	sts	0x2224, r24
	if (uart_ihead >= MAX_IBUFFER_LEN){
    197a:	80 91 24 22 	lds	r24, 0x2224
    197e:	8a 3f       	cpi	r24, 0xFA	; 250
    1980:	10 f0       	brcs	.+4      	; 0x1986 <uart_ienqueue+0x24>
		uart_ihead = 0;
    1982:	10 92 24 22 	sts	0x2224, r1
    1986:	08 95       	ret

00001988 <uart_idequeue>:
	}
}

inline uint8_t uart_idequeue(void){
	uint8_t oldtail;
	oldtail = uart_itail;
    1988:	80 91 21 20 	lds	r24, 0x2021
	uart_itail++;
    198c:	90 91 21 20 	lds	r25, 0x2021
    1990:	9f 5f       	subi	r25, 0xFF	; 255
    1992:	90 93 21 20 	sts	0x2021, r25
	if (uart_itail >= MAX_IBUFFER_LEN){
    1996:	90 91 21 20 	lds	r25, 0x2021
    199a:	9a 3f       	cpi	r25, 0xFA	; 250
    199c:	10 f0       	brcs	.+4      	; 0x19a2 <uart_idequeue+0x1a>
		uart_itail = 0;
    199e:	10 92 21 20 	sts	0x2021, r1
	}
	return uart_ibuffer[oldtail];
    19a2:	e2 e2       	ldi	r30, 0x22	; 34
    19a4:	f0 e2       	ldi	r31, 0x20	; 32
    19a6:	e8 0f       	add	r30, r24
    19a8:	f1 1d       	adc	r31, r1
    19aa:	80 81       	ld	r24, Z
}
    19ac:	08 95       	ret

000019ae <service_uart_buffer>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    19ae:	90 91 24 22 	lds	r25, 0x2224
    19b2:	80 91 21 20 	lds	r24, 0x2021
    19b6:	98 17       	cp	r25, r24
    19b8:	30 f0       	brcs	.+12     	; 0x19c6 <service_uart_buffer+0x18>
		return (uart_ihead - uart_itail);
    19ba:	80 91 24 22 	lds	r24, 0x2224
    19be:	90 91 21 20 	lds	r25, 0x2021
    19c2:	89 1b       	sub	r24, r25
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <service_uart_buffer+0x24>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    19c6:	80 91 24 22 	lds	r24, 0x2224
    19ca:	90 91 21 20 	lds	r25, 0x2021
    19ce:	86 50       	subi	r24, 0x06	; 6
    19d0:	89 1b       	sub	r24, r25
	uart_send_byte(&udata, ":");
	for (uint8_t i=0; i<uart_icount(); i++){uart_send_byte(&udata, uart_ibuffer[i]);}
}

inline void service_uart_buffer(){
	if (uart_icount() > 0) {pwm_hunt_target();}
    19d2:	88 23       	and	r24, r24
    19d4:	11 f0       	breq	.+4      	; 0x19da <service_uart_buffer+0x2c>
    19d6:	0e 94 8b 05 	call	0xb16	; 0xb16 <pwm_hunt_target>
    19da:	08 95       	ret

000019dc <init_ui>:

//Handles all UI hardware (buttons, switches, and lights)

void init_ui(){
	//LED's are located at PD0 (Middle) and PD4 (Left)
	PORTD.DIRSET = 0x11; //pins 0 and 4 to output
    19dc:	e0 e6       	ldi	r30, 0x60	; 96
    19de:	f6 e0       	ldi	r31, 0x06	; 6
    19e0:	81 e1       	ldi	r24, 0x11	; 17
    19e2:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x11; //pins 0 and 4 to high (off)
    19e4:	85 83       	std	Z+5, r24	; 0x05
	PORTD.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    19e6:	80 e4       	ldi	r24, 0x40	; 64
    19e8:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    19ea:	84 8b       	std	Z+20, r24	; 0x14
	TCD0.CTRLA = 0x07; //enable; div1024
    19ec:	e0 e0       	ldi	r30, 0x00	; 0
    19ee:	f9 e0       	ldi	r31, 0x09	; 9
    19f0:	57 e0       	ldi	r21, 0x07	; 7
    19f2:	50 83       	st	Z, r21
	TCD0.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    19f4:	43 e1       	ldi	r20, 0x13	; 19
    19f6:	41 83       	std	Z+1, r20	; 0x01
	TCD0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	86 a3       	lds	r24, 0x56
    19fe:	97 a3       	lds	r25, 0x57
	TCD0.CCA = 0x0080; //Default to off-level brightness
    1a00:	20 e8       	ldi	r18, 0x80	; 128
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	20 a7       	lds	r18, 0x70
    1a06:	31 a7       	lds	r19, 0x71
	TCD1.CTRLA = 0x07; //enable; div1024
    1a08:	e0 e4       	ldi	r30, 0x40	; 64
    1a0a:	f9 e0       	ldi	r31, 0x09	; 9
    1a0c:	50 83       	st	Z, r21
	TCD1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    1a0e:	41 83       	std	Z+1, r20	; 0x01
	TCD1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    1a10:	86 a3       	lds	r24, 0x56
    1a12:	97 a3       	lds	r25, 0x57
	TCD1.CCA = 0x0010; //Default to off-level brightness
    1a14:	80 e1       	ldi	r24, 0x10	; 16
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	80 a7       	lds	r24, 0x70
    1a1a:	91 a7       	lds	r25, 0x71

	//Switches need pull-up resistance
	//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
	PORTC.DIRCLR = B8(00111100); //This is the default condition, but just to be safe
    1a1c:	e0 e4       	ldi	r30, 0x40	; 64
    1a1e:	f6 e0       	ldi	r31, 0x06	; 6
    1a20:	8c e3       	ldi	r24, 0x3C	; 60
    1a22:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN5CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    1a24:	88 e9       	ldi	r24, 0x98	; 152
    1a26:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN4CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    1a28:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN3CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges	
    1a2a:	83 8b       	std	Z+19, r24	; 0x13
	//Button requirements
	//	Button Interrupt Controls
	//	Button: PC2 = Button0
	#define RISING_EDGE 	B8(10011001) //Slew rate limiter on; Internal pull-up on; Sense on rising input edges
	#define FALLING_EDGE 	B8(10011010) //Slew rate limiter on; Internal pull-up on; Sense on falling input edges
	PORTC.INT0MASK = B8(00000100); //Enable interrupt0 channel for PC2 
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = B8(00000011); //interrupt0 channel set to high priority
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	81 87       	std	Z+9, r24	; 0x09
	PORTC.PIN2CTRL = FALLING_EDGE; 
    1a34:	8a e9       	ldi	r24, 0x9A	; 154
    1a36:	82 8b       	std	Z+18, r24	; 0x12
	STATE_Button = BUTTON_IDLE;
    1a38:	10 92 15 20 	sts	0x2015, r1
}
    1a3c:	08 95       	ret

00001a3e <led_dim>:
void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}

void led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    1a3e:	88 23       	and	r24, r24
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <led_dim+0xa>
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	61 f4       	brne	.+24     	; 0x1a5e <led_dim+0x20>
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <led_dim+0x16>
	case LED_LEFT:
		TCD1.CCABUF = (uint16_t)brightness;		
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	e0 e4       	ldi	r30, 0x40	; 64
    1a4c:	f9 e0       	ldi	r31, 0x09	; 9
    1a4e:	60 af       	sts	0x70, r22
    1a50:	71 af       	sts	0x71, r23
		break;
    1a52:	08 95       	ret
	case LED_MID:
		TCD0.CCABUF = (uint16_t)brightness;		
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	e0 e0       	ldi	r30, 0x00	; 0
    1a58:	f9 e0       	ldi	r31, 0x09	; 9
    1a5a:	60 af       	sts	0x70, r22
    1a5c:	71 af       	sts	0x71, r23
    1a5e:	08 95       	ret

00001a60 <led_off>:
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <led_dim>
    1a66:	08 95       	ret

00001a68 <led_on>:

//#############################################################
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}
    1a68:	6f ef       	ldi	r22, 0xFF	; 255
    1a6a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <led_dim>
    1a6e:	08 95       	ret

00001a70 <led_toggle>:
		break;
	}
}

void led_toggle(uint8_t which){
	switch(which){
    1a70:	88 23       	and	r24, r24
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <led_toggle+0xa>
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	61 f4       	brne	.+24     	; 0x1a90 <led_toggle+0x20>
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <led_toggle+0x16>
	case LED_LEFT:
		TCD1.CCAL = ~TCD1.CCAL;		
    1a7a:	e0 e4       	ldi	r30, 0x40	; 64
    1a7c:	f9 e0       	ldi	r31, 0x09	; 9
    1a7e:	80 a5       	lds	r24, 0x60
    1a80:	80 95       	com	r24
    1a82:	80 a7       	lds	r24, 0x70
		break;
    1a84:	08 95       	ret
	case LED_MID:
		TCD0.CCAL = ~TCD0.CCAL;		
    1a86:	e0 e0       	ldi	r30, 0x00	; 0
    1a88:	f9 e0       	ldi	r31, 0x09	; 9
    1a8a:	80 a5       	lds	r24, 0x60
    1a8c:	80 95       	com	r24
    1a8e:	80 a7       	lds	r24, 0x70
    1a90:	08 95       	ret

00001a92 <service_leds>:
	}
}

void service_leds(){

}
    1a92:	08 95       	ret

00001a94 <__vector_2>:
//#############################################################
//## BUTTON -- Interrupt driven
//#############################################################

//Caution with programatic use as I do not implement switch debouncing
SIGNAL(PORTC_INT0_vect){
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	8f 93       	push	r24
    1aa0:	ef 93       	push	r30
    1aa2:	ff 93       	push	r31
	if (PORTC.PIN2CTRL == FALLING_EDGE){
    1aa4:	e0 e4       	ldi	r30, 0x40	; 64
    1aa6:	f6 e0       	ldi	r31, 0x06	; 6
    1aa8:	82 89       	ldd	r24, Z+18	; 0x12
    1aaa:	8a 39       	cpi	r24, 0x9A	; 154
    1aac:	31 f4       	brne	.+12     	; 0x1aba <__vector_2+0x26>
		//Just detected a falling edge (button has been pressed in)
		PORTC.PIN2CTRL = RISING_EDGE;
    1aae:	89 e9       	ldi	r24, 0x99	; 153
    1ab0:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_PUSHED;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 15 20 	sts	0x2015, r24
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <__vector_2+0x34>
	}
	else {
		//Just detected a rising edge (button has been released)
		PORTC.PIN2CTRL = FALLING_EDGE;
    1aba:	8a e9       	ldi	r24, 0x9A	; 154
    1abc:	e0 e4       	ldi	r30, 0x40	; 64
    1abe:	f6 e0       	ldi	r31, 0x06	; 6
    1ac0:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_RELEASED;
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	80 93 15 20 	sts	0x2015, r24
	}
}
    1ac8:	ff 91       	pop	r31
    1aca:	ef 91       	pop	r30
    1acc:	8f 91       	pop	r24
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <service_button>:
		//Actions when the button is pushed and held down
	}
	else {
		//Actions when the button is not pressed or held
	}
}
    1ad8:	08 95       	ret

00001ada <sw_on>:
//## SWITCHESs -- Polling only
//#############################################################

//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
boolean sw_on(uint8_t which){
	switch(which){
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	69 f0       	breq	.+26     	; 0x1af8 <sw_on+0x1e>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	18 f0       	brcs	.+6      	; 0x1ae8 <sw_on+0xe>
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	c9 f4       	brne	.+50     	; 0x1b18 <sw_on+0x3e>
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <sw_on+0x2e>
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
    1ae8:	e0 e4       	ldi	r30, 0x40	; 64
    1aea:	f6 e0       	ldi	r31, 0x06	; 6
    1aec:	90 85       	ldd	r25, Z+8	; 0x08
			//Switch is closed (on)
			return true;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	95 ff       	sbrs	r25, 5
    1af2:	13 c0       	rjmp	.+38     	; 0x1b1a <sw_on+0x40>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW2:
		if ((PORTC.IN & _BV(4)) == 0x00){
    1af8:	e0 e4       	ldi	r30, 0x40	; 64
    1afa:	f6 e0       	ldi	r31, 0x06	; 6
    1afc:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	94 ff       	sbrs	r25, 4
    1b02:	0b c0       	rjmp	.+22     	; 0x1b1a <sw_on+0x40>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW3:
		if ((PORTC.IN & _BV(3)) == 0x00){
    1b08:	e0 e4       	ldi	r30, 0x40	; 64
    1b0a:	f6 e0       	ldi	r31, 0x06	; 6
    1b0c:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	93 ff       	sbrs	r25, 3
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <sw_on+0x40>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	default:
		return false;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1b1a:	08 95       	ret

00001b1c <service_switches>:

void service_switches(){
	static uint8_t mode = 0; //Store prior MODE state

	//[Switch 1] Audio vs. Photodiode Mode -- use pwm.c / pwm_mode() to test condition
	if (sw_on(SW1) == true){
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <sw_on>
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	51 f4       	brne	.+20     	; 0x1b3a <service_switches+0x1e>
		if (mode != MODE_AUDIO){
    1b26:	80 91 14 20 	lds	r24, 0x2014
    1b2a:	85 33       	cpi	r24, 0x35	; 53
    1b2c:	79 f0       	breq	.+30     	; 0x1b4c <service_switches+0x30>
			//Just changed modes into AUDIO mode!
			mode = MODE_AUDIO; //update state
    1b2e:	85 e3       	ldi	r24, 0x35	; 53
    1b30:	80 93 14 20 	sts	0x2014, r24
			pwm_enable(); //turn on AUDIO mode interrupts and configure!
    1b34:	0e 94 4f 03 	call	0x69e	; 0x69e <pwm_enable>
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <service_switches+0x30>
		}
	}
	else {
		if (mode != MODE_PHOTO){
    1b3a:	80 91 14 20 	lds	r24, 0x2014
    1b3e:	86 33       	cpi	r24, 0x36	; 54
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <service_switches+0x30>
			//Just changed modes into PHOTO mode!
			mode = MODE_PHOTO; //update state
    1b42:	86 e3       	ldi	r24, 0x36	; 54
    1b44:	80 93 14 20 	sts	0x2014, r24
			pwm_disable();
    1b48:	0e 94 73 03 	call	0x6e6	; 0x6e6 <pwm_disable>
		}
	}
	//[Switch 2] Output polarity
	if (sw_on(SW2) == true){
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <sw_on>
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	61 f4       	brne	.+24     	; 0x1b6e <service_switches+0x52>
		if (pwm_mode() == false) ac_polarity(IDLE_HIGH);
    1b56:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pwm_mode>
    1b5a:	88 23       	and	r24, r24
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <service_switches+0x4a>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <service_switches+0x68>
		else pwm_polarity(NEGATIVE_PULSE);
    1b66:	88 e5       	ldi	r24, 0x58	; 88
    1b68:	0e 94 82 03 	call	0x704	; 0x704 <pwm_polarity>
    1b6c:	0b c0       	rjmp	.+22     	; 0x1b84 <service_switches+0x68>
	}
	else {
		if (pwm_mode() == false) ac_polarity(IDLE_LOW);
    1b6e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pwm_mode>
    1b72:	88 23       	and	r24, r24
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <service_switches+0x62>
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <service_switches+0x68>
		else pwm_polarity(POSITIVE_PULSE);
    1b7e:	87 e5       	ldi	r24, 0x57	; 87
    1b80:	0e 94 82 03 	call	0x704	; 0x704 <pwm_polarity>
	}
	//[Switch 3] Hysteresis enable
	if (sw_on(SW3) == true){
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <sw_on>
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	41 f4       	brne	.+16     	; 0x1b9e <service_switches+0x82>
		if (pwm_mode() == false) ac_hysteresis(LARGE);
    1b8e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pwm_mode>
    1b92:	88 23       	and	r24, r24
    1b94:	51 f4       	brne	.+20     	; 0x1baa <service_switches+0x8e>
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1b9c:	08 95       	ret
	}
	else {
		if (pwm_mode() == false) ac_hysteresis(NONE);
    1b9e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pwm_mode>
    1ba2:	88 23       	and	r24, r24
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <service_switches+0x8e>
    1ba6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1baa:	08 95       	ret

00001bac <__udivmodsi4>:
    1bac:	a1 e2       	ldi	r26, 0x21	; 33
    1bae:	1a 2e       	mov	r1, r26
    1bb0:	aa 1b       	sub	r26, r26
    1bb2:	bb 1b       	sub	r27, r27
    1bb4:	fd 01       	movw	r30, r26
    1bb6:	0d c0       	rjmp	.+26     	; 0x1bd2 <__udivmodsi4_ep>

00001bb8 <__udivmodsi4_loop>:
    1bb8:	aa 1f       	adc	r26, r26
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	ee 1f       	adc	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	a2 17       	cp	r26, r18
    1bc2:	b3 07       	cpc	r27, r19
    1bc4:	e4 07       	cpc	r30, r20
    1bc6:	f5 07       	cpc	r31, r21
    1bc8:	20 f0       	brcs	.+8      	; 0x1bd2 <__udivmodsi4_ep>
    1bca:	a2 1b       	sub	r26, r18
    1bcc:	b3 0b       	sbc	r27, r19
    1bce:	e4 0b       	sbc	r30, r20
    1bd0:	f5 0b       	sbc	r31, r21

00001bd2 <__udivmodsi4_ep>:
    1bd2:	66 1f       	adc	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	1a 94       	dec	r1
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <__udivmodsi4_loop>
    1bde:	60 95       	com	r22
    1be0:	70 95       	com	r23
    1be2:	80 95       	com	r24
    1be4:	90 95       	com	r25
    1be6:	9b 01       	movw	r18, r22
    1be8:	ac 01       	movw	r20, r24
    1bea:	bd 01       	movw	r22, r26
    1bec:	cf 01       	movw	r24, r30
    1bee:	08 95       	ret

00001bf0 <__eerd_block_x32a4>:
    1bf0:	e0 ec       	ldi	r30, 0xC0	; 192
    1bf2:	f1 e0       	ldi	r31, 0x01	; 1
    1bf4:	a7 85       	ldd	r26, Z+15	; 0x0f
    1bf6:	a7 fd       	sbrc	r26, 7
    1bf8:	fd cf       	rjmp	.-6      	; 0x1bf4 <__eerd_block_x32a4+0x4>
    1bfa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bfc:	a8 60       	ori	r26, 0x08	; 8
    1bfe:	a4 87       	std	Z+12, r26	; 0x0c
    1c00:	60 50       	subi	r22, 0x00	; 0
    1c02:	70 4f       	sbci	r23, 0xF0	; 240
    1c04:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <memcpy>

00001c08 <__eerd_byte_x32a4>:
    1c08:	03 d0       	rcall	.+6      	; 0x1c10 <eeprom_mapen>
    1c0a:	80 81       	ld	r24, Z
    1c0c:	99 27       	eor	r25, r25
    1c0e:	08 95       	ret

00001c10 <eeprom_mapen>:
    1c10:	e0 ec       	ldi	r30, 0xC0	; 192
    1c12:	f1 e0       	ldi	r31, 0x01	; 1
    1c14:	37 85       	ldd	r19, Z+15	; 0x0f
    1c16:	37 fd       	sbrc	r19, 7
    1c18:	fd cf       	rjmp	.-6      	; 0x1c14 <eeprom_mapen+0x4>
    1c1a:	34 85       	ldd	r19, Z+12	; 0x0c
    1c1c:	38 60       	ori	r19, 0x08	; 8
    1c1e:	34 87       	std	Z+12, r19	; 0x0c
    1c20:	fc 01       	movw	r30, r24
    1c22:	e0 50       	subi	r30, 0x00	; 0
    1c24:	f0 4f       	sbci	r31, 0xF0	; 240
    1c26:	08 95       	ret

00001c28 <__eewr_block_x32a4>:
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <__eewr_block_x32a4+0xc>
    1c2e:	2d 91       	ld	r18, X+
    1c30:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__eewr_r18_x32a4>
    1c34:	41 50       	subi	r20, 0x01	; 1
    1c36:	50 40       	sbci	r21, 0x00	; 0
    1c38:	d0 f7       	brcc	.-12     	; 0x1c2e <__eewr_block_x32a4+0x6>
    1c3a:	08 95       	ret

00001c3c <__eewr_byte_x32a4>:
    1c3c:	26 2f       	mov	r18, r22

00001c3e <__eewr_r18_x32a4>:
    1c3e:	e0 ec       	ldi	r30, 0xC0	; 192
    1c40:	f1 e0       	ldi	r31, 0x01	; 1
    1c42:	37 85       	ldd	r19, Z+15	; 0x0f
    1c44:	37 fd       	sbrc	r19, 7
    1c46:	fd cf       	rjmp	.-6      	; 0x1c42 <__eewr_r18_x32a4+0x4>
    1c48:	34 85       	ldd	r19, Z+12	; 0x0c
    1c4a:	37 7f       	andi	r19, 0xF7	; 247
    1c4c:	34 87       	std	Z+12, r19	; 0x0c
    1c4e:	37 85       	ldd	r19, Z+15	; 0x0f
    1c50:	31 ff       	sbrs	r19, 1
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <__eewr_r18_x32a4+0x28>
    1c54:	36 e3       	ldi	r19, 0x36	; 54
    1c56:	32 87       	std	Z+10, r19	; 0x0a
    1c58:	38 ed       	ldi	r19, 0xD8	; 216
    1c5a:	34 bf       	out	0x34, r19	; 52
    1c5c:	31 e0       	ldi	r19, 0x01	; 1
    1c5e:	33 87       	std	Z+11, r19	; 0x0b
    1c60:	37 85       	ldd	r19, Z+15	; 0x0f
    1c62:	37 fd       	sbrc	r19, 7
    1c64:	fd cf       	rjmp	.-6      	; 0x1c60 <__eewr_r18_x32a4+0x22>
    1c66:	33 e3       	ldi	r19, 0x33	; 51
    1c68:	32 87       	std	Z+10, r19	; 0x0a
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	24 83       	std	Z+4, r18	; 0x04
    1c72:	25 e3       	ldi	r18, 0x35	; 53
    1c74:	22 87       	std	Z+10, r18	; 0x0a
    1c76:	28 ed       	ldi	r18, 0xD8	; 216
    1c78:	31 e0       	ldi	r19, 0x01	; 1
    1c7a:	24 bf       	out	0x34, r18	; 52
    1c7c:	33 87       	std	Z+11, r19	; 0x0b
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	08 95       	ret

00001c82 <memcpy>:
    1c82:	fb 01       	movw	r30, r22
    1c84:	dc 01       	movw	r26, r24
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <memcpy+0xa>
    1c88:	01 90       	ld	r0, Z+
    1c8a:	0d 92       	st	X+, r0
    1c8c:	41 50       	subi	r20, 0x01	; 1
    1c8e:	50 40       	sbci	r21, 0x00	; 0
    1c90:	d8 f7       	brcc	.-10     	; 0x1c88 <memcpy+0x6>
    1c92:	08 95       	ret

00001c94 <_exit>:
    1c94:	f8 94       	cli

00001c96 <__stop_program>:
    1c96:	ff cf       	rjmp	.-2      	; 0x1c96 <__stop_program>
